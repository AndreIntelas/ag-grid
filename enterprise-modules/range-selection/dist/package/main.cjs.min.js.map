{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// enterprise-modules/range-selection/src/main.ts\nvar main_exports = {};\n__export(main_exports, {\n  RangeSelectionModule: () => RangeSelectionModule\n});\nmodule.exports = __toCommonJS(main_exports);\n\n// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nvar import_core6 = require(\"@ag-grid-community/core\");\nvar import_core7 = require(\"@ag-grid-enterprise/core\");\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeService.ts\nvar import_core = require(\"@ag-grid-community/core\");\nvar RangeService = class extends import_core.BeanStub {\n  constructor() {\n    super(...arguments);\n    this.cellRanges = [];\n    this.bodyScrollListener = this.onBodyScroll.bind(this);\n    this.dragging = false;\n    this.intersectionRange = false;\n  }\n  init() {\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_NEW_COLUMNS_LOADED, () => this.onColumnsChanged());\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_VISIBLE, this.onColumnsChanged.bind(this));\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_VALUE_CHANGED, this.onColumnsChanged.bind(this));\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_ROW_GROUP_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_PIVOT_CHANGED, () => this.removeAllCellRanges());\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_GROUP_OPENED, this.refreshLastRangeStart.bind(this));\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_MOVED, this.refreshLastRangeStart.bind(this));\n    this.addManagedListener(this.eventService, import_core.Events.EVENT_COLUMN_PINNED, this.refreshLastRangeStart.bind(this));\n    this.ctrlsService.whenReady(() => {\n      const gridBodyCtrl = this.ctrlsService.getGridBodyCtrl();\n      this.autoScrollService = new import_core.AutoScrollService({\n        scrollContainer: gridBodyCtrl.getBodyViewportElement(),\n        scrollAxis: \"xy\",\n        getVerticalPosition: () => gridBodyCtrl.getScrollFeature().getVScrollPosition().top,\n        setVerticalPosition: (position) => gridBodyCtrl.getScrollFeature().setVerticalScrollPosition(position),\n        getHorizontalPosition: () => gridBodyCtrl.getScrollFeature().getHScrollPosition().left,\n        setHorizontalPosition: (position) => gridBodyCtrl.getScrollFeature().setHorizontalScrollPosition(position),\n        shouldSkipVerticalScroll: () => !this.gridOptionsService.isDomLayout(\"normal\"),\n        shouldSkipHorizontalScroll: () => !gridBodyCtrl.getScrollFeature().isHorizontalScrollShowing()\n      });\n    });\n  }\n  // Called for both columns loaded & column visibility events\n  onColumnsChanged() {\n    this.refreshLastRangeStart();\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    this.cellRanges.forEach((cellRange) => {\n      const beforeCols = cellRange.columns;\n      cellRange.columns = cellRange.columns.filter(\n        (col) => col.isVisible() && allColumns.indexOf(col) !== -1\n      );\n      const colsInRangeChanged = !import_core._.areEqual(beforeCols, cellRange.columns);\n      if (colsInRangeChanged) {\n        this.dispatchChangedEvent(false, true, cellRange.id);\n      }\n    });\n    const countBefore = this.cellRanges.length;\n    this.cellRanges = this.cellRanges.filter((range) => range.columns.length > 0);\n    if (countBefore > this.cellRanges.length) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  refreshLastRangeStart() {\n    const lastRange = import_core._.last(this.cellRanges);\n    if (!lastRange) {\n      return;\n    }\n    this.refreshRangeStart(lastRange);\n  }\n  isContiguousRange(cellRange) {\n    const rangeColumns = cellRange.columns;\n    if (!rangeColumns.length) {\n      return false;\n    }\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allPositions = rangeColumns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    return import_core._.last(allPositions) - allPositions[0] + 1 === rangeColumns.length;\n  }\n  getRangeStartRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.startRow : cellRange.endRow;\n    }\n    const rowPinned = this.pinnedRowModel.getPinnedTopRowCount() > 0 ? \"top\" : null;\n    return { rowIndex: 0, rowPinned };\n  }\n  getRangeEndRow(cellRange) {\n    if (cellRange.startRow && cellRange.endRow) {\n      return this.rowPositionUtils.before(cellRange.startRow, cellRange.endRow) ? cellRange.endRow : cellRange.startRow;\n    }\n    const pinnedBottomRowCount = this.pinnedRowModel.getPinnedBottomRowCount();\n    const pinnedBottom = pinnedBottomRowCount > 0;\n    if (pinnedBottom) {\n      return {\n        rowIndex: pinnedBottomRowCount - 1,\n        rowPinned: \"bottom\"\n      };\n    }\n    return {\n      rowIndex: this.rowModel.getRowCount() - 1,\n      rowPinned: null\n    };\n  }\n  setRangeToCell(cell, appendRange = false) {\n    if (!this.gridOptionsService.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(cell.column, cell.column);\n    if (!columns) {\n      return;\n    }\n    const suppressMultiRangeSelections = this.gridOptionsService.get(\"suppressMultiRangeSelection\");\n    if (suppressMultiRangeSelections || !appendRange || import_core._.missing(this.cellRanges)) {\n      this.removeAllCellRanges(true);\n    }\n    const rowForCell = {\n      rowIndex: cell.rowIndex,\n      rowPinned: cell.rowPinned\n    };\n    const cellRange = {\n      startRow: rowForCell,\n      endRow: rowForCell,\n      columns,\n      startColumn: cell.column\n    };\n    this.cellRanges.push(cellRange);\n    this.setNewestRangeStartCell(cell);\n    this.onDragStop();\n    this.dispatchChangedEvent(true, true);\n  }\n  extendLatestRangeToCell(cellPosition) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const cellRange = import_core._.last(this.cellRanges);\n    this.updateRangeEnd(cellRange, cellPosition);\n  }\n  updateRangeEnd(cellRange, cellPosition, silent = false) {\n    const endColumn = cellPosition.column;\n    const colsToAdd = this.calculateColumnsBetween(cellRange.startColumn, endColumn);\n    if (!colsToAdd || this.isLastCellOfRange(cellRange, cellPosition)) {\n      return;\n    }\n    cellRange.columns = colsToAdd;\n    cellRange.endRow = { rowIndex: cellPosition.rowIndex, rowPinned: cellPosition.rowPinned };\n    if (!silent) {\n      this.dispatchChangedEvent(true, true, cellRange.id);\n    }\n  }\n  refreshRangeStart(cellRange) {\n    const { startColumn, columns } = cellRange;\n    const moveColInCellRange = (colToMove, moveToFront) => {\n      const otherCols = cellRange.columns.filter((col) => col !== colToMove);\n      if (colToMove) {\n        cellRange.startColumn = colToMove;\n        cellRange.columns = moveToFront ? [colToMove, ...otherCols] : [...otherCols, colToMove];\n      } else {\n        cellRange.columns = otherCols;\n      }\n    };\n    const { left, right } = this.getRangeEdgeColumns(cellRange);\n    const shouldMoveLeftCol = startColumn === columns[0] && startColumn !== left;\n    if (shouldMoveLeftCol) {\n      moveColInCellRange(left, true);\n      return;\n    }\n    const shouldMoveRightCol = startColumn === import_core._.last(columns) && startColumn === right;\n    if (shouldMoveRightCol) {\n      moveColInCellRange(right, false);\n      return;\n    }\n  }\n  getRangeEdgeColumns(cellRange) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allIndices = cellRange.columns.map((c) => allColumns.indexOf(c)).filter((i) => i > -1).sort((a, b) => a - b);\n    return {\n      left: allColumns[allIndices[0]],\n      right: allColumns[import_core._.last(allIndices)]\n    };\n  }\n  // returns true if successful, false if not successful\n  extendLatestRangeInDirection(event) {\n    if (this.isEmpty() || !this.newestRangeStartCell) {\n      return;\n    }\n    const key = event.key;\n    const ctrlKey = event.ctrlKey || event.metaKey;\n    const lastRange = import_core._.last(this.cellRanges);\n    const startCell = this.newestRangeStartCell;\n    const firstCol = lastRange.columns[0];\n    const lastCol = import_core._.last(lastRange.columns);\n    const endCellIndex = lastRange.endRow.rowIndex;\n    const endCellFloating = lastRange.endRow.rowPinned;\n    const endCellColumn = startCell.column === firstCol ? lastCol : firstCol;\n    const endCell = { column: endCellColumn, rowIndex: endCellIndex, rowPinned: endCellFloating };\n    const newEndCell = this.cellNavigationService.getNextCellToFocus(key, endCell, ctrlKey);\n    if (!newEndCell) {\n      return;\n    }\n    this.setCellRange({\n      rowStartIndex: startCell.rowIndex,\n      rowStartPinned: startCell.rowPinned,\n      rowEndIndex: newEndCell.rowIndex,\n      rowEndPinned: newEndCell.rowPinned,\n      columnStart: startCell.column,\n      columnEnd: newEndCell.column\n    });\n    return newEndCell;\n  }\n  setCellRange(params) {\n    if (!this.gridOptionsService.get(\"enableRangeSelection\")) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    this.addCellRange(params);\n  }\n  setCellRanges(cellRanges) {\n    if (import_core._.shallowCompare(this.cellRanges, cellRanges)) {\n      return;\n    }\n    this.removeAllCellRanges(true);\n    cellRanges.forEach((newRange) => {\n      if (newRange.columns && newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.columns[0]\n        });\n      }\n      this.cellRanges.push(newRange);\n    });\n    this.dispatchChangedEvent(false, true);\n  }\n  setNewestRangeStartCell(position) {\n    this.newestRangeStartCell = position;\n  }\n  clearCellRangeCellValues(params) {\n    let { cellRanges } = params;\n    const {\n      cellEventSource = \"rangeService\",\n      dispatchWrapperEvents,\n      wrapperEventSource = \"deleteKey\"\n    } = params;\n    if (dispatchWrapperEvents) {\n      const startEvent = {\n        type: import_core.Events.EVENT_RANGE_DELETE_START,\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(startEvent);\n    }\n    if (!cellRanges) {\n      cellRanges = this.cellRanges;\n    }\n    cellRanges.forEach((cellRange) => {\n      this.forEachRowInRange(cellRange, (rowPosition) => {\n        const rowNode = this.rowPositionUtils.getRowNode(rowPosition);\n        if (!rowNode) {\n          return;\n        }\n        for (let i = 0; i < cellRange.columns.length; i++) {\n          const column = this.columnModel.getGridColumn(cellRange.columns[i]);\n          if (!column || !column.isCellEditable(rowNode)) {\n            continue;\n          }\n          rowNode.setDataValue(column, null, cellEventSource);\n        }\n      });\n    });\n    if (dispatchWrapperEvents) {\n      const endEvent = {\n        type: import_core.Events.EVENT_RANGE_DELETE_END,\n        source: wrapperEventSource\n      };\n      this.eventService.dispatchEvent(endEvent);\n    }\n  }\n  createCellRangeFromCellRangeParams(params) {\n    let columns;\n    let startsOnTheRight = false;\n    if (params.columns) {\n      columns = params.columns.map((c) => this.columnModel.getColumnWithValidation(c)).filter((c) => c);\n    } else {\n      const columnStart = this.columnModel.getColumnWithValidation(params.columnStart);\n      const columnEnd = this.columnModel.getColumnWithValidation(params.columnEnd);\n      if (!columnStart || !columnEnd) {\n        return;\n      }\n      columns = this.calculateColumnsBetween(columnStart, columnEnd);\n      if (columns && columns.length) {\n        startsOnTheRight = columns[0] !== columnStart;\n      }\n    }\n    if (!columns) {\n      return;\n    }\n    const startRow = params.rowStartIndex != null ? {\n      rowIndex: params.rowStartIndex,\n      rowPinned: params.rowStartPinned || null\n    } : void 0;\n    const endRow = params.rowEndIndex != null ? {\n      rowIndex: params.rowEndIndex,\n      rowPinned: params.rowEndPinned || null\n    } : void 0;\n    return {\n      startRow,\n      endRow,\n      columns,\n      startColumn: startsOnTheRight ? import_core._.last(columns) : columns[0]\n    };\n  }\n  addCellRange(params) {\n    if (!this.gridOptionsService.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const newRange = this.createCellRangeFromCellRangeParams(params);\n    if (newRange) {\n      if (newRange.startRow) {\n        this.setNewestRangeStartCell({\n          rowIndex: newRange.startRow.rowIndex,\n          rowPinned: newRange.startRow.rowPinned,\n          column: newRange.startColumn\n        });\n      }\n      this.cellRanges.push(newRange);\n      this.dispatchChangedEvent(false, true, newRange.id);\n    }\n  }\n  getCellRanges() {\n    return this.cellRanges;\n  }\n  isEmpty() {\n    return this.cellRanges.length === 0;\n  }\n  isMoreThanOneCell() {\n    const len = this.cellRanges.length;\n    if (len === 0) {\n      return false;\n    }\n    if (len > 1) {\n      return true;\n    }\n    const range = this.cellRanges[0];\n    const startRow = this.getRangeStartRow(range);\n    const endRow = this.getRangeEndRow(range);\n    return startRow.rowPinned !== endRow.rowPinned || startRow.rowIndex !== endRow.rowIndex || range.columns.length !== 1;\n  }\n  areAllRangesAbleToMerge() {\n    const rowToColumnMap = /* @__PURE__ */ new Map();\n    const len = this.cellRanges.length;\n    if (len <= 1)\n      return true;\n    this.cellRanges.forEach((range) => {\n      this.forEachRowInRange(range, (row) => {\n        const rowName = `${row.rowPinned || \"normal\"}_${row.rowIndex}`;\n        const columns = rowToColumnMap.get(rowName);\n        const currentRangeColIds = range.columns.map((col) => col.getId());\n        if (columns) {\n          const filteredColumns = currentRangeColIds.filter((col) => columns.indexOf(col) === -1);\n          columns.push(...filteredColumns);\n        } else {\n          rowToColumnMap.set(rowName, currentRangeColIds);\n        }\n      });\n    });\n    let columnsString;\n    for (const val of rowToColumnMap.values()) {\n      const currentValString = val.sort().join();\n      if (columnsString === void 0) {\n        columnsString = currentValString;\n        continue;\n      }\n      if (columnsString !== currentValString) {\n        return false;\n      }\n    }\n    return true;\n  }\n  forEachRowInRange(cellRange, callback) {\n    const topRow = this.getRangeStartRow(cellRange);\n    const bottomRow = this.getRangeEndRow(cellRange);\n    let currentRow = topRow;\n    while (currentRow) {\n      callback(currentRow);\n      if (this.rowPositionUtils.sameRow(currentRow, bottomRow)) {\n        break;\n      }\n      currentRow = this.cellNavigationService.getRowBelow(currentRow);\n    }\n  }\n  removeAllCellRanges(silent) {\n    if (this.isEmpty()) {\n      return;\n    }\n    this.onDragStop();\n    this.cellRanges.length = 0;\n    if (!silent) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  // as the user is dragging outside of the panel, the div starts to scroll, which in turn\n  // means we are selection more (or less) cells, but the mouse isn't moving, so we recalculate\n  // the selection my mimicking a new mouse event\n  onBodyScroll() {\n    if (this.dragging && this.lastMouseEvent) {\n      this.onDragging(this.lastMouseEvent);\n    }\n  }\n  isCellInAnyRange(cell) {\n    return this.getCellRangeCount(cell) > 0;\n  }\n  isCellInSpecificRange(cell, range) {\n    const columnInRange = range.columns !== null && import_core._.includes(range.columns, cell.column);\n    const rowInRange = this.isRowInRange(cell.rowIndex, cell.rowPinned, range);\n    return columnInRange && rowInRange;\n  }\n  isLastCellOfRange(cellRange, cell) {\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && cell.rowPinned === lastRow.rowPinned;\n    const rangeFirstIndexColumn = cellRange.columns[0];\n    const rangeLastIndexColumn = import_core._.last(cellRange.columns);\n    const lastRangeColumn = cellRange.startColumn === rangeFirstIndexColumn ? rangeLastIndexColumn : rangeFirstIndexColumn;\n    const isLastColumn = cell.column === lastRangeColumn;\n    return isLastColumn && isLastRow;\n  }\n  isBottomRightCell(cellRange, cell) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const allPositions = cellRange.columns.map((c) => allColumns.indexOf(c)).sort((a, b) => a - b);\n    const { startRow, endRow } = cellRange;\n    const lastRow = this.rowPositionUtils.before(startRow, endRow) ? endRow : startRow;\n    const isRightColumn = allColumns.indexOf(cell.column) === import_core._.last(allPositions);\n    const isLastRow = cell.rowIndex === lastRow.rowIndex && import_core._.makeNull(cell.rowPinned) === import_core._.makeNull(lastRow.rowPinned);\n    return isRightColumn && isLastRow;\n  }\n  // returns the number of ranges this cell is in\n  getCellRangeCount(cell) {\n    if (this.isEmpty()) {\n      return 0;\n    }\n    return this.cellRanges.filter((cellRange) => this.isCellInSpecificRange(cell, cellRange)).length;\n  }\n  isRowInRange(rowIndex, floating, cellRange) {\n    const firstRow = this.getRangeStartRow(cellRange);\n    const lastRow = this.getRangeEndRow(cellRange);\n    const thisRow = { rowIndex, rowPinned: floating || null };\n    const equalsFirstRow = thisRow.rowIndex === firstRow.rowIndex && thisRow.rowPinned == firstRow.rowPinned;\n    const equalsLastRow = thisRow.rowIndex === lastRow.rowIndex && thisRow.rowPinned == lastRow.rowPinned;\n    if (equalsFirstRow || equalsLastRow) {\n      return true;\n    }\n    const afterFirstRow = !this.rowPositionUtils.before(thisRow, firstRow);\n    const beforeLastRow = this.rowPositionUtils.before(thisRow, lastRow);\n    return afterFirstRow && beforeLastRow;\n  }\n  getDraggingRange() {\n    return this.draggingRange;\n  }\n  onDragStart(mouseEvent) {\n    if (!this.gridOptionsService.get(\"enableRangeSelection\")) {\n      return;\n    }\n    const { ctrlKey, metaKey, shiftKey } = mouseEvent;\n    const isMultiKey = ctrlKey || metaKey;\n    const allowMulti = !this.gridOptionsService.get(\"suppressMultiRangeSelection\");\n    const isMultiSelect = allowMulti ? isMultiKey : false;\n    const extendRange = shiftKey && import_core._.existsAndNotEmpty(this.cellRanges);\n    if (!isMultiSelect && (!extendRange || import_core._.exists(import_core._.last(this.cellRanges).type))) {\n      this.removeAllCellRanges(true);\n    }\n    const startTarget = this.dragService.getStartTarget();\n    if (startTarget) {\n      this.updateValuesOnMove(startTarget);\n    }\n    if (!this.lastCellHovered) {\n      return;\n    }\n    this.dragging = true;\n    this.lastMouseEvent = mouseEvent;\n    this.intersectionRange = isMultiSelect && this.getCellRangeCount(this.lastCellHovered) > 1;\n    if (!extendRange) {\n      this.setNewestRangeStartCell(this.lastCellHovered);\n    }\n    if (this.cellRanges.length > 0) {\n      this.draggingRange = import_core._.last(this.cellRanges);\n    } else {\n      const mouseRowPosition = {\n        rowIndex: this.lastCellHovered.rowIndex,\n        rowPinned: this.lastCellHovered.rowPinned\n      };\n      this.draggingRange = {\n        startRow: mouseRowPosition,\n        endRow: mouseRowPosition,\n        columns: [this.lastCellHovered.column],\n        startColumn: this.newestRangeStartCell.column\n      };\n      this.cellRanges.push(this.draggingRange);\n    }\n    this.ctrlsService.getGridBodyCtrl().addScrollEventListener(this.bodyScrollListener);\n    this.dispatchChangedEvent(true, false, this.draggingRange.id);\n  }\n  intersectLastRange(fromMouseClick) {\n    if (fromMouseClick && this.dragging) {\n      return;\n    }\n    if (this.gridOptionsService.get(\"suppressMultiRangeSelection\")) {\n      return;\n    }\n    if (this.isEmpty()) {\n      return;\n    }\n    const lastRange = import_core._.last(this.cellRanges);\n    const intersectionStartRow = this.getRangeStartRow(lastRange);\n    const intersectionEndRow = this.getRangeEndRow(lastRange);\n    const newRanges = [];\n    this.cellRanges.slice(0, -1).forEach((range) => {\n      const startRow = this.getRangeStartRow(range);\n      const endRow = this.getRangeEndRow(range);\n      const cols = range.columns;\n      const intersectCols = cols.filter((col) => lastRange.columns.indexOf(col) === -1);\n      if (intersectCols.length === cols.length) {\n        newRanges.push(range);\n        return;\n      }\n      if (this.rowPositionUtils.before(intersectionEndRow, startRow) || this.rowPositionUtils.before(endRow, intersectionStartRow)) {\n        newRanges.push(range);\n        return;\n      }\n      const rangeCountBefore = newRanges.length;\n      if (this.rowPositionUtils.before(startRow, intersectionStartRow)) {\n        const top = {\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: __spreadValues({}, startRow),\n          endRow: this.cellNavigationService.getRowAbove(intersectionStartRow)\n        };\n        newRanges.push(top);\n      }\n      if (intersectCols.length > 0) {\n        const middle = {\n          columns: intersectCols,\n          startColumn: import_core._.includes(intersectCols, lastRange.startColumn) ? lastRange.startColumn : intersectCols[0],\n          startRow: this.rowPositionUtils.rowMax([__spreadValues({}, intersectionStartRow), __spreadValues({}, startRow)]),\n          endRow: this.rowPositionUtils.rowMin([__spreadValues({}, intersectionEndRow), __spreadValues({}, endRow)])\n        };\n        newRanges.push(middle);\n      }\n      if (this.rowPositionUtils.before(intersectionEndRow, endRow)) {\n        newRanges.push({\n          columns: [...cols],\n          startColumn: lastRange.startColumn,\n          startRow: this.cellNavigationService.getRowBelow(intersectionEndRow),\n          endRow: __spreadValues({}, endRow)\n        });\n      }\n      if (newRanges.length - rangeCountBefore === 1) {\n        newRanges[newRanges.length - 1].id = range.id;\n      }\n    });\n    this.cellRanges = newRanges;\n    if (fromMouseClick) {\n      this.dispatchChangedEvent(false, true);\n    }\n  }\n  updateValuesOnMove(eventTarget) {\n    const cellCtrl = import_core._.getCtrlForEventTarget(this.gridOptionsService, eventTarget, import_core.CellCtrl.DOM_DATA_KEY_CELL_CTRL);\n    const cell = cellCtrl == null ? void 0 : cellCtrl.getCellPosition();\n    this.cellHasChanged = false;\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    if (this.lastCellHovered) {\n      this.cellHasChanged = true;\n    }\n    this.lastCellHovered = cell;\n  }\n  onDragging(mouseEvent) {\n    if (!this.dragging || !mouseEvent) {\n      return;\n    }\n    this.updateValuesOnMove(mouseEvent.target);\n    this.lastMouseEvent = mouseEvent;\n    const cellPosition = this.lastCellHovered;\n    const isMouseAndStartInPinned = (position) => cellPosition && cellPosition.rowPinned === position && this.newestRangeStartCell.rowPinned === position;\n    const skipVerticalScroll = isMouseAndStartInPinned(\"top\") || isMouseAndStartInPinned(\"bottom\");\n    this.autoScrollService.check(mouseEvent, skipVerticalScroll);\n    if (!this.cellHasChanged) {\n      return;\n    }\n    const columns = this.calculateColumnsBetween(this.newestRangeStartCell.column, cellPosition.column);\n    if (!columns) {\n      return;\n    }\n    this.draggingRange.endRow = {\n      rowIndex: cellPosition.rowIndex,\n      rowPinned: cellPosition.rowPinned\n    };\n    this.draggingRange.columns = columns;\n    this.dispatchChangedEvent(false, false, this.draggingRange.id);\n  }\n  onDragStop() {\n    if (!this.dragging) {\n      return;\n    }\n    const { id } = this.draggingRange;\n    this.autoScrollService.ensureCleared();\n    this.ctrlsService.getGridBodyCtrl().removeScrollEventListener(this.bodyScrollListener);\n    this.lastMouseEvent = null;\n    this.dragging = false;\n    this.draggingRange = void 0;\n    this.lastCellHovered = void 0;\n    if (this.intersectionRange) {\n      this.intersectionRange = false;\n      this.intersectLastRange();\n    }\n    this.dispatchChangedEvent(false, true, id);\n  }\n  dispatchChangedEvent(started, finished, id) {\n    const event = {\n      type: import_core.Events.EVENT_RANGE_SELECTION_CHANGED,\n      started,\n      finished,\n      id\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  calculateColumnsBetween(columnFrom, columnTo) {\n    const allColumns = this.columnModel.getAllDisplayedColumns();\n    const isSameColumn = columnFrom === columnTo;\n    const fromIndex = allColumns.indexOf(columnFrom);\n    if (fromIndex < 0) {\n      console.warn(`AG Grid: column ${columnFrom.getId()} is not visible`);\n      return;\n    }\n    const toIndex = isSameColumn ? fromIndex : allColumns.indexOf(columnTo);\n    if (toIndex < 0) {\n      console.warn(`AG Grid: column ${columnTo.getId()} is not visible`);\n      return;\n    }\n    if (isSameColumn) {\n      return [columnFrom];\n    }\n    const firstIndex = Math.min(fromIndex, toIndex);\n    const lastIndex = firstIndex === fromIndex ? toIndex : fromIndex;\n    const columns = [];\n    for (let i = firstIndex; i <= lastIndex; i++) {\n      columns.push(allColumns[i]);\n    }\n    return columns;\n  }\n};\n__decorateClass([\n  (0, import_core.Autowired)(\"rowModel\")\n], RangeService.prototype, \"rowModel\", 2);\n__decorateClass([\n  (0, import_core.Autowired)(\"dragService\")\n], RangeService.prototype, \"dragService\", 2);\n__decorateClass([\n  (0, import_core.Autowired)(\"columnModel\")\n], RangeService.prototype, \"columnModel\", 2);\n__decorateClass([\n  (0, import_core.Autowired)(\"cellNavigationService\")\n], RangeService.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  (0, import_core.Autowired)(\"pinnedRowModel\")\n], RangeService.prototype, \"pinnedRowModel\", 2);\n__decorateClass([\n  (0, import_core.Autowired)(\"rowPositionUtils\")\n], RangeService.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  (0, import_core.Autowired)(\"cellPositionUtils\")\n], RangeService.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  (0, import_core.Autowired)(\"ctrlsService\")\n], RangeService.prototype, \"ctrlsService\", 2);\n__decorateClass([\n  import_core.PostConstruct\n], RangeService.prototype, \"init\", 1);\nRangeService = __decorateClass([\n  (0, import_core.Bean)(\"rangeService\")\n], RangeService);\n\n// enterprise-modules/range-selection/src/rangeSelection/fillHandle.ts\nvar import_core3 = require(\"@ag-grid-community/core\");\n\n// enterprise-modules/range-selection/src/rangeSelection/abstractSelectionHandle.ts\nvar import_core2 = require(\"@ag-grid-community/core\");\nvar AbstractSelectionHandle = class extends import_core2.Component {\n  constructor() {\n    super(...arguments);\n    this.changedCalculatedValues = false;\n    this.dragging = false;\n    this.shouldDestroyOnEndDragging = false;\n  }\n  init() {\n    this.dragService.addDragSource({\n      dragStartPixels: 0,\n      eElement: this.getGui(),\n      onDragStart: this.onDragStart.bind(this),\n      onDragging: (e) => {\n        this.dragging = true;\n        this.rangeService.autoScrollService.check(e);\n        if (this.changedCalculatedValues) {\n          this.onDrag(e);\n          this.changedCalculatedValues = false;\n        }\n      },\n      onDragStop: (e) => {\n        this.dragging = false;\n        this.onDragEnd(e);\n        this.clearValues();\n        this.rangeService.autoScrollService.ensureCleared();\n        document.body.classList.remove(this.getDraggingCssClass());\n        if (this.shouldDestroyOnEndDragging) {\n          this.destroy();\n        }\n      }\n    });\n    this.addManagedListener(\n      this.getGui(),\n      \"mousedown\",\n      this.preventRangeExtension.bind(this)\n    );\n  }\n  isDragging() {\n    return this.dragging;\n  }\n  getCellCtrl() {\n    return this.cellCtrl;\n  }\n  setCellCtrl(cellComp) {\n    this.cellCtrl = cellComp;\n  }\n  getCellRange() {\n    return this.cellRange;\n  }\n  setCellRange(range) {\n    this.cellRange = range;\n  }\n  getRangeStartRow() {\n    return this.rangeStartRow;\n  }\n  setRangeStartRow(row) {\n    this.rangeStartRow = row;\n  }\n  getRangeEndRow() {\n    return this.rangeEndRow;\n  }\n  setRangeEndRow(row) {\n    this.rangeEndRow = row;\n  }\n  getLastCellHovered() {\n    return this.lastCellHovered;\n  }\n  preventRangeExtension(e) {\n    e.stopPropagation();\n  }\n  onDragStart(e) {\n    this.cellHoverListener = this.addManagedListener(\n      this.ctrlsService.getGridCtrl().getGui(),\n      \"mousemove\",\n      this.updateValuesOnMove.bind(this)\n    );\n    document.body.classList.add(this.getDraggingCssClass());\n  }\n  getDraggingCssClass() {\n    return `ag-dragging-${this.type === import_core2.SelectionHandleType.FILL ? \"fill\" : \"range\"}-handle`;\n  }\n  updateValuesOnMove(e) {\n    const cell = this.mouseEventService.getCellPositionForEvent(e);\n    if (!cell || this.lastCellHovered && this.cellPositionUtils.equals(cell, this.lastCellHovered)) {\n      return;\n    }\n    this.lastCellHovered = cell;\n    this.changedCalculatedValues = true;\n  }\n  getType() {\n    return this.type;\n  }\n  refresh(cellCtrl) {\n    const oldCellComp = this.getCellCtrl();\n    const eGui = this.getGui();\n    const cellRange = import_core2._.last(this.rangeService.getCellRanges());\n    const start = cellRange.startRow;\n    const end = cellRange.endRow;\n    if (start && end) {\n      const isBefore = this.rowPositionUtils.before(end, start);\n      if (isBefore) {\n        this.setRangeStartRow(end);\n        this.setRangeEndRow(start);\n      } else {\n        this.setRangeStartRow(start);\n        this.setRangeEndRow(end);\n      }\n    }\n    if (oldCellComp !== cellCtrl || !import_core2._.isVisible(eGui)) {\n      this.setCellCtrl(cellCtrl);\n      const eParentOfValue = cellCtrl.getComp().getParentOfValue();\n      if (eParentOfValue) {\n        eParentOfValue.appendChild(eGui);\n      }\n    }\n    this.setCellRange(cellRange);\n  }\n  clearValues() {\n    this.lastCellHovered = void 0;\n    this.removeListeners();\n  }\n  removeListeners() {\n    if (this.cellHoverListener) {\n      this.cellHoverListener();\n      this.cellHoverListener = void 0;\n    }\n  }\n  destroy() {\n    if (!this.shouldDestroyOnEndDragging && this.isDragging()) {\n      import_core2._.setDisplayed(this.getGui(), false);\n      this.shouldDestroyOnEndDragging = true;\n      return;\n    }\n    this.shouldDestroyOnEndDragging = false;\n    super.destroy();\n    this.removeListeners();\n    const eGui = this.getGui();\n    if (eGui.parentElement) {\n      eGui.parentElement.removeChild(eGui);\n    }\n  }\n};\n__decorateClass([\n  (0, import_core2.Autowired)(\"rowRenderer\")\n], AbstractSelectionHandle.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"dragService\")\n], AbstractSelectionHandle.prototype, \"dragService\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"rangeService\")\n], AbstractSelectionHandle.prototype, \"rangeService\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"mouseEventService\")\n], AbstractSelectionHandle.prototype, \"mouseEventService\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"columnModel\")\n], AbstractSelectionHandle.prototype, \"columnModel\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"cellNavigationService\")\n], AbstractSelectionHandle.prototype, \"cellNavigationService\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"navigationService\")\n], AbstractSelectionHandle.prototype, \"navigationService\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"rowPositionUtils\")\n], AbstractSelectionHandle.prototype, \"rowPositionUtils\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"cellPositionUtils\")\n], AbstractSelectionHandle.prototype, \"cellPositionUtils\", 2);\n__decorateClass([\n  (0, import_core2.Autowired)(\"ctrlsService\")\n], AbstractSelectionHandle.prototype, \"ctrlsService\", 2);\n__decorateClass([\n  import_core2.PostConstruct\n], AbstractSelectionHandle.prototype, \"init\", 1);\n\n// enterprise-modules/range-selection/src/rangeSelection/utils.ts\nfunction findLineByLeastSquares(values) {\n  const len = values.length;\n  let maxDecimals = 0;\n  if (len <= 1) {\n    return values;\n  }\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n    const splitExponent = value.toString().split(\"e-\");\n    if (splitExponent.length > 1) {\n      maxDecimals = Math.max(maxDecimals, parseInt(splitExponent[1], 10));\n      continue;\n    }\n    if (Math.floor(value) === value) {\n      continue;\n    }\n    maxDecimals = Math.max(maxDecimals, value.toString().split(\".\")[1].length);\n  }\n  let sum_x = 0;\n  let sum_y = 0;\n  let sum_xy = 0;\n  let sum_xx = 0;\n  let y = 0;\n  for (let x = 0; x < len; x++) {\n    y = values[x];\n    sum_x += x;\n    sum_y += y;\n    sum_xx += x * x;\n    sum_xy += x * y;\n  }\n  const m = (len * sum_xy - sum_x * sum_y) / (len * sum_xx - sum_x * sum_x);\n  const b = sum_y / len - m * sum_x / len;\n  const result = [];\n  for (let x = 0; x <= len; x++) {\n    result.push(parseFloat((x * m + b).toFixed(maxDecimals)));\n  }\n  return result;\n}\n\n// enterprise-modules/range-selection/src/rangeSelection/fillHandle.ts\nvar _FillHandle = class _FillHandle extends AbstractSelectionHandle {\n  constructor() {\n    super(_FillHandle.TEMPLATE);\n    this.markedCells = [];\n    this.cellValues = [];\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n    this.type = import_core3.SelectionHandleType.FILL;\n  }\n  updateValuesOnMove(e) {\n    super.updateValuesOnMove(e);\n    if (!this.initialXY) {\n      this.initialXY = this.mouseEventService.getNormalisedPosition(e);\n    }\n    const { x, y } = this.initialXY;\n    const { x: newX, y: newY } = this.mouseEventService.getNormalisedPosition(e);\n    const diffX = Math.abs(x - newX);\n    const diffY = Math.abs(y - newY);\n    const allowedDirection = this.getFillHandleDirection();\n    let direction;\n    if (allowedDirection === \"xy\") {\n      direction = diffX > diffY ? \"x\" : \"y\";\n    } else {\n      direction = allowedDirection;\n    }\n    if (direction !== this.dragAxis) {\n      this.dragAxis = direction;\n      this.changedCalculatedValues = true;\n    }\n  }\n  onDrag(e) {\n    if (!this.initialPosition) {\n      const cellCtrl = this.getCellCtrl();\n      if (!cellCtrl) {\n        return;\n      }\n      this.initialPosition = cellCtrl.getCellPosition();\n    }\n    const lastCellHovered = this.getLastCellHovered();\n    if (lastCellHovered) {\n      this.markPathFrom(this.initialPosition, lastCellHovered);\n    }\n  }\n  onDragEnd(e) {\n    this.initialXY = null;\n    if (!this.markedCells.length) {\n      return;\n    }\n    const isX = this.dragAxis === \"x\";\n    const initialRange = this.getCellRange();\n    const colLen = initialRange.columns.length;\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    let finalRange;\n    if (!this.isUp && !this.isLeft) {\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: rangeStartRow.rowIndex,\n        rowStartPinned: rangeStartRow.rowPinned,\n        columnStart: initialRange.columns[0],\n        rowEndIndex: isX ? rangeEndRow.rowIndex : this.lastCellMarked.rowIndex,\n        rowEndPinned: isX ? rangeEndRow.rowPinned : this.lastCellMarked.rowPinned,\n        columnEnd: isX ? this.lastCellMarked.column : initialRange.columns[colLen - 1]\n      });\n    } else {\n      const startRow = isX ? rangeStartRow : this.lastCellMarked;\n      finalRange = this.rangeService.createCellRangeFromCellRangeParams({\n        rowStartIndex: startRow.rowIndex,\n        rowStartPinned: startRow.rowPinned,\n        columnStart: isX ? this.lastCellMarked.column : initialRange.columns[0],\n        rowEndIndex: rangeEndRow.rowIndex,\n        rowEndPinned: rangeEndRow.rowPinned,\n        columnEnd: initialRange.columns[colLen - 1]\n      });\n    }\n    if (finalRange) {\n      this.raiseFillStartEvent();\n      this.handleValueChanged(initialRange, finalRange, e);\n      this.rangeService.setCellRanges([finalRange]);\n      this.raiseFillEndEvent(initialRange, finalRange);\n    }\n  }\n  getFillHandleDirection() {\n    const direction = this.gridOptionsService.get(\"fillHandleDirection\");\n    if (!direction) {\n      return \"xy\";\n    }\n    if (direction !== \"x\" && direction !== \"y\" && direction !== \"xy\") {\n      import_core3._.warnOnce(`valid values for fillHandleDirection are 'x', 'y' and 'xy'. Default to 'xy'.`);\n      return \"xy\";\n    }\n    return direction;\n  }\n  raiseFillStartEvent() {\n    const fillStartEvent = {\n      type: import_core3.Events.EVENT_FILL_START\n    };\n    this.eventService.dispatchEvent(fillStartEvent);\n  }\n  raiseFillEndEvent(initialRange, finalRange) {\n    const fillEndEvent = {\n      type: import_core3.Events.EVENT_FILL_END,\n      initialRange,\n      finalRange\n    };\n    this.eventService.dispatchEvent(fillEndEvent);\n  }\n  handleValueChanged(initialRange, finalRange, e) {\n    const initialRangeEndRow = this.rangeService.getRangeEndRow(initialRange);\n    const initialRangeStartRow = this.rangeService.getRangeStartRow(initialRange);\n    const finalRangeEndRow = this.rangeService.getRangeEndRow(finalRange);\n    const finalRangeStartRow = this.rangeService.getRangeStartRow(finalRange);\n    const isVertical = this.dragAxis === \"y\";\n    if (this.isReduce && !this.gridOptionsService.get(\"suppressClearOnFillReduction\")) {\n      const columns = isVertical ? initialRange.columns : initialRange.columns.filter((col) => finalRange.columns.indexOf(col) < 0);\n      const startRow = isVertical ? this.cellNavigationService.getRowBelow(finalRangeEndRow) : finalRangeStartRow;\n      if (startRow) {\n        this.clearCellsInRange(startRow, initialRangeEndRow, columns);\n      }\n      return;\n    }\n    const values = [];\n    const initialValues = [];\n    const initialNonAggregatedValues = [];\n    const initialFormattedValues = [];\n    let withinInitialRange = true;\n    let idx = 0;\n    const resetValues = () => {\n      values.length = 0;\n      initialValues.length = 0;\n      initialNonAggregatedValues.length = 0;\n      initialFormattedValues.length = 0;\n      idx = 0;\n    };\n    const iterateAcrossCells = (column, columns) => {\n      let currentRow = this.isUp ? initialRangeEndRow : initialRangeStartRow;\n      let finished = false;\n      if (isVertical) {\n        withinInitialRange = true;\n        resetValues();\n      }\n      while (!finished && currentRow) {\n        const rowNode = this.rowPositionUtils.getRowNode(currentRow);\n        if (!rowNode) {\n          break;\n        }\n        if (isVertical && column) {\n          fillValues(values, column, rowNode, () => {\n            return !this.rowPositionUtils.sameRow(currentRow, this.isUp ? initialRangeStartRow : initialRangeEndRow);\n          });\n        } else if (columns) {\n          withinInitialRange = true;\n          resetValues();\n          columns.forEach((col) => fillValues(\n            values,\n            col,\n            rowNode,\n            () => col !== (this.isLeft ? initialRange.columns[0] : import_core3._.last(initialRange.columns))\n          ));\n        }\n        finished = this.rowPositionUtils.sameRow(currentRow, this.isUp ? finalRangeStartRow : finalRangeEndRow);\n        currentRow = this.isUp ? this.cellNavigationService.getRowAbove(currentRow) : this.cellNavigationService.getRowBelow(currentRow);\n      }\n    };\n    const fillValues = (currentValues, col, rowNode, updateInitialSet) => {\n      var _a, _b;\n      let currentValue;\n      let skipValue = false;\n      if (withinInitialRange) {\n        currentValue = this.valueService.getValue(col, rowNode);\n        initialValues.push(currentValue);\n        initialNonAggregatedValues.push(this.valueService.getValue(col, rowNode, void 0, true));\n        initialFormattedValues.push(this.valueFormatterService.formatValue(col, rowNode, currentValue));\n        withinInitialRange = updateInitialSet();\n      } else {\n        const { value, fromUserFunction, sourceCol, sourceRowNode } = this.processValues({\n          event: e,\n          values: currentValues,\n          initialValues,\n          initialNonAggregatedValues,\n          initialFormattedValues,\n          col,\n          rowNode,\n          idx: idx++\n        });\n        currentValue = value;\n        if (col.isCellEditable(rowNode)) {\n          const cellValue = this.valueService.getValue(col, rowNode);\n          if (!fromUserFunction) {\n            if (sourceCol && ((_a = sourceCol.getColDef()) == null ? void 0 : _a.useValueFormatterForExport) !== false) {\n              currentValue = (_b = this.valueFormatterService.formatValue(sourceCol, sourceRowNode, currentValue)) != null ? _b : currentValue;\n            }\n            if (col.getColDef().useValueParserForImport !== false) {\n              currentValue = this.valueParserService.parseValue(\n                col,\n                rowNode,\n                // if no sourceCol, then currentValue is a number\n                sourceCol ? currentValue : import_core3._.toStringOrNull(currentValue),\n                cellValue\n              );\n            }\n          }\n          if (!fromUserFunction || cellValue !== currentValue) {\n            rowNode.setDataValue(col, currentValue, \"rangeService\");\n          } else {\n            skipValue = true;\n          }\n        }\n      }\n      if (!skipValue) {\n        currentValues.push({\n          value: currentValue,\n          column: col,\n          rowNode\n        });\n      }\n    };\n    if (isVertical) {\n      initialRange.columns.forEach((col) => {\n        iterateAcrossCells(col);\n      });\n    } else {\n      const columns = this.isLeft ? [...finalRange.columns].reverse() : finalRange.columns;\n      iterateAcrossCells(void 0, columns);\n    }\n  }\n  clearCellsInRange(startRow, endRow, columns) {\n    const cellRange = {\n      startRow,\n      endRow,\n      columns,\n      startColumn: columns[0]\n    };\n    this.rangeService.clearCellRangeCellValues({ cellRanges: [cellRange] });\n  }\n  processValues(params) {\n    const { event, values, initialValues, initialNonAggregatedValues, initialFormattedValues, col, rowNode, idx } = params;\n    const userFillOperation = this.gridOptionsService.getCallback(\"fillOperation\");\n    const isVertical = this.dragAxis === \"y\";\n    let direction;\n    if (isVertical) {\n      direction = this.isUp ? \"up\" : \"down\";\n    } else {\n      direction = this.isLeft ? \"left\" : \"right\";\n    }\n    if (userFillOperation) {\n      const params2 = {\n        event,\n        values: values.map(({ value }) => value),\n        initialValues,\n        initialNonAggregatedValues,\n        initialFormattedValues,\n        currentIndex: idx,\n        currentCellValue: this.valueService.getValue(col, rowNode),\n        direction,\n        column: col,\n        rowNode\n      };\n      const userResult = userFillOperation(params2);\n      if (userResult !== false) {\n        return { value: userResult, fromUserFunction: true };\n      }\n    }\n    const allNumbers = !values.some(({ value }) => {\n      const asFloat = parseFloat(value);\n      return isNaN(asFloat) || asFloat.toString() !== value.toString();\n    });\n    if (event.altKey || !allNumbers) {\n      if (allNumbers && initialValues.length === 1) {\n        const multiplier = this.isUp || this.isLeft ? -1 : 1;\n        return { value: parseFloat(import_core3._.last(values).value) + 1 * multiplier, fromUserFunction: false };\n      }\n      const { value, column: sourceCol, rowNode: sourceRowNode } = values[idx % values.length];\n      return { value, fromUserFunction: false, sourceCol, sourceRowNode };\n    }\n    return { value: import_core3._.last(findLineByLeastSquares(values.map(({ value }) => Number(value)))), fromUserFunction: false };\n  }\n  clearValues() {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    this.lastCellMarked = void 0;\n    super.clearValues();\n  }\n  clearMarkedPath() {\n    this.markedCells.forEach((cell) => {\n      if (!cell.isAlive()) {\n        return;\n      }\n      const comp = cell.getComp();\n      comp.addOrRemoveCssClass(\"ag-selection-fill-top\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-right\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-bottom\", false);\n      comp.addOrRemoveCssClass(\"ag-selection-fill-left\", false);\n    });\n    this.markedCells.length = 0;\n    this.isUp = false;\n    this.isLeft = false;\n    this.isReduce = false;\n  }\n  clearCellValues() {\n    this.cellValues.length = 0;\n  }\n  markPathFrom(initialPosition, currentPosition) {\n    this.clearMarkedPath();\n    this.clearCellValues();\n    if (this.dragAxis === \"y\") {\n      if (this.rowPositionUtils.sameRow(currentPosition, initialPosition)) {\n        return;\n      }\n      const isBefore = this.rowPositionUtils.before(currentPosition, initialPosition);\n      const rangeStartRow = this.getRangeStartRow();\n      const rangeEndRow = this.getRangeEndRow();\n      if (isBefore && (currentPosition.rowPinned == rangeStartRow.rowPinned && currentPosition.rowIndex >= rangeStartRow.rowIndex || rangeStartRow.rowPinned != rangeEndRow.rowPinned && currentPosition.rowPinned == rangeEndRow.rowPinned && currentPosition.rowIndex <= rangeEndRow.rowIndex)) {\n        this.reduceVertical(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendVertical(initialPosition, currentPosition, isBefore);\n        this.isReduce = false;\n      }\n    } else {\n      const initialColumn = initialPosition.column;\n      const currentColumn = currentPosition.column;\n      if (initialColumn === currentColumn) {\n        return;\n      }\n      const displayedColumns = this.columnModel.getAllDisplayedColumns();\n      const initialIndex = displayedColumns.indexOf(initialColumn);\n      const currentIndex = displayedColumns.indexOf(currentColumn);\n      if (currentIndex <= initialIndex && currentIndex >= displayedColumns.indexOf(this.getCellRange().columns[0])) {\n        this.reduceHorizontal(initialPosition, currentPosition);\n        this.isReduce = true;\n      } else {\n        this.extendHorizontal(initialPosition, currentPosition, currentIndex < initialIndex);\n        this.isReduce = false;\n      }\n    }\n    this.lastCellMarked = currentPosition;\n  }\n  extendVertical(initialPosition, endPosition, isMovingUp) {\n    const { navigationService, rangeService } = this;\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      for (let i = 0; i < colLen; i++) {\n        const column = cellRange.columns[i];\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const cellPos = __spreadProps(__spreadValues({}, rowPos), { column });\n        const cellInRange = rangeService.isCellInSpecificRange(cellPos, cellRange);\n        const isInitialRow = this.rowPositionUtils.sameRow(row, initialPosition);\n        if (isMovingUp) {\n          this.isUp = true;\n        }\n        if (!isInitialRow) {\n          const cell = navigationService.getCellByPosition(cellPos);\n          if (cell) {\n            this.markedCells.push(cell);\n            const cellCtrl = cell.getComp();\n            if (!cellInRange) {\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-left\", i === 0);\n              cellCtrl.addOrRemoveCssClass(\"ag-selection-fill-right\", i === colLen - 1);\n            }\n            cellCtrl.addOrRemoveCssClass(\n              isMovingUp ? \"ag-selection-fill-top\" : \"ag-selection-fill-bottom\",\n              this.rowPositionUtils.sameRow(row, endPosition)\n            );\n          }\n        }\n      }\n      if (this.rowPositionUtils.sameRow(row, endPosition)) {\n        break;\n      }\n    } while (\n      // tslint:disable-next-line\n      row = isMovingUp ? this.cellNavigationService.getRowAbove(row) : this.cellNavigationService.getRowBelow(row)\n    );\n  }\n  reduceVertical(initialPosition, endPosition) {\n    let row = initialPosition;\n    do {\n      const cellRange = this.getCellRange();\n      const colLen = cellRange.columns.length;\n      const isLastRow = this.rowPositionUtils.sameRow(row, endPosition);\n      for (let i = 0; i < colLen; i++) {\n        const rowPos = { rowIndex: row.rowIndex, rowPinned: row.rowPinned };\n        const celPos = __spreadProps(__spreadValues({}, rowPos), { column: cellRange.columns[i] });\n        const cell = this.navigationService.getCellByPosition(celPos);\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\n            \"ag-selection-fill-bottom\",\n            this.rowPositionUtils.sameRow(row, endPosition)\n          );\n        }\n      }\n      if (isLastRow) {\n        break;\n      }\n    } while (row = this.cellNavigationService.getRowAbove(row));\n  }\n  extendHorizontal(initialPosition, endPosition, isMovingLeft) {\n    const allCols = this.columnModel.getAllDisplayedColumns();\n    const startCol = allCols.indexOf(isMovingLeft ? endPosition.column : initialPosition.column);\n    const endCol = allCols.indexOf(isMovingLeft ? this.getCellRange().columns[0] : endPosition.column);\n    const offset = isMovingLeft ? 0 : 1;\n    const colsToMark = allCols.slice(startCol + offset, endCol + offset);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-top\", this.rowPositionUtils.sameRow(row, rangeStartRow));\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-bottom\", this.rowPositionUtils.sameRow(row, rangeEndRow));\n          if (isMovingLeft) {\n            this.isLeft = true;\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-left\", column === colsToMark[0]);\n          } else {\n            cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === import_core3._.last(colsToMark));\n          }\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  reduceHorizontal(initialPosition, endPosition) {\n    const allCols = this.columnModel.getAllDisplayedColumns();\n    const startCol = allCols.indexOf(endPosition.column);\n    const endCol = allCols.indexOf(initialPosition.column);\n    const colsToMark = allCols.slice(startCol, endCol);\n    const rangeStartRow = this.getRangeStartRow();\n    const rangeEndRow = this.getRangeEndRow();\n    colsToMark.forEach((column) => {\n      let row = rangeStartRow;\n      let isLastRow = false;\n      do {\n        isLastRow = this.rowPositionUtils.sameRow(row, rangeEndRow);\n        const cell = this.navigationService.getCellByPosition({\n          rowIndex: row.rowIndex,\n          rowPinned: row.rowPinned,\n          column\n        });\n        if (cell) {\n          this.markedCells.push(cell);\n          const cellComp = cell.getComp();\n          cellComp.addOrRemoveCssClass(\"ag-selection-fill-right\", column === colsToMark[0]);\n        }\n        row = this.cellNavigationService.getRowBelow(row);\n      } while (!isLastRow);\n    });\n  }\n  refresh(cellCtrl) {\n    const cellRange = this.rangeService.getCellRanges()[0];\n    const isColumnRange = !cellRange.startRow || !cellRange.endRow;\n    if (isColumnRange) {\n      this.destroy();\n      return;\n    }\n    super.refresh(cellCtrl);\n  }\n};\n_FillHandle.TEMPLATE = /* html */\n`<div class=\"ag-fill-handle\"></div>`;\n__decorateClass([\n  (0, import_core3.Autowired)(\"valueService\")\n], _FillHandle.prototype, \"valueService\", 2);\n__decorateClass([\n  (0, import_core3.Autowired)(\"valueParserService\")\n], _FillHandle.prototype, \"valueParserService\", 2);\n__decorateClass([\n  (0, import_core3.Autowired)(\"valueFormatterService\")\n], _FillHandle.prototype, \"valueFormatterService\", 2);\nvar FillHandle = _FillHandle;\n\n// enterprise-modules/range-selection/src/rangeSelection/rangeHandle.ts\nvar import_core4 = require(\"@ag-grid-community/core\");\nvar _RangeHandle = class _RangeHandle extends AbstractSelectionHandle {\n  constructor() {\n    super(_RangeHandle.TEMPLATE);\n    this.type = import_core4.SelectionHandleType.RANGE;\n    this.rangeFixed = false;\n  }\n  onDrag(e) {\n    const lastCellHovered = this.getLastCellHovered();\n    if (!lastCellHovered) {\n      return;\n    }\n    const cellRanges = this.rangeService.getCellRanges();\n    const lastRange = import_core4._.last(cellRanges);\n    if (!this.rangeFixed) {\n      this.fixRangeStartEnd(lastRange);\n      this.rangeFixed = true;\n    }\n    this.endPosition = {\n      rowIndex: lastCellHovered.rowIndex,\n      rowPinned: lastCellHovered.rowPinned,\n      column: lastCellHovered.column\n    };\n    if (cellRanges.length === 2 && cellRanges[0].type === import_core4.CellRangeType.DIMENSION && lastRange.type === import_core4.CellRangeType.VALUE) {\n      const rowChanged = !this.rowPositionUtils.sameRow(this.endPosition, this.rangeService.getRangeEndRow(lastRange));\n      if (rowChanged) {\n        this.rangeService.updateRangeEnd(\n          cellRanges[0],\n          __spreadProps(__spreadValues({}, this.endPosition), {\n            column: cellRanges[0].columns[0]\n          }),\n          true\n        );\n      }\n    }\n    this.rangeService.extendLatestRangeToCell(this.endPosition);\n  }\n  onDragEnd(e) {\n    const cellRange = import_core4._.last(this.rangeService.getCellRanges());\n    this.fixRangeStartEnd(cellRange);\n    this.rangeFixed = false;\n  }\n  fixRangeStartEnd(cellRange) {\n    const startRow = this.rangeService.getRangeStartRow(cellRange);\n    const endRow = this.rangeService.getRangeEndRow(cellRange);\n    const column = cellRange.columns[0];\n    cellRange.startRow = startRow;\n    cellRange.endRow = endRow;\n    cellRange.startColumn = column;\n  }\n};\n_RangeHandle.TEMPLATE = /* html */\n`<div class=\"ag-range-handle\"></div>`;\nvar RangeHandle = _RangeHandle;\n\n// enterprise-modules/range-selection/src/rangeSelection/selectionHandleFactory.ts\nvar import_core5 = require(\"@ag-grid-community/core\");\nvar SelectionHandleFactory = class extends import_core5.BeanStub {\n  createSelectionHandle(type) {\n    return this.createBean(type === import_core5.SelectionHandleType.RANGE ? new RangeHandle() : new FillHandle());\n  }\n};\nSelectionHandleFactory = __decorateClass([\n  (0, import_core5.Bean)(\"selectionHandleFactory\")\n], SelectionHandleFactory);\n\n// enterprise-modules/range-selection/src/version.ts\nvar VERSION = \"31.2.1\";\n\n// enterprise-modules/range-selection/src/rangeSelectionModule.ts\nvar RangeSelectionModule = {\n  version: VERSION,\n  moduleName: import_core6.ModuleNames.RangeSelectionModule,\n  beans: [RangeService, SelectionHandleFactory],\n  agStackComponents: [\n    { componentName: \"AgFillHandle\", componentClass: FillHandle },\n    { componentName: \"AgRangeHandle\", componentClass: RangeHandle }\n  ],\n  dependantModules: [\n    import_core7.EnterpriseCoreModule\n  ]\n};\n"],
  "mappings": "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",
  "names": ["obj", "key", "value", "a", "b", "prop", "target", "all", "name", "to", "from", "except", "desc", "mod", "decorators", "kind", "result", "i", "decorator", "gridBodyCtrl", "position", "allColumns", "cellRange", "beforeCols", "col", "countBefore", "range", "lastRange", "rangeColumns", "allPositions", "c", "pinnedBottomRowCount", "cell", "appendRange", "columns", "rowForCell", "cellPosition", "silent", "endColumn", "colsToAdd", "startColumn", "moveColInCellRange", "colToMove", "moveToFront", "otherCols", "left", "right", "allIndices", "event", "ctrlKey", "startCell", "firstCol", "lastCol", "endCellIndex", "endCellFloating", "endCell", "newEndCell", "params", "cellRanges", "newRange", "cellEventSource", "dispatchWrapperEvents", "wrapperEventSource", "startEvent", "rowPosition", "rowNode", "column", "endEvent", "startsOnTheRight", "columnStart", "columnEnd", "startRow", "endRow", "len", "rowToColumnMap", "row", "rowName", "currentRangeColIds", "filteredColumns", "columnsString", "val", "currentValString", "callback", "topRow", "bottomRow", "currentRow", "columnInRange", "rowInRange", "lastRow", "isLastRow", "rangeFirstIndexColumn", "rangeLastIndexColumn", "lastRangeColumn", "isRightColumn", "rowIndex", "floating", "firstRow", "thisRow", "equalsFirstRow", "equalsLastRow", "afterFirstRow", "beforeLastRow", "mouseEvent", "metaKey", "shiftKey", "isMultiKey", "isMultiSelect", "extendRange", "startTarget", "mouseRowPosition", "fromMouseClick", "intersectionStartRow", "intersectionEndRow", "newRanges", "cols", "intersectCols", "rangeCountBefore", "top", "middle", "eventTarget", "cellCtrl", "isMouseAndStartInPinned", "skipVerticalScroll", "id", "started", "finished", "columnFrom", "columnTo", "isSameColumn", "fromIndex", "toIndex", "firstIndex", "lastIndex", "e", "cellComp", "oldCellComp", "eGui", "start", "end", "eParentOfValue", "values", "maxDecimals", "splitExponent", "sum_x", "sum_y", "sum_xy", "sum_xx", "y", "x", "m", "_FillHandle", "newX", "newY", "diffX", "diffY", "allowedDirection", "direction", "lastCellHovered", "isX", "initialRange", "colLen", "rangeStartRow", "rangeEndRow", "finalRange", "fillStartEvent", "fillEndEvent", "initialRangeEndRow", "initialRangeStartRow", "finalRangeEndRow", "finalRangeStartRow", "isVertical", "initialValues", "initialNonAggregatedValues", "initialFormattedValues", "withinInitialRange", "idx", "resetValues", "iterateAcrossCells", "fillValues", "currentValues", "updateInitialSet", "_a", "_b", "currentValue", "skipValue", "fromUserFunction", "sourceCol", "sourceRowNode", "cellValue", "userFillOperation", "params2", "userResult", "allNumbers", "asFloat", "multiplier", "comp", "initialPosition", "currentPosition", "isBefore", "initialColumn", "currentColumn", "displayedColumns", "initialIndex", "currentIndex", "endPosition", "isMovingUp", "navigationService", "rangeService", "rowPos", "cellPos", "cellInRange", "isInitialRow", "celPos", "isMovingLeft", "allCols", "startCol", "endCol", "offset", "colsToMark", "_RangeHandle", "type"]
}
