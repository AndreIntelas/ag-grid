var l=Object.defineProperty,p=Object.getOwnPropertyDescriptor,w=(e,t,o,s)=>{for(var i=s>1?void 0:s?p(t,o):t,n=e.length-1,a;n>=0;n--)(a=e[n])&&(i=(s?a(t,o,i):a(i))||i);return s&&i&&l(t,o,i),i};import{ModuleNames as g}from"@ag-grid-community/core";import{EnterpriseCoreModule as v}from"@ag-grid-enterprise/core";var N="31.2.1";import{_ as u,Autowired as c,Bean as y,BeanStub as D,Events as h,PostConstruct as x,PreDestroy as I,RowNode as S}from"@ag-grid-community/core";var r=class extends D{constructor(){super(...arguments),this.firstRow=-1,this.lastRow=-1,this.rowCount=-1,this.rowNodesByIndex={}}ensureRowHeightsValid(e,t,o,s){return!1}init(){this.rowHeight=this.gridOptionsService.getRowHeightAsNumber(),this.addManagedListener(this.eventService,h.EVENT_VIEWPORT_CHANGED,this.onViewportChanged.bind(this)),this.addManagedPropertyListener("viewportDatasource",()=>this.updateDatasource()),this.addManagedPropertyListener("rowHeight",()=>{this.rowHeight=this.gridOptionsService.getRowHeightAsNumber(),this.updateRowHeights()})}start(){this.updateDatasource()}isLastRowIndexKnown(){return!0}destroyDatasource(){this.viewportDatasource&&(this.viewportDatasource.destroy&&this.viewportDatasource.destroy(),this.rowRenderer.datasourceChanged(),this.firstRow=-1,this.lastRow=-1)}updateDatasource(){const e=this.gridOptionsService.get("viewportDatasource");e&&this.setViewportDatasource(e)}getViewportRowModelPageSize(){return this.gridOptionsService.get("viewportRowModelPageSize")}getViewportRowModelBufferSize(){return this.gridOptionsService.get("viewportRowModelBufferSize")}calculateFirstRow(e){const t=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),s=e-t;return s<0?0:Math.floor(s/o)*o}calculateLastRow(e){if(e===-1)return e;const t=this.getViewportRowModelBufferSize(),o=this.getViewportRowModelPageSize(),s=e+t,i=Math.ceil(s/o)*o,n=this.rowCount-1;return Math.min(i,n)}onViewportChanged(e){const t=this.calculateFirstRow(e.firstRow),o=this.calculateLastRow(e.lastRow);(this.firstRow!==t||this.lastRow!==o)&&(this.firstRow=t,this.lastRow=o,this.purgeRowsNotInViewport(),this.viewportDatasource&&this.viewportDatasource.setViewportRange(this.firstRow,this.lastRow))}purgeRowsNotInViewport(){Object.keys(this.rowNodesByIndex).forEach(e=>{const t=parseInt(e,10);if(t<this.firstRow||t>this.lastRow){if(this.isRowFocused(t))return;delete this.rowNodesByIndex[t]}})}isRowFocused(e){const t=this.focusService.getFocusCellToUseAfterRefresh();return!t||t.rowPinned!=null?!1:t.rowIndex===e}setViewportDatasource(e){this.destroyDatasource(),this.viewportDatasource=e,this.rowCount=-1,e.init?e.init({setRowCount:this.setRowCount.bind(this),setRowData:this.setRowData.bind(this),getRow:this.getRow.bind(this)}):console.warn("AG Grid: viewport is missing init method.")}getType(){return"viewport"}getRow(e){return this.rowNodesByIndex[e]||(this.rowNodesByIndex[e]=this.createBlankRowNode(e)),this.rowNodesByIndex[e]}getRowNode(e){let t;return this.forEachNode(o=>{o.id===e&&(t=o)}),t}getRowCount(){return this.rowCount===-1?0:this.rowCount}getRowIndexAtPixel(e){return this.rowHeight!==0?Math.floor(e/this.rowHeight):0}getRowBounds(e){return{rowHeight:this.rowHeight,rowTop:this.rowHeight*e}}updateRowHeights(){this.forEachNode(t=>{t.setRowHeight(this.rowHeight),t.setRowTop(this.rowHeight*t.rowIndex)});const e={type:h.EVENT_MODEL_UPDATED,newData:!1,newPage:!1,keepRenderedRows:!0,animate:!1};this.eventService.dispatchEvent(e)}getTopLevelRowCount(){return this.getRowCount()}getTopLevelRowDisplayedIndex(e){return e}isEmpty(){return this.rowCount>0}isRowsToRender(){return this.rowCount>0}getNodesInRangeForSelection(e,t){const o=u.missing(e)?0:e.rowIndex,s=t.rowIndex,i=o<this.firstRow||o>this.lastRow,n=s<this.firstRow||s>this.lastRow;if(i||n)return[];const a=[],R=o<=s?o:s,f=o<=s?s:o;for(let d=R;d<=f;d++)a.push(this.rowNodesByIndex[d]);return a}forEachNode(e){let t=0;Object.keys(this.rowNodesByIndex).forEach(o=>{const s=parseInt(o,10),i=this.rowNodesByIndex[s];e(i,t),t++})}setRowData(e){u.iterateObject(e,(t,o)=>{const s=parseInt(t,10);if(s>=this.firstRow&&s<=this.lastRow){let i=this.rowNodesByIndex[s];u.missing(i)&&(i=this.createBlankRowNode(s),this.rowNodesByIndex[s]=i),i.setDataAndId(o,s.toString())}})}createBlankRowNode(e){const t=new S(this.beans);return t.setRowHeight(this.rowHeight),t.setRowTop(this.rowHeight*e),t.setRowIndex(e),t}setRowCount(e,t=!1){if(e===this.rowCount)return;this.rowCount=e,this.eventService.dispatchEventOnce({type:h.EVENT_ROW_COUNT_READY});const o={type:h.EVENT_MODEL_UPDATED,newData:!1,newPage:!1,keepRenderedRows:t,animate:!1};this.eventService.dispatchEvent(o)}isRowPresent(e){return!!this.getRowNode(e.id)}};w([c("rowRenderer")],r.prototype,"rowRenderer",2),w([c("focusService")],r.prototype,"focusService",2),w([c("beans")],r.prototype,"beans",2),w([x],r.prototype,"init",1),w([I],r.prototype,"destroyDatasource",1),r=w([y("rowModel")],r);var E={version:N,moduleName:g.ViewportRowModelModule,rowModel:"viewport",beans:[r],dependantModules:[v]};export{E as ViewportRowModelModule};
