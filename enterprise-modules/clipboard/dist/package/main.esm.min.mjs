var A=Object.defineProperty,I=Object.getOwnPropertyDescriptor,g=(e,t,s,o)=>{for(var r=o>1?void 0:o?I(t,s):t,i=e.length-1,l;i>=0;i--)(l=e[i])&&(r=(o?l(t,s,r):l(r))||r);return o&&r&&A(t,s,r),r};import{ModuleNames as x}from"@ag-grid-community/core";import{EnterpriseCoreModule as D}from"@ag-grid-enterprise/core";import{CsvExportModule as _}from"@ag-grid-community/csv-export";import{_ as m,Autowired as v,Bean as G,BeanStub as M,ChangedPath as H,Events as S,PostConstruct as L,Optional as k}from"@ag-grid-community/core";var y="paste",E="dragCopy",T="clipboard",P=e=>`AG Grid: Unable to use the Clipboard API (navigator.clipboard.${e}()). The reason why it could not be used has been logged in the previous line. For this reason the grid has defaulted to using a workaround which doesn't perform as well. Either fix why Clipboard API is blocked, OR stop this message from appearing by setting grid property suppressClipboardApi=true (which will default the grid to using the workaround rather than the API.`,d=class extends M{constructor(){super(...arguments),this.lastPasteOperationTime=0,this.navigatorApiFailed=!1}init(){this.logger=this.loggerFactory.create("ClipboardService"),this.rowModel.getType()==="clientSide"&&(this.clientSideRowModel=this.rowModel),this.ctrlsService.whenReady(e=>{this.gridCtrl=e.gridCtrl})}pasteFromClipboard(){this.logger.log("pasteFromClipboard"),!this.gridOptionsService.get("suppressClipboardApi")&&!this.navigatorApiFailed&&navigator.clipboard&&navigator.clipboard.readText?navigator.clipboard.readText().then(this.processClipboardData.bind(this)).catch(t=>{m.doOnce(()=>{console.warn(t),console.warn(P("readText"))},"clipboardApiError"),this.navigatorApiFailed=!0,this.pasteFromClipboardLegacy()}):this.pasteFromClipboardLegacy()}pasteFromClipboardLegacy(){let e=!1;const t=s=>{const o=new Date().getTime();o-this.lastPasteOperationTime<50&&(e=!0,s.preventDefault()),this.lastPasteOperationTime=o};this.executeOnTempElement(s=>{s.addEventListener("paste",t),s.focus({preventScroll:!0})},s=>{const o=s.value;e?this.refocusLastFocusedCell():this.processClipboardData(o),s.removeEventListener("paste",t)})}refocusLastFocusedCell(){const e=this.focusService.getFocusedCell();e&&this.focusService.setFocusedCell({rowIndex:e.rowIndex,column:e.column,rowPinned:e.rowPinned,forceBrowserFocus:!0})}getClipboardDelimiter(){const e=this.gridOptionsService.get("clipboardDelimiter");return m.exists(e)?e:"	"}processClipboardData(e){if(e==null)return;let t=d.stringToArray(e,this.getClipboardDelimiter());const s=this.gridOptionsService.getCallback("processDataFromClipboard");if(s&&(t=s({data:t})),t==null)return;this.gridOptionsService.get("suppressLastEmptyLineOnPaste")&&this.removeLastLineIfBlank(t);const o=(r,i,l,a)=>{this.rangeService&&this.rangeService.isMoreThanOneCell()&&!this.hasOnlyOneValueToPaste(t)?this.pasteIntoActiveRange(t,r,i,a):this.pasteStartingFromFocusedCell(t,r,i,l,a)};this.doPasteOperation(o)}static stringToArray(e,t=","){const s=[],o=i=>i==="\r"||i===`
`;let r=!1;if(e==="")return[[""]];for(let i=0,l=0,a=0;a<e.length;a++){const c=e[a-1],n=e[a],p=e[a+1],h=()=>{s[i]||(s[i]=[]),s[i][l]||(s[i][l]="")};if(h(),n==='"'&&(r?p==='"'?(s[i][l]+='"',a++):r=!1:(c===void 0||c===t||o(c))&&(r=!0)),!r&&n!=='"'){if(n===t){l++,h();continue}else if(o(n)){l=0,i++,h(),n==="\r"&&p===`
`&&a++;continue}}s[i][l]+=n}return s}doPasteOperation(e){const t="clipboard";this.eventService.dispatchEvent({type:S.EVENT_PASTE_START,source:t});let s;if(this.clientSideRowModel){const c=this.gridOptionsService.get("aggregateOnlyChangedColumns");s=new H(c,this.clientSideRowModel.getRootNode())}const o={},r=[],i=this.focusService.getFocusedCell();e(o,r,i,s);const l=[...r];s&&(this.clientSideRowModel.doAggregate(s),s.forEachChangedNodeDepthFirst(c=>{l.push(c)})),this.rowRenderer.refreshCells({rowNodes:l}),this.dispatchFlashCells(o),this.fireRowChanged(r),this.refocusLastFocusedCell();const a={type:S.EVENT_PASTE_END,source:t};this.eventService.dispatchEvent(a)}pasteIntoActiveRange(e,t,s,o){const r=this.getRangeSize()%e.length!=0;let i=0,l=0;const a=(c,n,p,h)=>{if(h-i>=e.length){if(r)return;i+=l,l=0}const C=e[h-i];s.push(n);const b=this.gridOptionsService.getCallback("processCellFromClipboard");p.forEach((f,w)=>{if(!f.isCellEditable(n)||f.isSuppressPaste(n))return;w>=C.length&&(w=w%C.length);const R=this.processCell(n,f,C[w],E,b,!0);n.setDataValue(f,R,y),o&&o.addParentNode(n.parent,[f]);const{rowIndex:F,rowPinned:O}=c,V=this.cellPositionUtils.createIdFromValues({rowIndex:F,column:f,rowPinned:O});t[V]=!0}),l++};this.iterateActiveRanges(!1,a)}pasteStartingFromFocusedCell(e,t,s,o,r){if(!o)return;const i={rowIndex:o.rowIndex,rowPinned:o.rowPinned},l=this.columnModel.getDisplayedColumnsStartingAt(o.column);this.isPasteSingleValueIntoRange(e)?this.pasteSingleValueIntoRange(e,s,t,r):this.pasteMultipleValues(e,i,s,l,t,T,r)}isPasteSingleValueIntoRange(e){return this.hasOnlyOneValueToPaste(e)&&this.rangeService!=null&&!this.rangeService.isEmpty()}pasteSingleValueIntoRange(e,t,s,o){const r=e[0][0],i=(l,a,c)=>{t.push(a),c.forEach(n=>this.updateCellValue(a,n,r,s,T,o))};this.iterateActiveRanges(!1,i)}hasOnlyOneValueToPaste(e){return e.length===1&&e[0].length===1}copyRangeDown(){if(!this.rangeService||this.rangeService.isEmpty())return;const e=[],t=(s,o,r,i)=>{const l=this.gridOptionsService.getCallback("processCellForClipboard"),a=this.gridOptionsService.getCallback("processCellFromClipboard"),c=(n,p,h)=>{e.length?(o.push(p),h.forEach((u,C)=>{if(!u.isCellEditable(p)||u.isSuppressPaste(p))return;const b=this.processCell(p,u,e[C],E,a,!0);p.setDataValue(u,b,y),i&&i.addParentNode(p.parent,[u]);const{rowIndex:f,rowPinned:w}=n,R=this.cellPositionUtils.createIdFromValues({rowIndex:f,column:u,rowPinned:w});s[R]=!0})):h.forEach(u=>{const C=this.processCell(p,u,this.valueService.getValue(u,p),E,l,!1,!0);e.push(C)})};this.iterateActiveRanges(!0,c)};this.doPasteOperation(t)}removeLastLineIfBlank(e){const t=m.last(e);if(t&&t.length===1&&t[0]===""){if(e.length===1)return;m.removeFromArray(e,t)}}fireRowChanged(e){this.gridOptionsService.get("editType")==="fullRow"&&e.forEach(t=>{const s={type:S.EVENT_ROW_VALUE_CHANGED,node:t,data:t.data,rowIndex:t.rowIndex,rowPinned:t.rowPinned};this.eventService.dispatchEvent(s)})}pasteMultipleValues(e,t,s,o,r,i,l){let a=t;const c=this.clientSideRowModel!=null&&!this.gridOptionsService.get("enableGroupEdit")&&!this.gridOptionsService.get("treeData"),n=()=>{for(;;){if(!a)return null;const p=this.rowPositionUtils.getRowNode(a);if(a=this.cellNavigationService.getRowBelow({rowPinned:a.rowPinned,rowIndex:a.rowIndex}),p==null)return null;if(!(p.detail||p.footer||c&&p.group))return p}};e.forEach(p=>{const h=n();h&&(p.forEach((u,C)=>this.updateCellValue(h,o[C],u,r,i,l)),s.push(h))})}updateCellValue(e,t,s,o,r,i){if(!e||!t||!t.isCellEditable(e)||t.isSuppressPaste(e)||e.group&&t.isValueActive())return;const l=this.processCell(e,t,s,r,this.gridOptionsService.getCallback("processCellFromClipboard"),!0);e.setDataValue(t,l,y);const{rowIndex:a,rowPinned:c}=e,n=this.cellPositionUtils.createIdFromValues({rowIndex:a,column:t,rowPinned:c});o[n]=!0,i&&i.addParentNode(e.parent,[t])}copyToClipboard(e={}){this.copyOrCutToClipboard(e)}cutToClipboard(e={},t="api"){if(this.gridOptionsService.get("suppressCutToClipboard"))return;const s={type:S.EVENT_CUT_START,source:t};this.eventService.dispatchEvent(s),this.copyOrCutToClipboard(e,!0);const o={type:S.EVENT_CUT_END,source:t};this.eventService.dispatchEvent(o)}copyOrCutToClipboard(e,t){let{includeHeaders:s,includeGroupHeaders:o}=e;this.logger.log(`copyToClipboard: includeHeaders = ${s}`),s==null&&(s=this.gridOptionsService.get("copyHeadersToClipboard")),o==null&&(o=this.gridOptionsService.get("copyGroupHeadersToClipboard"));const r={includeHeaders:s,includeGroupHeaders:o},i=!this.gridOptionsService.get("suppressCopyRowsToClipboard");let l=null;this.rangeService&&!this.rangeService.isEmpty()&&!this.shouldSkipSingleCellRange()?(this.copySelectedRangeToClipboard(r),l=0):i&&!this.selectionService.isEmpty()?(this.copySelectedRowsToClipboard(r),l=1):this.focusService.isAnyCellFocused()&&(this.copyFocusedCellToClipboard(r),l=2),t&&l!==null&&this.clearCellsAfterCopy(l)}clearCellsAfterCopy(e){if(this.eventService.dispatchEvent({type:S.EVENT_KEY_SHORTCUT_CHANGED_CELL_START}),e===0)this.rangeService.clearCellRangeCellValues({cellEventSource:"clipboardService"});else if(e===1)this.clearSelectedRows();else{const t=this.focusService.getFocusedCell();if(t==null)return;const s=this.rowPositionUtils.getRowNode(t);s&&this.clearCellValue(s,t.column)}this.eventService.dispatchEvent({type:S.EVENT_KEY_SHORTCUT_CHANGED_CELL_END})}clearSelectedRows(){const e=this.selectionService.getSelectedNodes(),t=this.columnModel.getAllDisplayedColumns();for(const s of e)for(const o of t)this.clearCellValue(s,o)}clearCellValue(e,t){t.isCellEditable(e)&&e.setDataValue(t,null,"clipboardService")}shouldSkipSingleCellRange(){return this.gridOptionsService.get("suppressCopySingleCellRanges")&&!this.rangeService.isMoreThanOneCell()}iterateActiveRanges(e,t,s){if(!this.rangeService||this.rangeService.isEmpty())return;const o=this.rangeService.getCellRanges();e?this.iterateActiveRange(o[0],t,s,!0):o.forEach((r,i)=>this.iterateActiveRange(r,t,s,i===o.length-1))}iterateActiveRange(e,t,s,o){if(!this.rangeService)return;let r=this.rangeService.getRangeStartRow(e);const i=this.rangeService.getRangeEndRow(e);s&&e.columns&&s(e.columns);let l=0,a=!1;for(;!a&&r!=null;){const c=this.rowPositionUtils.getRowNode(r);a=this.rowPositionUtils.sameRow(r,i),t(r,c,e.columns,l++,a&&o),r=this.cellNavigationService.getRowBelow(r)}}copySelectedRangeToClipboard(e={}){if(!this.rangeService||this.rangeService.isEmpty())return;const t=this.rangeService.areAllRangesAbleToMerge(),{data:s,cellsToFlash:o}=t?this.buildDataFromMergedRanges(e):this.buildDataFromRanges(e);this.copyDataToClipboard(s),this.dispatchFlashCells(o)}buildDataFromMergedRanges(e){const t=new Set,s=this.rangeService.getCellRanges(),o=new Map,r=[],i={};s.forEach(n=>{n.columns.forEach(u=>t.add(u));const{rowPositions:p,cellsToFlash:h}=this.getRangeRowPositionsAndCellsToFlash(n);p.forEach(u=>{const C=`${u.rowIndex}-${u.rowPinned||"null"}`;o.get(C)||(o.set(C,!0),r.push(u))}),Object.assign(i,h)});const l=this.columnModel.getAllDisplayedColumns(),a=Array.from(t);return a.sort((n,p)=>{const h=l.indexOf(n),u=l.indexOf(p);return h-u}),{data:this.buildExportParams({columns:a,rowPositions:r,includeHeaders:e.includeHeaders,includeGroupHeaders:e.includeGroupHeaders}),cellsToFlash:i}}buildDataFromRanges(e){const t=this.rangeService.getCellRanges(),s=[],o={};return t.forEach(r=>{const{rowPositions:i,cellsToFlash:l}=this.getRangeRowPositionsAndCellsToFlash(r);Object.assign(o,l),s.push(this.buildExportParams({columns:r.columns,rowPositions:i,includeHeaders:e.includeHeaders,includeGroupHeaders:e.includeGroupHeaders}))}),{data:s.join(`
`),cellsToFlash:o}}getRangeRowPositionsAndCellsToFlash(e){const t=[],s={},o=this.rangeService.getRangeStartRow(e),r=this.rangeService.getRangeEndRow(e);let i=o;for(;i&&(t.push(i),e.columns.forEach(l=>{const{rowIndex:a,rowPinned:c}=i,n=this.cellPositionUtils.createIdFromValues({rowIndex:a,column:l,rowPinned:c});s[n]=!0}),!this.rowPositionUtils.sameRow(i,r));)i=this.cellNavigationService.getRowBelow(i);return{rowPositions:t,cellsToFlash:s}}getCellsToFlashFromRowNodes(e){const t=this.columnModel.getAllDisplayedColumns(),s={};for(let o=0;o<e.length;o++){const{rowIndex:r,rowPinned:i}=e[o];if(r!=null)for(let l=0;l<t.length;l++){const a=t[l],c=this.cellPositionUtils.createIdFromValues({rowIndex:r,column:a,rowPinned:i});s[c]=!0}}return s}copyFocusedCellToClipboard(e={}){const t=this.focusService.getFocusedCell();if(t==null)return;const s=this.cellPositionUtils.createId(t),o={rowPinned:t.rowPinned,rowIndex:t.rowIndex},r=t.column,i=this.buildExportParams({columns:[r],rowPositions:[o],includeHeaders:e.includeHeaders,includeGroupHeaders:e.includeGroupHeaders});this.copyDataToClipboard(i),this.dispatchFlashCells({[s]:!0})}copySelectedRowsToClipboard(e={}){const{columnKeys:t,includeHeaders:s,includeGroupHeaders:o}=e,r=this.buildExportParams({columns:t,includeHeaders:s,includeGroupHeaders:o});this.copyDataToClipboard(r);const i=this.selectionService.getSelectedNodes()||[];this.dispatchFlashCells(this.getCellsToFlashFromRowNodes(i))}buildExportParams(e){const{columns:t,rowPositions:s,includeHeaders:o=!1,includeGroupHeaders:r=!1}=e,i={columnKeys:t,rowPositions:s,skipColumnHeaders:!o,skipColumnGroupHeaders:!r,suppressQuotes:!0,columnSeparator:this.getClipboardDelimiter(),onlySelected:!s,processCellCallback:this.gridOptionsService.getCallback("processCellForClipboard"),processRowGroupCallback:l=>this.processRowGroupCallback(l),processHeaderCallback:this.gridOptionsService.getCallback("processHeaderForClipboard"),processGroupHeaderCallback:this.gridOptionsService.getCallback("processGroupHeaderForClipboard")};return this.csvCreator.getDataAsCsv(i,!0)}processRowGroupCallback(e){const{node:t,column:s}=e,o=this.gridOptionsService.get("treeData"),r=this.gridOptionsService.get("suppressGroupMaintainValueType");let l=(()=>{var c,n;if(o||r||!s)return t.key;const p=(c=t.groupData)==null?void 0:c[s.getId()];return!p||!t.rowGroupColumn||t.rowGroupColumn.getColDef().useValueFormatterForExport===!1?p:(n=this.valueFormatterService.formatValue(t.rowGroupColumn,t,p))!=null?n:p})();if(e.node.footer){let c="";l&&l.length&&(c=` ${l}`),l=`Total${c}`}const a=this.gridOptionsService.getCallback("processCellForClipboard");if(a){let c=t.rowGroupColumn;return!c&&t.footer&&t.level===-1&&(c=this.columnModel.getRowGroupColumns()[0]),a({value:l,node:t,column:c,type:"clipboard",formatValue:n=>{var p;return(p=this.valueFormatterService.formatValue(c,t,n))!=null?p:n},parseValue:n=>this.valueParserService.parseValue(c,t,n,this.valueService.getValue(c,t))})}return l}dispatchFlashCells(e){window.setTimeout(()=>{const t={type:S.EVENT_FLASH_CELLS,cells:e};this.eventService.dispatchEvent(t)},0)}processCell(e,t,s,o,r,i,l){var a;return r?r({column:t,node:e,value:s,type:o,formatValue:n=>{var p;return(p=this.valueFormatterService.formatValue(t,e??null,n))!=null?p:n},parseValue:n=>this.valueParserService.parseValue(t,e??null,n,this.valueService.getValue(t,e))}):i&&t.getColDef().useValueParserForImport!==!1?this.valueParserService.parseValue(t,e??null,s,this.valueService.getValue(t,e)):l&&t.getColDef().useValueFormatterForExport!==!1&&(a=this.valueFormatterService.formatValue(t,e??null,s))!=null?a:s}copyDataToClipboard(e){const t=this.gridOptionsService.getCallback("sendToClipboard");if(t){t({data:e});return}if(!this.gridOptionsService.get("suppressClipboardApi")&&navigator.clipboard){navigator.clipboard.writeText(e).catch(o=>{m.doOnce(()=>{console.warn(o),console.warn(P("writeText"))},"clipboardApiError"),this.copyDataToClipboardLegacy(e)});return}this.copyDataToClipboardLegacy(e)}copyDataToClipboardLegacy(e){this.executeOnTempElement(t=>{const s=this.gridOptionsService.getDocument(),o=s.activeElement;t.value=e||" ",t.select(),t.focus({preventScroll:!0}),s.execCommand("copy")||console.warn("AG Grid: Browser did not allow document.execCommand('copy'). Ensure api.copySelectedRowsToClipboard() is invoked via a user event, i.e. button click, otherwise the browser will prevent it for security reasons."),o!=null&&o.focus!=null&&o.focus({preventScroll:!0})})}executeOnTempElement(e,t){const s=this.gridOptionsService.getDocument(),o=s.createElement("textarea");o.style.width="1px",o.style.height="1px",o.style.top=s.documentElement.scrollTop+"px",o.style.left=s.documentElement.scrollLeft+"px",o.style.position="absolute",o.style.opacity="0";const r=this.gridCtrl.getGui();r.appendChild(o);try{e(o)}catch{console.warn("AG Grid: Browser does not support document.execCommand('copy') for clipboard operations")}t?window.setTimeout(()=>{t(o),r.removeChild(o)},100):r.removeChild(o)}getRangeSize(){const e=this.rangeService.getCellRanges();let t=0,s=0;return e.length>0&&(t=this.rangeService.getRangeStartRow(e[0]).rowIndex,s=this.rangeService.getRangeEndRow(e[0]).rowIndex),t-s+1}};g([v("csvCreator")],d.prototype,"csvCreator",2),g([v("loggerFactory")],d.prototype,"loggerFactory",2),g([v("selectionService")],d.prototype,"selectionService",2),g([k("rangeService")],d.prototype,"rangeService",2),g([v("rowModel")],d.prototype,"rowModel",2),g([v("ctrlsService")],d.prototype,"ctrlsService",2),g([v("valueService")],d.prototype,"valueService",2),g([v("focusService")],d.prototype,"focusService",2),g([v("rowRenderer")],d.prototype,"rowRenderer",2),g([v("columnModel")],d.prototype,"columnModel",2),g([v("cellNavigationService")],d.prototype,"cellNavigationService",2),g([v("cellPositionUtils")],d.prototype,"cellPositionUtils",2),g([v("rowPositionUtils")],d.prototype,"rowPositionUtils",2),g([v("valueFormatterService")],d.prototype,"valueFormatterService",2),g([v("valueParserService")],d.prototype,"valueParserService",2),g([L],d.prototype,"init",1),d=g([G("clipboardService")],d);var U="31.2.1",B={version:U,moduleName:x.ClipboardModule,beans:[d],dependantModules:[D,_]};export{B as ClipboardModule};
