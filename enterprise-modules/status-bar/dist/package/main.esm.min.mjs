var H=Object.defineProperty,j=Object.getOwnPropertyDescriptor,s=(t,e,o,a)=>{for(var r=a>1?void 0:a?j(e,o):e,n=t.length-1,i;n>=0;n--)(i=t[n])&&(r=(a?i(e,o,r):i(r))||r);return a&&r&&H(e,o,r),r};import{ModuleNames as k}from"@ag-grid-community/core";import{EnterpriseCoreModule as $}from"@ag-grid-enterprise/core";import{Bean as q,BeanStub as z}from"@ag-grid-community/core";var y=class extends z{constructor(){super(),this.allComponents=new Map}registerStatusPanel(t,e){this.allComponents.set(t,e)}unregisterStatusPanel(t){this.allComponents.delete(t)}unregisterAllComponents(){this.allComponents.clear()}getStatusPanel(t){return this.allComponents.get(t)}destroy(){this.unregisterAllComponents(),super.destroy()}};y=s([q("statusBarService")],y);import{Autowired as _,Component as J,PostConstruct as K,PreDestroy as Q,AgPromise as D,RefSelector as R,_ as W}from"@ag-grid-community/core";var m=class O extends J{constructor(){super(O.TEMPLATE),this.compDestroyFunctions={}}postConstruct(){this.processStatusPanels(new Map),this.addManagedPropertyListeners(["statusBar"],this.handleStatusBarChanged.bind(this))}processStatusPanels(e){var o;const a=(o=this.gridOptionsService.get("statusBar"))==null?void 0:o.statusPanels;if(a){const r=a.filter(l=>l.align==="left");this.createAndRenderComponents(r,this.eStatusBarLeft,e);const n=a.filter(l=>l.align==="center");this.createAndRenderComponents(n,this.eStatusBarCenter,e);const i=a.filter(l=>!l.align||l.align==="right");this.createAndRenderComponents(i,this.eStatusBarRight,e)}else this.setDisplayed(!1)}handleStatusBarChanged(){var e;const o=(e=this.gridOptionsService.get("statusBar"))==null?void 0:e.statusPanels,a=Array.isArray(o)&&o.length>0;this.setDisplayed(a);const r=new Map;a&&o.forEach(n=>{var i,l;const p=(i=n.key)!=null?i:n.statusPanel,c=this.statusBarService.getStatusPanel(p);if(c?.refresh){const h=this.gridOptionsService.addGridCommonParams((l=n.statusPanelParams)!=null?l:{});c.refresh(h)&&(r.set(p,c),delete this.compDestroyFunctions[p],W.removeFromParent(c.getGui()))}}),this.resetStatusBar(),a&&this.processStatusPanels(r)}resetStatusBar(){this.eStatusBarLeft.innerHTML="",this.eStatusBarCenter.innerHTML="",this.eStatusBarRight.innerHTML="",this.destroyComponents(),this.statusBarService.unregisterAllComponents()}destroyComponents(){Object.values(this.compDestroyFunctions).forEach(e=>e()),this.compDestroyFunctions={}}createAndRenderComponents(e,o,a){const r=[];e.forEach(n=>{const i=n.key||n.statusPanel,l=a.get(i);let p;if(l)p=D.resolve(l);else{const c={};if(p=this.userComponentFactory.getStatusPanelCompDetails(n,c).newAgStackInstance(),!p)return}r.push({key:i,promise:p})}),D.all(r.map(n=>n.promise)).then(()=>{r.forEach(n=>{n.promise.then(i=>{const l=()=>{this.getContext().destroyBean(i)};this.isAlive()?(this.statusBarService.registerStatusPanel(n.key,i),o.appendChild(i.getGui()),this.compDestroyFunctions[n.key]=l):l()})})})}};m.TEMPLATE=`<div class="ag-status-bar">
            <div ref="eStatusBarLeft" class="ag-status-bar-left" role="status"></div>
            <div ref="eStatusBarCenter" class="ag-status-bar-center" role="status"></div>
            <div ref="eStatusBarRight" class="ag-status-bar-right" role="status"></div>
        </div>`,s([_("userComponentFactory")],m.prototype,"userComponentFactory",2),s([_("statusBarService")],m.prototype,"statusBarService",2),s([R("eStatusBarLeft")],m.prototype,"eStatusBarLeft",2),s([R("eStatusBarCenter")],m.prototype,"eStatusBarCenter",2),s([R("eStatusBarRight")],m.prototype,"eStatusBarRight",2),s([K],m.prototype,"postConstruct",1),s([Q],m.prototype,"destroyComponents",1);var X=m;import{Component as Y,RefSelector as M}from"@ag-grid-community/core";var A=class G extends Y{constructor(){super(G.TEMPLATE)}setLabel(e,o){this.setDisplayed(!1);const a=this.localeService.getLocaleTextFunc();this.eLabel.innerHTML=a(e,o)}setValue(e){this.eValue.innerHTML=e}};A.TEMPLATE=`<div class="ag-status-name-value">
            <span ref="eLabel"></span>:&nbsp;
            <span ref="eValue" class="ag-status-name-value-value"></span>
        </div>`,s([M("eLabel")],A.prototype,"eLabel",2),s([M("eValue")],A.prototype,"eValue",2);var S=A;import{Autowired as Z,Events as ee,PostConstruct as te,_ as N}from"@ag-grid-community/core";var E=class extends S{postConstruct(){if(this.gridApi.__getModel().getType()!=="clientSide"){console.warn("AG Grid: agTotalAndFilteredRowCountComponent should only be used with the client side row model.");return}this.setLabel("totalAndFilteredRows","Rows"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-and-filtered-row-count"),this.setDisplayed(!0),this.addManagedListener(this.eventService,ee.EVENT_MODEL_UPDATED,this.onDataChanged.bind(this)),this.onDataChanged()}onDataChanged(){const t=this.localeService.getLocaleTextFunc(),e=t("thousandSeparator",","),o=t("decimalSeparator","."),a=N.formatNumberCommas(this.getFilteredRowCountValue(),e,o),r=N.formatNumberCommas(this.getTotalRowCount(),e,o);if(a===r)this.setValue(a);else{const n=this.localeService.getLocaleTextFunc();this.setValue(`${a} ${n("of","of")} ${r}`)}}getFilteredRowCountValue(){let t=0;return this.gridApi.forEachNodeAfterFilter(e=>{e.group||t++}),t}getTotalRowCount(){let t=0;return this.gridApi.forEachNode(e=>{e.group||t++}),t}init(){}refresh(){return!0}destroy(){super.destroy()}};s([Z("gridApi")],E.prototype,"gridApi",2),s([te],E.prototype,"postConstruct",1);import{Autowired as oe,Events as se,PostConstruct as ae,_ as ne}from"@ag-grid-community/core";var T=class extends S{postConstruct(){if(this.setLabel("filteredRows","Filtered"),this.gridApi.__getModel().getType()!=="clientSide"){console.warn("AG Grid: agFilteredRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-filtered-row-count"),this.setDisplayed(!0);const t=this.onDataChanged.bind(this);this.addManagedListener(this.eventService,se.EVENT_MODEL_UPDATED,t),t()}onDataChanged(){const t=this.getTotalRowCountValue(),e=this.getFilteredRowCountValue(),o=this.localeService.getLocaleTextFunc(),a=o("thousandSeparator",","),r=o("decimalSeparator",".");this.setValue(ne.formatNumberCommas(e,a,r)),this.setDisplayed(t!==e)}getTotalRowCountValue(){let t=0;return this.gridApi.forEachNode(e=>t+=1),t}getFilteredRowCountValue(){let t=0;return this.gridApi.forEachNodeAfterFilter(e=>{e.group||(t+=1)}),t}init(){}refresh(){return!0}destroy(){super.destroy()}};s([oe("gridApi")],T.prototype,"gridApi",2),s([ae],T.prototype,"postConstruct",1);import{Autowired as re,Events as ie,PostConstruct as le,_ as ue}from"@ag-grid-community/core";var P=class extends S{postConstruct(){if(this.setLabel("totalRows","Total Rows"),this.gridApi.__getModel().getType()!=="clientSide"){console.warn("AG Grid: agTotalRowCountComponent should only be used with the client side row model.");return}this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-total-row-count"),this.setDisplayed(!0),this.addManagedListener(this.eventService,ie.EVENT_MODEL_UPDATED,this.onDataChanged.bind(this)),this.onDataChanged()}onDataChanged(){const t=this.localeService.getLocaleTextFunc(),e=t("thousandSeparator",","),o=t("decimalSeparator",".");this.setValue(ue.formatNumberCommas(this.getRowCountValue(),e,o))}getRowCountValue(){let t=0;return this.gridApi.forEachLeafNode(e=>t+=1),t}init(){}refresh(){return!0}destroy(){super.destroy()}};s([re("gridApi")],P.prototype,"gridApi",2),s([le],P.prototype,"postConstruct",1);import{Autowired as B,Events as F,PostConstruct as de,_ as pe}from"@ag-grid-community/core";var w=class extends S{postConstruct(){if(!this.isValidRowModel()){console.warn("AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.");return}this.setLabel("selectedRows","Selected"),this.addCssClass("ag-status-panel"),this.addCssClass("ag-status-panel-selected-row-count"),this.onRowSelectionChanged();const t=this.onRowSelectionChanged.bind(this);this.addManagedListener(this.eventService,F.EVENT_MODEL_UPDATED,t),this.addManagedListener(this.eventService,F.EVENT_SELECTION_CHANGED,t)}isValidRowModel(){const t=this.gridApi.__getModel().getType();return t==="clientSide"||t==="serverSide"}onRowSelectionChanged(){const t=this.selectionService.getSelectionCount();if(t<0){this.setValue("?"),this.setDisplayed(!0);return}const e=this.localeService.getLocaleTextFunc(),o=e("thousandSeparator",","),a=e("decimalSeparator",".");this.setValue(pe.formatNumberCommas(t,o,a)),this.setDisplayed(t>0)}init(){}refresh(){return!0}destroy(){super.destroy()}};s([B("gridApi")],w.prototype,"gridApi",2),s([B("selectionService")],w.prototype,"selectionService",2),s([de],w.prototype,"postConstruct",1);import{Autowired as C,Component as ce,Events as x,PostConstruct as ge,RefSelector as f,_ as v,Optional as me}from"@ag-grid-community/core";var d=class U extends ce{constructor(){super(U.TEMPLATE)}destroy(){super.destroy()}postConstruct(){if(!this.isValidRowModel()){console.warn("AG Grid: agAggregationComponent should only be used with the client and server side row model.");return}this.avgAggregationComp.setLabel("avg","Average"),this.countAggregationComp.setLabel("count","Count"),this.minAggregationComp.setLabel("min","Min"),this.maxAggregationComp.setLabel("max","Max"),this.sumAggregationComp.setLabel("sum","Sum"),this.addManagedListener(this.eventService,x.EVENT_RANGE_SELECTION_CHANGED,this.onRangeSelectionChanged.bind(this)),this.addManagedListener(this.eventService,x.EVENT_MODEL_UPDATED,this.onRangeSelectionChanged.bind(this))}isValidRowModel(){const e=this.gridApi.__getModel().getType();return e==="clientSide"||e==="serverSide"}init(e){this.params=e}refresh(e){return this.params=e,this.onRangeSelectionChanged(),!0}setAggregationComponentValue(e,o,a){var r;const n=this.getAllowedAggregationValueComponent(e);if(v.exists(n)&&n){const i=this.localeService.getLocaleTextFunc(),l=i("thousandSeparator",","),p=i("decimalSeparator",".");n.setValue(v.formatNumberTwoDecimalPlacesAndCommas(o,l,p)),n.setDisplayed(a)}else(r=this.getAggregationValueComponent(e))==null||r.setDisplayed(!1)}getAllowedAggregationValueComponent(e){const{aggFuncs:o}=this.params;return!o||o.includes(e)?this.getAggregationValueComponent(e):null}getAggregationValueComponent(e){const o=`${e}AggregationComp`;return this[o]}onRangeSelectionChanged(){const e=this.rangeService?this.rangeService.getCellRanges():void 0;let o=0,a=0,r=0,n=null,i=null;const l={};e&&!v.missingOrEmpty(e)&&e.forEach(h=>{let g=this.rangeService.getRangeStartRow(h);const I=this.rangeService.getRangeEndRow(h);for(;!(v.missing(g)||!g||this.rowPositionUtils.before(I,g)||!g||!h.columns);)h.columns.forEach(L=>{if(g===null)return;const V=this.cellPositionUtils.createId({rowPinned:g.rowPinned,column:L,rowIndex:g.rowIndex});if(l[V])return;l[V]=!0;const b=this.rowRenderer.getRowNode(g);if(v.missing(b))return;let u=this.valueService.getValue(L,b);v.missing(u)||u===""||(a++,!(typeof u=="object"&&"value"in u&&(u=u.value,u===""))&&(typeof u=="string"&&(u=Number(u)),typeof u=="number"&&!isNaN(u)&&(o+=u,(i===null||u>i)&&(i=u),(n===null||u<n)&&(n=u),r++)))}),g=this.cellNavigationService.getRowBelow(g)});const p=a>1,c=r>1;this.setAggregationComponentValue("count",a,p),this.setAggregationComponentValue("sum",o,c),this.setAggregationComponentValue("min",n,c),this.setAggregationComponentValue("max",i,c),this.setAggregationComponentValue("avg",o/r,c)}};d.TEMPLATE=`<div class="ag-status-panel ag-status-panel-aggregations">
            <ag-name-value ref="avgAggregationComp"></ag-name-value>
            <ag-name-value ref="countAggregationComp"></ag-name-value>
            <ag-name-value ref="minAggregationComp"></ag-name-value>
            <ag-name-value ref="maxAggregationComp"></ag-name-value>
            <ag-name-value ref="sumAggregationComp"></ag-name-value>
        </div>`,s([me("rangeService")],d.prototype,"rangeService",2),s([C("valueService")],d.prototype,"valueService",2),s([C("cellNavigationService")],d.prototype,"cellNavigationService",2),s([C("rowRenderer")],d.prototype,"rowRenderer",2),s([C("gridApi")],d.prototype,"gridApi",2),s([C("cellPositionUtils")],d.prototype,"cellPositionUtils",2),s([C("rowPositionUtils")],d.prototype,"rowPositionUtils",2),s([f("sumAggregationComp")],d.prototype,"sumAggregationComp",2),s([f("countAggregationComp")],d.prototype,"countAggregationComp",2),s([f("minAggregationComp")],d.prototype,"minAggregationComp",2),s([f("maxAggregationComp")],d.prototype,"maxAggregationComp",2),s([f("avgAggregationComp")],d.prototype,"avgAggregationComp",2),s([ge],d.prototype,"postConstruct",1);var he=d,Ce="31.2.1",ve={version:Ce,moduleName:k.StatusBarModule,beans:[y],agStackComponents:[{componentName:"AgStatusBar",componentClass:X},{componentName:"AgNameValue",componentClass:S}],userComponents:[{componentName:"agAggregationComponent",componentClass:he},{componentName:"agSelectedRowCountComponent",componentClass:w},{componentName:"agTotalRowCountComponent",componentClass:P},{componentName:"agFilteredRowCountComponent",componentClass:T},{componentName:"agTotalAndFilteredRowCountComponent",componentClass:E}],dependantModules:[$]};export{ve as StatusBarModule};
