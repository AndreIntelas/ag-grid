//
// NOTE: THIS FILE IS GENERATED DO NOT EDIT IT DIRECTLY!
// It can be regenerated by running `npm run codegen` or
// `npm run codegen:watch` to regenerate on changes.
//

export type BorderStyle = 'solid' | 'dotted' | 'dashed' | 'none';

export type ParamTypes = {
  /**
   * Background colour of the grid.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#FFF"
   */
  backgroundColor: string;

  /**
   * Foreground colour of the grid, and default text colour.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#181d1f"
   */
  foregroundColor: string;

  /**
   * The 'brand colour' for the grid, used wherever a non-neutral colour is required. Selections, focus outlines and checkboxes use the accent colour by default.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#2196f3"
   */
  accentColor: string;

  /**
   * The colour for inputs and UI controls in an invalid state.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#e02525"
   */
  invalidColor: string;

  /**
   * Default colour for borders.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.15)
   */
  borderColor: string;

  /**
   * Borders around the outside of the grid
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  wrapperBorder: string | boolean;

  /**
   * Borders between and below header rows.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  headerBorder: string | boolean;

  /**
   * Borders between rows.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  rowBorder: string | boolean;

  /**
   * Horizontal borders above footer components like the pagination and status bars
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  footerBorder: string | boolean;

  /**
   * Vertical borders separating columns.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default false
   */
  columnBorder: string | boolean;

  /**
   * Borders between the grid and columns that are pinned to the left or right
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  pinnedColumnBorder: string | boolean;

  /**
   * Borders between the grid and rows that are pinned to the top or bottom
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  pinnedRowBorder: string | boolean;

  /**
   * Borders between the grid and side panels including the column and filter tool bars, and chart settings
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  sidePanelBorder: string | boolean;

  /**
   * Border around the selected sidebar button on the side panel
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  sideButtonSelectedBorder: string | boolean;

  /**
   * Border around the selected sidebar button on the side panel
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  sideButtonSelectedBackgroundColor: string;

  /**
   * Background colour for non-data areas of the grid. Headers, tool panels and menus use this colour by default.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("chromeBackgroundColor")
   */
  sideBarBackgroundColor: string;

  /**
   * Font family used for all text.
   *
   * Any valid CSS expression is accepted.
   *
   * @default "'IBM Plex Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif"
   */
  fontFamily: string;

  /**
   * Background colour for non-data areas of the grid. Headers, tool panels and menus use this colour by default.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.02)
   */
  chromeBackgroundColor: string;

  /**
   * Background colour for header and header-like.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("chromeBackgroundColor")
   */
  headerBackgroundColor: string;

  /**
   * Weight of text in the header
   *
   * Any valid CSS expression is accepted.
   *
   * @default "500"
   */
  headerFontWeight: string;

  /**
   * Colour of text in the header
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("foregroundColor")
   */
  headerForegroundColor: string;

  /**
   * Rollover colour for header cells.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "transparent"
   */
  headerCellHoverBackgroundColor: string;

  /**
   * Duration of header cell hover transition, if --ag-header-cell-hover-background-color is set.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "0.2s"
   */
  headerCellHoverBackgroundTransitionDuration: string;

  /**
   * Colour of text in grid cells.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("foregroundColor")
   */
  dataColor: string;

  /**
   * Colour of text and UI elements that should stand out less than the default.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.5)
   */
  subtleForegroundColor: string;

  /**
   * Style of the border around range selections.
   *
   * A CSS border-style value e.g. "solid" or "dashed".
   *
   * @default "solid"
   */
  rangeSelectionBorderStyle: BorderStyle;

  /**
   * The color used for borders around range selections. The selection background defaults to a semi-transparent version of this colour.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("accentColor")
   */
  rangeSelectionBorderColor: string;

  /**
   * Background colour of selected cell ranges. Choosing a semi-transparent colour ensure that multiple overlapping ranges look correct.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.2)
   */
  rangeSelectionBackgroundColor: string;

  /**
   * Background colour for cells that provide data to the current range chart
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#0058FF1A"
   */
  rangeSelectionChartBackgroundColor: string;

  /**
   * Background colour for cells that provide categories to the current range chart
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#00FF841A"
   */
  rangeSelectionChartCategoryBackgroundColor: string;

  /**
   * Background colour to briefly apply to a cell range when the user copies from or pastes into it.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.5)
   */
  rangeSelectionHighlightColor: string;

  /**
   * Background color when hovering over rows in the grid and in dropdown menus. Set to `transparent` to disable the hover effect. Note: if you want a rollover on one but not the other, use CSS selectors instead of this property.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.12)
   */
  rowHoverColor: string;

  /**
   * Background color when hovering over columns in the grid. This is not visible unless enabled in the grid options.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.05)
   */
  columnHoverColor: string;

  /**
   * Background color of selected rows in the grid and in dropdown menus.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.08)
   */
  selectedRowBackgroundColor: string;

  /**
   * Background color of the overlay shown over the grid e.g. a data loading indicator.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentBackground(0.66)
   */
  modalOverlayBackgroundColor: string;

  /**
   * Background colour applied to every other row
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  oddRowBackgroundColor: string;

  /**
   * Border radius applied to many elements such as menus, dialogs and form widgets.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "4px"
   */
  borderRadius: string;

  /**
   * Border radius applied to the outermost container around the grid.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "8px"
   */
  wrapperBorderRadius: string;

  /**
   * Horizontal spacing between widgets inside cells (e.g. row group expand buttons and row selection checkboxes).
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "calc(gridSize * 1.5)"
   */
  cellWidgetSpacing: string;

  /**
   * Horizontal spacing between icons and text inside labels, e.g. in the header and sidebar tabs
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default ref("gridSize")
   */
  labelWidgetSpacing: string;

  /**
   * The indentation applied to each level of row grouping - deep rows are indented by a multiple of this value.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("cellWidgetSpacing + iconSize")
   */
  rowGroupIndentSize: string;

  /**
   * Colour to temporarily apply to cell data when its value increases in an agAnimateShowChangeCellRenderer cell
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#43a047"
   */
  valueChangeDeltaUpColor: string;

  /**
   * Colour to temporarily apply to cell data when its value decreases in an agAnimateShowChangeCellRenderer cell
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#e53935"
   */
  valueChangeDeltaDownColor: string;

  /**
   * Colour to apply when a cell value changes and enableCellChangeFlash is enabled
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#16a08580"
   */
  valueChangeValueHighlightBackgroundColor: string;

  /**
   * Control how tightly data and UI elements are packed together. All padding and spacing in the grid is defined as a multiple of the grid size, so increasing it will make most components larger by increasing their internal white space while leaving the size of text and icons unchanged.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "8px"
   */
  gridSize: string;

  /**
   * Colour to apply when a cell value changes and enableCellChangeFlash is enabled
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize * 2")
   */
  cellHorizontalPadding: string;

  /**
   * Height of grid rows
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "14px"
   */
  fontSize: string;

  /**
   * Height of grid rows
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("fontSize + gridSize * 3.5")
   */
  rowHeight: string;

  /**
   * Height of header rows
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("fontSize + gridSize * 4.25")
   */
  headerHeight: string;

  /**
   * Default shadow for elements that float above the grid e.g. dialogs and menus
   *
   * Any valid CSS expression is accepted.
   *
   * @default "0 0 16px 0 #00000026"
   */
  popupShadow: string;

  /**
   * Default shadow for dropdown menus
   *
   * Any valid CSS expression is accepted.
   *
   * @default "0 1px 4px 1px #babfc766"
   */
  dropdownShadow: string;

  /**
   * Background colour of the ghost element when dragging columns
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  dragGhostBackgroundColor: string;

  /**
   * Border colour of the ghost element when dragging columns
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  dragGhostBorder: string | boolean;

  /**
   * Shadow for the ghost element when dragging columns
   *
   * Any valid CSS expression is accepted.
   *
   * @default ref("popupShadow")
   */
  dragGhostShadow: string;

  /**
   * Shadow around UI controls that have focus e.g. text inputs and buttons. The value must a valid CSS box-shadow.
   *
   * Any valid CSS expression is accepted.
   *
   * @default "0 0 0 3px color-mix(in srgb, transparent, var(--ag-accent-color) 50%)"
   */
  focusShadow: string;

  /**
   * Default width of the sidebar that contains the columns and filters tool panels
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "250px"
   */
  sideBarPanelWidth: string;

  /**
   * Whether to show an indicator of the drag handle on resizable header columns. If hidden, the handle will still be active but invisible.
   *
   * Any valid CSS expression is accepted.
   *
   * @default "block"
   */
  headerColumnResizeHandleDisplay: string;

  /**
   * Height of the drag handle on resizable header columns. Percentage values are relative to the header height.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "30%"
   */
  headerColumnResizeHandleHeight: string;

  /**
   * Width of the drag handle on resizable header columns.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "2px"
   */
  headerColumnResizeHandleWidth: string;

  /**
   * Colour of the drag handle on resizable header columns
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("borderColor")
   */
  headerColumnResizeHandleColor: string;

  /**
   * The horizontal padding of containers that contain stacked widgets, such as menus and tool panels
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize * 1.5")
   */
  widgetContainerHorizontalPadding: string;

  /**
   * The vertical padding of containers that contain stacked widgets, such as menus and tool panels
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize * 1.5")
   */
  widgetContainerVerticalPadding: string;

  /**
   * The spacing between widgets in containers arrange widgets horizontally
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize * 1.5")
   */
  widgetHorizontalSpacing: string;

  /**
   * The spacing between widgets in containers arrange widgets vertically
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default ref("gridSize")
   */
  widgetVerticalSpacing: string;

  /**
   * Height of items in scrolling lists e.g. dropdown select inputs and column menu set filters.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("iconSize + widgetVerticalSpacing")
   */
  listItemHeight: string;

  /**
   * Background colour for text inputs.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  inputBackgroundColor: string;

  /**
   * Background colour for disabled text inputs.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.06)
   */
  inputDisabledBackgroundColor: string;

  /**
   * Text colour for disabled text inputs.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.5)
   */
  inputDisabledForegroundColor: string;

  /**
   * Borders around text inputs.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  inputBorder: string | boolean;

  /**
   * Borders around text inputs.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  inputDisabledBorder: string | boolean;

  /**
   * Borders around text inputs.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default "solid 1px var(--ag-invalid-color)"
   */
  inputInvalidBorder: string | boolean;

  /**
   * Borders around focussed text inputs.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default accentBorder()
   */
  inputFocusBorder: string | boolean;

  /**
   * Padding inside text inputs.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default ref("gridSize")
   */
  inputHorizontalPadding: string;

  /**
   * Padding inside text inputs.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default ref("borderRadius")
   */
  inputBorderRadius: string;

  /**
   * Width of the whole toggle button component
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "28px"
   */
  toggleButtonWidth: string;

  /**
   * Height of the whole toggle button component
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "18px"
   */
  toggleButtonHeight: string;

  /**
   * Size of the toggle button outer border
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "2px"
   */
  toggleButtonBorderWidth: string;

  /**
   * Colour of the toggle button outer border in its 'on' state
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("accentColor")
   */
  toggleButtonOnBorderColor: string;

  /**
   * Colour of the toggle button background in its 'on' state
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("accentColor")
   */
  toggleButtonOnBackgroundColor: string;

  /**
   * Colour of the toggle button's outer border in its 'off' state
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.3)
   */
  toggleButtonOffBorderColor: string;

  /**
   * Colour of the toggle button background in its 'off' state
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.3)
   */
  toggleButtonOffBackgroundColor: string;

  /**
   * Border colour of the toggle button switch (the bit that slides from left to right)
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("toggleButtonOffBorderColor")
   */
  toggleButtonSwitchBorderColor: string;

  /**
   * Colour of the toggle button switch (the bit that slides from left to right)
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  toggleButtonSwitchBackgroundColor: string;

  /**
   * The color of an unchecked checkbox
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "1px"
   */
  checkboxBorderWidth: string;

  /**
   * The color of an unchecked checkbox
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default ref("borderRadius")
   */
  checkboxBorderRadius: string;

  /**
   * The inner color of an unchecked checkbox
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  checkboxUncheckedBackgroundColor: string;

  /**
   * The border color of an unchecked checkbox
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.3)
   */
  checkboxUncheckedBorderColor: string;

  /**
   * The inner color of a checked checkbox
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("accentColor")
   */
  checkboxCheckedBackgroundColor: string;

  /**
   * The border color of a checked checkbox
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("accentColor")
   */
  checkboxCheckedBorderColor: string;

  /**
   * An image defining the shape of the check mark on checked checkboxes
   *
   * Any valid CSS expression is accepted.
   *
   * @default "url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2210%22%20height%3D%227%22%20fill%3D%22none%22%3E%3Cpath%20stroke%3D%22%23000%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%221.75%22%20d%3D%22M1%203.5%203.5%206l5-5%22%2F%3E%3C%2Fsvg%3E')"
   */
  checkboxCheckedShapeImage: string;

  /**
   * The colour of the check mark on checked checkboxes.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  checkboxCheckedShapeColor: string;

  /**
   * The inner color of an indeterminate checkbox
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.3)
   */
  checkboxIndeterminateBackgroundColor: string;

  /**
   * The border color of an indeterminate checkbox
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.3)
   */
  checkboxIndeterminateBorderColor: string;

  /**
   * An image defining the shape of the dash mark on indeterminate checkboxes
   *
   * Any valid CSS expression is accepted.
   *
   * @default "url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2210%22%20height%3D%222%22%20fill%3D%22none%22%3E%3Crect%20width%3D%2210%22%20height%3D%222%22%20fill%3D%22%23000%22%20rx%3D%221%22%2F%3E%3C%2Fsvg%3E')"
   */
  checkboxIndeterminateShapeImage: string;

  /**
   * The colour of the dash mark on indeterminate checkboxes
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  checkboxIndeterminateShapeColor: string;

  /**
   * An image defining the shape of the mark on checked radio buttons
   *
   * Any valid CSS expression is accepted.
   *
   * @default "url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%226%22%20height%3D%226%22%20fill%3D%22none%22%3E%3Ccircle%20cx%3D%223%22%20cy%3D%223%22%20r%3D%223%22%20fill%3D%22%23000%22%2F%3E%3C%2Fsvg%3E')"
   */
  radioCheckedShapeImage: string;

  /**
   * Border around menus e.g. column menu and right-click context menu
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default foregroundBorder(0.2)
   */
  menuBorder: string | boolean;

  /**
   * Background colour for menus e.g. column menu and right-click context menu
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.03)
   */
  menuBackgroundColor: string;

  /**
   * Text colour for menus e.g. column menu and right-click context menu
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default opaqueForeground(0.95)
   */
  menuForegroundColor: string;

  /**
   * Shadow for menus e.g. column menu and right-click context menu
   *
   * Any valid CSS expression is accepted.
   *
   * @default ref("popupShadow")
   */
  menuShadow: string;

  /**
   * Colour of the dividing line between sections of menus e.g. column menu and right-click context menu
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("borderColor")
   */
  menuSeparatorColor: string;

  /**
   * How much to indent child items in the Set Filter list when filtering tree data.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default ref("iconSize")
   */
  setFilterIndentSize: string;

  /**
   * Border around the button that shows and hides the chart settings menus
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  chartMenuButtonBorder: string | boolean;

  /**
   * Hover color for clickable icons
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.1)
   */
  iconButtonHoverColor: string;

  /**
   * Shadow for popup dialogs such as the integrated charts and the advanced filter builder.
   *
   * Any valid CSS expression is accepted.
   *
   * @default ref("popupShadow")
   */
  dialogShadow: string;

  /**
   * Border colour popup dialogs such as the integrated charts and the advanced filter builder.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default foregroundBorder(0.2)
   */
  dialogBorder: string;

  /**
   * Background colour for panels and dialogs such as the integrated charts and the advanced filter builder.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  panelBackgroundColor: string;

  /**
   * Background colour for the title bar of panels and dialogs such as the integrated charts and the advanced filter builder.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("headerBackgroundColor")
   */
  panelTitleBarBackgroundColor: string;

  /**
   * Border below the title bar of panels and dialogs such as the integrated charts and the advanced filter builder.
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  panelTitleBarBorder: string | boolean;

  /**
   * How much to indent child items in the Set Filter list when filtering tree data.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default ref("iconSize")
   */
  columnSelectIndentSize: string;

  /**
   * Colour of the dividing line between sections of menus e.g. column menu and right-click context menu
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  toolPanelSeparatorBorder: string | boolean;

  /**
   * Background colour for tooltips
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("chromeBackgroundColor")
   */
  tooltipBackgroundColor: string;

  /**
   * Text colour for tooltips
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("foregroundColor")
   */
  tooltipForegroundColor: string;

  /**
   * Border for tooltips
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  tooltipBorder: string | boolean;

  /**
   * Background colour for the representation of columns within the column drop component
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.07)
   */
  columnDropCellBackgroundColor: string;

  /**
   * Border for the representation of columns within the column drop component
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default foregroundBorder(0.13)
   */
  columnDropCellBorder: string | boolean;

  /**
   * Colour of the dividing line above the buttons in the advanced filter builder
   *
   * A CSS border value e.g. "solid 1px red". Passing true is equivalent to "solid 1px var(--ag-border-color)", and false to "none".
   *
   * @default true
   */
  advancedFilterBuilderButtonBarBorder: string | boolean;

  /**
   * Amount that each level of the nesting in the advanced filter builder is indented by
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize * 2 + iconSize")
   */
  advancedFilterBuilderIndentSize: string;

  /**
   * Colour of the join operator pills in the Advanced Filter Builder
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#f08e8d"
   */
  advancedFilterBuilderJoinPillColor: string;

  /**
   * Colour of the column pills in the Advanced Filter Builder
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#a6e194"
   */
  advancedFilterBuilderColumnPillColor: string;

  /**
   * Colour of the filter option pills in the Advanced Filter Builder
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#f3c08b"
   */
  advancedFilterBuilderOptionPillColor: string;

  /**
   * Colour of the value pills in the Advanced Filter Builder
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#85c0e4"
   */
  advancedFilterBuilderValuePillColor: string;

  /**
   * How much to indent child columns in the filters tool panel relative to their parent
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize")
   */
  filterToolPanelGroupIndent: string;

  /**
   * Background color of clickable icons when hovered
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.1)
   */
  iconButtonHoverBackgroundColor: string;

  /**
   * Width & height of the icon image.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "16px"
   */
  iconSize: string;

  /**
   * Width in pixels of lines making up the icon.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "1.5px"
   */
  iconStrokeWidth: string;
};

export type Param = keyof ParamTypes;
