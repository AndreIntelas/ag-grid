//
// NOTE: THIS FILE IS GENERATED DO NOT EDIT IT DIRECTLY!
// It can be regenerated by running `npm run codegen` or
// `npm run codegen:watch` to regenerate on changes.
//

import { definePart } from './theme-utils';
import * as helpers from './css-helpers';

export type BorderStyle = 'solid' | 'dotted' | 'dashed' | 'none';

export type CoreParam =
  | 'rangeSelectionBorderStyle'
  | 'rangeSelectionBorderColor'
  | 'rangeSelectionBackgroundColor'
  | 'rangeSelectionChartBackgroundColor'
  | 'rangeSelectionChartCategoryBackgroundColor'
  | 'rangeSelectionHighlightColor'
  | 'rowHoverColor'
  | 'columnHoverColor'
  | 'selectedRowBackgroundColor'
  | 'modalOverlayBackgroundColor'
  | 'oddRowBackgroundColor'
  | 'borderRadius'
  | 'wrapperBorderRadius'
  | 'cellWidgetSpacing'
  | 'rowGroupIndentSize'
  | 'valueChangeDeltaUpColor'
  | 'valueChangeDeltaDownColor'
  | 'valueChangeValueHighlightBackgroundColor'
  | 'gridSize'
  | 'cellHorizontalPadding';

export type ColorsPreset = 'light' | 'dark';

export type ColorsParam =
  | 'colorsPreset'
  | 'backgroundColor'
  | 'foregroundColor'
  | 'accentColor'
  | 'borderColor'
  | 'chromeBackgroundColor'
  | 'dataColor'
  | 'rowBorderColor';

export type BordersPreset = 'horizontal' | 'default' | 'full';

export type BordersParam =
  | 'bordersPreset'
  | 'bordersOutside'
  | 'bordersBelowHeaders'
  | 'bordersAboveFooters'
  | 'bordersBetweenRows'
  | 'bordersBetweenColumns'
  | 'bordersPinnedRows'
  | 'bordersPinnedColumns'
  | 'bordersSidePanels';

export type QuartzIconsPreset = 'light' | 'regular' | 'bold';

export type QuartzIconsParam = 'quartzIconsPreset' | 'iconSize' | 'iconStrokeWidth';

import resetCssImport from './css/core/reset.css?inline';
import gridBordersCssImport from './css/core/grid-borders.css?inline';
import gridLayoutCssImport from './css/core/grid-layout.css?inline';

export const core = definePart<CoreParam>({
  partId: 'core',
  defaults: {
    rangeSelectionBorderStyle: 'solid',
    rangeSelectionBorderColor: helpers.ref('accentColor'),
    rangeSelectionBackgroundColor: helpers.transparentAccent(0.2),
    rangeSelectionChartBackgroundColor: '#0058FF1A',
    rangeSelectionChartCategoryBackgroundColor: '#00FF841A',
    rangeSelectionHighlightColor: helpers.transparentAccent(0.5),
    rowHoverColor: helpers.transparentAccent(0.12),
    columnHoverColor: helpers.transparentAccent(0.05),
    selectedRowBackgroundColor: helpers.transparentAccent(0.08),
    modalOverlayBackgroundColor: helpers.transparentBackground(0.08),
    oddRowBackgroundColor: helpers.ref('backgroundColor'),
    borderRadius: '4px',
    wrapperBorderRadius: '8px',
    cellWidgetSpacing: helpers.calc('gridSize * 1.5'),
    rowGroupIndentSize: helpers.calc('cellWidgetSpacing + iconSize'),
    valueChangeDeltaUpColor: '#43a047',
    valueChangeDeltaDownColor: '#e53935',
    valueChangeValueHighlightBackgroundColor: '#16a08580',
    gridSize: '8px',
    cellHorizontalPadding: helpers.calc('gridSize * 2'),
  },
  css: [resetCssImport, gridBordersCssImport, gridLayoutCssImport],
});

import colorsCssImport from './css/colors/colors.css?inline';

export const colors = definePart<ColorsParam>({
  partId: 'colors',
  presets: {
    light: {},
    dark: {
      backgroundColor: '#1f2836',
      foregroundColor: '#FFF',
    },
  },
  defaults: {
    colorsPreset: null,
    backgroundColor: '#FFF',
    foregroundColor: '#181d1f',
    accentColor: '#2196f3',
    borderColor: helpers.transparentForeground(0.15),
    chromeBackgroundColor: helpers.transparentForeground(0.02),
    dataColor: helpers.ref('foregroundColor'),
    rowBorderColor: helpers.ref('borderColor'),
  },
  css: [colorsCssImport],
});

import bordersAboveFootersCssImport from './css/borders/borders-above-footers.css?inline';
import bordersBelowHeadersCssImport from './css/borders/borders-below-headers.css?inline';
import bordersBetweenColumnsCssImport from './css/borders/borders-between-columns.css?inline';
import bordersBetweenRowsCssImport from './css/borders/borders-between-rows.css?inline';
import bordersOutsideCssImport from './css/borders/borders-outside.css?inline';
import bordersPinnedColumnsCssImport from './css/borders/borders-pinned-columns.css?inline';
import bordersPinnedRowsCssImport from './css/borders/borders-pinned-rows.css?inline';
import bordersSidePanelsCssImport from './css/borders/borders-side-panels.css?inline';

export const borders = definePart<BordersParam>({
  partId: 'borders',
  presets: {
    horizontal: {
      bordersOutside: false,
      bordersSidePanels: false,
    },
    default: {},
    full: {
      bordersBetweenColumns: true,
    },
  },
  defaults: {
    bordersPreset: null,
    bordersOutside: true,
    bordersBelowHeaders: true,
    bordersAboveFooters: true,
    bordersBetweenRows: true,
    bordersBetweenColumns: false,
    bordersPinnedRows: true,
    bordersPinnedColumns: true,
    bordersSidePanels: true,
  },
  conditionalCss: {
    bordersAboveFooters: bordersAboveFootersCssImport,
    bordersBelowHeaders: bordersBelowHeadersCssImport,
    bordersBetweenColumns: bordersBetweenColumnsCssImport,
    bordersBetweenRows: bordersBetweenRowsCssImport,
    bordersOutside: bordersOutsideCssImport,
    bordersPinnedColumns: bordersPinnedColumnsCssImport,
    bordersPinnedRows: bordersPinnedRowsCssImport,
    bordersSidePanels: bordersSidePanelsCssImport,
  },
});

import quartzIconsCssImport from './css/quartz-icons/quartz-icons.css?inline';
import quartzIconsEmbeddedTsImport from './css/quartz-icons/quartz-icons-embedded';
import quartzIconsFragmentsImport from './css/quartz-icons/quartz-icons-fragments';

export const quartzIcons = definePart<QuartzIconsParam>({
  partId: 'quartz-icons',
  presets: {
    light: {
      iconStrokeWidth: '1px',
    },
    regular: {},
    bold: {
      iconStrokeWidth: '2px',
    },
  },
  defaults: {
    quartzIconsPreset: null,
    iconSize: '16px',
    iconStrokeWidth: '1.5px',
  },
  css: [quartzIconsCssImport, quartzIconsEmbeddedTsImport],
  icons: quartzIconsFragmentsImport,
});

export type VariableTypes = {
  /**
   * Style of the border around range selections.
   *
   * A CSS border-style value e.g. "solid" or "dashed".
   *
   * @default "solid"
   */
  rangeSelectionBorderStyle: BorderStyle;

  /**
   * The color used for borders around range selections. The selection background defaults to a semi-transparent version of this colour.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("accentColor")
   */
  rangeSelectionBorderColor: string;

  /**
   * Background colour of selected cell ranges. Choosing a semi-transparent colour ensure that multiple overlapping ranges look correct.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.2)
   */
  rangeSelectionBackgroundColor: string;

  /**
   * Background colour for cells that provide data to the current range chart
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#0058FF1A"
   */
  rangeSelectionChartBackgroundColor: string;

  /**
   * Background colour for cells that provide categories to the current range chart
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#00FF841A"
   */
  rangeSelectionChartCategoryBackgroundColor: string;

  /**
   * Background colour to briefly apply to a cell range when the user copies from or pastes into it.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.5)
   */
  rangeSelectionHighlightColor: string;

  /**
   * Background color when hovering over rows in the grid and in dropdown menus. Set to `transparent` to disable the hover effect. Note: if you want a rollover on one but not the other, use CSS selectors instead of this property.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.12)
   */
  rowHoverColor: string;

  /**
   * Background color when hovering over columns in the grid
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.05)
   */
  columnHoverColor: string;

  /**
   * Background color of selected rows in the grid and in dropdown menus.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentAccent(0.08)
   */
  selectedRowBackgroundColor: string;

  /**
   * Background color of the overlay shown over the grid e.g. a data loading indicator.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentBackground(0.08)
   */
  modalOverlayBackgroundColor: string;

  /**
   * Background colour applied to every other row
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("backgroundColor")
   */
  oddRowBackgroundColor: string;

  /**
   * Border radius applied to many elements such as menus, dialogs and form widgets.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "4px"
   */
  borderRadius: string;

  /**
   * Border radius applied to the outermost container around the grid.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "8px"
   */
  wrapperBorderRadius: string;

  /**
   * Horizontal spacing between widgets inside cells (e.g. row group expand buttons and row selection checkboxes).
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize * 1.5")
   */
  cellWidgetSpacing: string;

  /**
   * The indentation applied to each level of row grouping - deep rows are indented by a multiple of this value.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("cellWidgetSpacing + iconSize")
   */
  rowGroupIndentSize: string;

  /**
   * Colour to temporarily apply to cell data when its value increases in an agAnimateShowChangeCellRenderer cell
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#43a047"
   */
  valueChangeDeltaUpColor: string;

  /**
   * Colour to temporarily apply to cell data when its value decreases in an agAnimateShowChangeCellRenderer cell
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#e53935"
   */
  valueChangeDeltaDownColor: string;

  /**
   * Colour to apply when a cell value changes and enableCellChangeFlash is enabled
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#16a08580"
   */
  valueChangeValueHighlightBackgroundColor: string;

  /**
   * Control how tightly data and UI elements are packed together. All padding and spacing in the grid is defined as a multiple of the grid size, so increasing it will make most components larger by increasing their internal white space while leaving the size of text and icons unchanged.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "8px"
   */
  gridSize: string;

  /**
   * Colour to apply when a cell value changes and enableCellChangeFlash is enabled
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default calc("gridSize * 2")
   */
  cellHorizontalPadding: string;

  /**
   * Use one of the built-in sets of preset colors values. Available presets are: "light", "dark".
   *
   * Setting a preset provides default values for other properties that you can then override if required.
   *
   * @default null
   */
  colorsPreset: ColorsPreset | null;

  /**
   * Background colour of the grid. The default is white - if you override this, ensure that there is enough contrast between the foreground and background.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#FFF"
   */
  backgroundColor: string;

  /**
   * Foreground colour of the grid, and default text colour. The default is black - if you override this, ensure that there is enough contrast between the foreground and background.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#181d1f"
   */
  foregroundColor: string;

  /**
   * The 'brand colour' for the grid, used wherever a non-neutral colour is required. Selections, focus outlines and checkboxes use the accent colour by default.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default "#2196f3"
   */
  accentColor: string;

  /**
   * Default colour for borders.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.15)
   */
  borderColor: string;

  /**
   * Background colour for non-data areas of the grid. Headers, tool panels and menus use this colour by default.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default transparentForeground(0.02)
   */
  chromeBackgroundColor: string;

  /**
   * Colour of text in grid cells.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("foregroundColor")
   */
  dataColor: string;

  /**
   * Colour of the border between grid rows.
   *
   * Any valid CSS color expression is accepted. A JavaScript number between 0 and 1 is interpreted as a semi-transparent foreground color.
   *
   * @default ref("borderColor")
   */
  rowBorderColor: string;

  /**
   * Use one of the built-in sets of preset borders values. Available presets are: "horizontal", "default", "full".
   *
   * Setting a preset provides default values for other properties that you can then override if required.
   *
   * @default null
   */
  bordersPreset: BordersPreset | null;

  /**
   * Borders around the outside of the grid
   *
   * @default true
   */
  bordersOutside: boolean;

  /**
   * Borders between and below headers, including ordinary header rows and components that render within header rows such as the floating filter and advanced filter
   *
   * @default true
   */
  bordersBelowHeaders: boolean;

  /**
   * Horizontal borders above footer components like the pagination and status bars
   *
   * @default true
   */
  bordersAboveFooters: boolean;

  /**
   * Horizontal borders separating rows
   *
   * @default true
   */
  bordersBetweenRows: boolean;

  /**
   * Vertical borders separating columns
   *
   * @default false
   */
  bordersBetweenColumns: boolean;

  /**
   * Borders between the grid and rows that are pinned to the top or bottom
   *
   * @default true
   */
  bordersPinnedRows: boolean;

  /**
   * Borders between the grid and columns that are pinned to the left or right
   *
   * @default true
   */
  bordersPinnedColumns: boolean;

  /**
   * Borders between the grid and side panels including the column and filter tool bars, and chart settings
   *
   * @default true
   */
  bordersSidePanels: boolean;

  /**
   * Use one of the built-in sets of preset quartz-icons values. Available presets are: "light", "regular", "bold".
   *
   * Setting a preset provides default values for other properties that you can then override if required.
   *
   * @default null
   */
  quartzIconsPreset: QuartzIconsPreset | null;

  /**
   * Width & height of the icon image.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "16px"
   */
  iconSize: string;

  /**
   * Width in pixels of lines making up the icon.
   *
   * A CSS number value with length units, e.g. "1px" or "2em". If a JavaScript number is provided, its units are assumed to be 'px'.
   *
   * @default "1.5px"
   */
  iconStrokeWidth: string;
};

export const allParts = [core, colors, borders, quartzIcons];
