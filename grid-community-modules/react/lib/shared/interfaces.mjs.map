{"version":3,"sources":["shared/interfaces.ts"],"names":[],"mappings":";AAmBA,6IAA6I;AAC7I,MAAM,CAAN,IAAY,2BAIX;AAJD,WAAY,2BAA2B;IACnC,8DAA+B,CAAA;IAC/B,gEAAiC,CAAA;IACjC,kDAAmB,CAAA;AACvB,CAAC,EAJW,2BAA2B,KAA3B,2BAA2B,QAItC","file":"interfaces.mjs","sourcesContent":["import {\n    ColumnApi,\n    GridApi,\n    GridOptions,\n    ICellEditor,\n    ICellRenderer,\n    IDate,\n    IFilter,\n    IFloatingFilter,\n    IHeader,\n    IHeaderGroup,\n    ILoadingOverlay,\n    IMenuItem,\n    INoRowsOverlay,\n    IStatusPanel,\n    IToolPanel,\n    Module\n} from '@ag-grid-community/core';\n\n/** @deprecated v29 ChangeDetectionStrategyType has been deprecated. IdentityCheck will always be used now for a more consistent approach. */\nexport enum ChangeDetectionStrategyType {\n    IdentityCheck = 'IdentityCheck',\n    DeepValueCheck = 'DeepValueCheck',\n    NoCheck = 'NoCheck'\n}\n\nexport interface SharedProps<TData = any> extends GridOptions<TData> {\n    gridOptions?: GridOptions<TData>;\n    /**\n     * Used to register AG Grid Modules directly with this instance of the grid. \n     * See [Providing Modules To Individual Grids](https://www.ag-grid.com/react-data-grid/modules/#providing-modules-to-individual-grids) for more information. \n     */\n    modules?: Module[];\n    containerStyle?: any;\n    className?: string;\n    setGridApi?: (gridApi: GridApi<TData>, columnApi: ColumnApi) => void;\n    componentWrappingElement?: string; // only used when putting React into JS\n    maxComponentCreationTimeMs?: number; // only used when putting React into JS\n    children?: any;\n}\n\n/** @deprecated v31.1 Use `AgGridReactProps` instead. */\nexport interface AgReactUiProps<TData = any> extends SharedProps<TData> {\n}\n\nexport interface AgGridReactProps<TData = any> extends SharedProps<TData> {\n    /** @deprecated v31.1 No longer used. */\n    disableStaticMarkup?: boolean;\n    /** @deprecated v31.1 No longer used. */\n    legacyComponentRendering?: boolean,\n}\n\nexport interface AgReactComponent {\n    /** @deprecated v31.1 Apply styling directly to `.ag-react-container` if needed */\n    getReactContainerStyle?: () => {};\n    /** @deprecated v31.1 Apply styling directly to `.ag-react-container` if needed */\n    getReactContainerClasses?: () => string[];\n}\n\n/** @deprecated v31.1 Use `IHeaderGroup` instead. */\nexport interface IHeaderGroupReactComp extends IHeaderGroup, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `IHeader` instead. */\nexport interface IHeaderReactComp extends IHeader, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `IDate` instead. */\nexport interface IDateReactComp extends IDate, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `IFilter` instead. */\nexport interface IFilterReactComp extends IFilter, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `IFloatingFilter` instead. */\nexport interface IFloatingFilterReactComp extends IFloatingFilter, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `ICellRenderer` instead. */\nexport interface ICellRendererReactComp extends ICellRenderer, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `ICellEditor` instead. */\nexport interface ICellEditorReactComp extends ICellEditor, AgReactComponent {\n}\n\n/** @deprecated v31.1 No interface required. */\nexport interface ILoadingCellRendererReactComp extends AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `ILoadingOverlay` instead. */\nexport interface ILoadingOverlayReactComp extends ILoadingOverlay, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `INoRowsOverlay` instead. */\nexport interface INoRowsOverlayReactComp extends INoRowsOverlay, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `IStatusPanel` instead. */\nexport interface IStatusPanelReactComp extends IStatusPanel, AgReactComponent {\n}\n\n/** @deprecated v31.1 Use `IToolPanel` instead. */\nexport interface IToolPanelReactComp extends IToolPanel, AgReactComponent {\n}\n\n/** @deprecated v31.1 No interface required. */\nexport interface ITooltipReactComp extends AgReactComponent {\n}\n"]}