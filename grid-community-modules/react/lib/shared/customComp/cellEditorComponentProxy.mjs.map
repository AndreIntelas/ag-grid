{"version":3,"sources":["shared/customComp/cellEditorComponentProxy.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAkC,MAAM,yBAAyB,CAAC;AACpF,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAC;AAG9D,MAAM,OAAO,wBAAwB;IASjC,YAAoB,gBAAmC,EAAmB,YAAwB;QAA9E,qBAAgB,GAAhB,gBAAgB,CAAmB;QAAmB,iBAAY,GAAZ,YAAY,CAAY;QAL1F,oBAAe,GAAoB,IAAI,SAAS,CAAC,OAAO,CAAC,EAAE;YAC/D,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC;QAC1C,CAAC,CAAC,CAAC;QACc,kBAAa,GAAG,CAAC,KAAU,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAGrE,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;IACxC,CAAC;IAEM,QAAQ;QACX,uCACO,IAAI,CAAC,gBAAgB,KACxB,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,KAAK,EACzC,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,aAAa,EAAE,IAAI,CAAC,aAAa,IACnC;IACN,CAAC;IAEM,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAEM,OAAO,CAAC,MAAyB;QACpC,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC;QAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IAEM,UAAU,CAAC,OAAkC;QAChD,kBAAkB,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAEM,WAAW;QACd,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACnE,CAAC;IAEM,MAAM,CAAC,iBAAsB;;QAChC,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,MAAA,IAAI,CAAC,sBAAsB,oDAAI,CAAC;QAChC,IAAI,CAAC,sBAAsB,GAAG,SAAS,CAAC;IAC5C,CAAC;IAEO,kBAAkB;QACtB,OAAO,CAAC,SAAS,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,SAAS,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC;IACjI,CAAC;IAEO,WAAW,CAAC,KAAU;QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;CACJ","file":"cellEditorComponentProxy.mjs","sourcesContent":["import { AgPromise, ICellEditor, ICellEditorParams } from \"@ag-grid-community/core\";\nimport { addOptionalMethods } from \"./customComponentWrapper\";\nimport { CustomCellEditorCallbacks, CustomCellEditorProps } from \"./interfaces\";\n\nexport class CellEditorComponentProxy implements ICellEditor {\n    private value: any;\n    private componentInstance?: any;\n    private resolveInstanceCreated?: () => void;\n    private instanceCreated: AgPromise<void> = new AgPromise(resolve => {\n        this.resolveInstanceCreated = resolve;\n    });\n    private readonly onValueChange = (value: any) => this.updateValue(value);\n\n    constructor(private cellEditorParams: ICellEditorParams, private readonly refreshProps: () => void) {\n        this.value = cellEditorParams.value;\n    }\n\n    public getProps(): CustomCellEditorProps {\n        return {\n            ...this.cellEditorParams,\n            initialValue: this.cellEditorParams.value,\n            value: this.value,\n            onValueChange: this.onValueChange\n        };\n    }\n\n    public getValue(): any {\n        return this.value;\n    }\n\n    public refresh(params: ICellEditorParams): void {\n        this.cellEditorParams = params;\n        this.refreshProps();\n    }\n\n    public setMethods(methods: CustomCellEditorCallbacks): void {\n        addOptionalMethods(this.getOptionalMethods(), methods, this);\n    }\n\n    public getInstance(): AgPromise<any> {\n        return this.instanceCreated.then(() => this.componentInstance);\n    }\n\n    public setRef(componentInstance: any): void {\n        this.componentInstance = componentInstance;\n        this.resolveInstanceCreated?.();\n        this.resolveInstanceCreated = undefined;\n    }\n\n    private getOptionalMethods(): string[] {\n        return ['isPopup', 'isCancelBeforeStart', 'isCancelAfterEnd', 'getPopupPosition', 'focusIn', 'focusOut', 'afterGuiAttached'];\n    }\n\n    private updateValue(value: any): void {\n        this.value = value;\n        this.refreshProps();\n    }\n}\n"]}