{"version":3,"sources":["shared/customComp/interfaces.ts"],"names":[],"mappings":";AAwBA,OAAO,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAyHhD,gBAAgB;AAEhB,SAAS,sBAAsB,CAAI,OAAU;IACzC,MAAM,EAAE,UAAU,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IACjD,UAAU,CAAC,OAAO,CAAC,CAAC;AACxB,CAAC;AAED,sFAAsF;AACtF,MAAM,UAAU,iBAAiB,CAAC,SAAoC;IAClE,sBAAsB,CAAC,SAAS,CAAC,CAAC;AACtC,CAAC;AAED,+EAA+E;AAC/E,MAAM,UAAU,WAAW,CAAC,SAA8B;IACtD,OAAO,sBAAsB,CAAC,SAAS,CAAC,CAAC;AAC7C,CAAC;AAED,iFAAiF;AACjF,MAAM,UAAU,aAAa,CAAC,SAAgC;IAC1D,OAAO,sBAAsB,CAAC,SAAS,CAAC,CAAC;AAC7C,CAAC;AAED,0FAA0F;AAC1F,MAAM,UAAU,qBAAqB,CAAC,SAAwC;IAC1E,sBAAsB,CAAC,SAAS,CAAC,CAAC;AACtC,CAAC;AAED,oFAAoF;AACpF,MAAM,UAAU,eAAe,CAAC,SAAkC;IAC9D,sBAAsB,CAAC,SAAS,CAAC,CAAC;AACtC,CAAC","file":"interfaces.mjs","sourcesContent":["import {\n    BaseCellEditor,\n    BaseDate,\n    BaseDateParams,\n    BaseFilter,\n    BaseFilterParams,\n    BaseFloatingFilter,\n    BaseMenuItem,\n    BaseMenuItemParams,\n    BaseToolPanelParams,\n    ICellEditorParams,\n    ICellRendererParams,\n    IDetailCellRendererParams,\n    IFilter,\n    IFloatingFilterParams,\n    IGroupCellRendererParams,\n    IHeaderGroupParams,\n    IHeaderParams,\n    ILoadingCellRendererParams,\n    ILoadingOverlayParams,\n    INoRowsOverlayParams,\n    IStatusPanelParams,\n    ITooltipParams\n} from \"@ag-grid-community/core\";\nimport { useContext } from \"react\";\nimport { CustomContext } from \"./customContext\";\n\n// *** Props ***\n\n/** Props provided to custom cell editor components */\nexport interface CustomCellEditorProps<TData = any, TValue = any, TContext = any> extends ICellEditorParams<TData, TValue, TContext> {\n    /** The value in the cell when editing started. */\n    initialValue: TValue | null | undefined;\n    /** The current value for the editor. */\n    value: TValue | null | undefined;\n    /** Callback that should be called every time the value in the editor changes. */\n    onValueChange: (value: TValue | null | undefined) => void;\n}\n\n/** Props provided to custom date components */\nexport interface CustomDateProps<TData = any, TContext = any> extends BaseDateParams<TData, TContext> {\n    /** The current date for the component. */\n    date: Date | null,\n    /** Callback that should be called every time the date in the component changes. */\n    onDateChange: (date: Date | null) => void,\n}\n\n/** Props provided to custom filter components */\nexport interface CustomFilterProps<TData = any, TContext = any, TModel = any> extends BaseFilterParams<TData, TContext> {\n    /** The current filter model for the component. */\n    model: TModel | null,\n    /** Callback that should be called every time the model in the component changes. */\n    onModelChange: (model: TModel | null) => void,\n    /**\n     * Callback that can be optionally called every time the filter UI changes.\n     * The grid will respond with emitting a FilterModifiedEvent.\n     * Apart from emitting the event, the grid takes no further action.\n     */\n    onUiChange: () => void,\n}\n\n/** Props provided to custom floating filter components */\nexport interface CustomFloatingFilterProps<P = IFilter, TData = any, TContext = any, TModel = any> extends IFloatingFilterParams<P, TData, TContext> {\n    /** The current filter model for the component. */\n    model: TModel | null;\n    /** Callback that should be called every time the model in the component changes. */\n    onModelChange: (model: TModel | null) => void;\n}\n\n/** Props provided to custom tool panel components */\nexport interface CustomToolPanelProps<TData = any, TContext = any, TState = any> extends BaseToolPanelParams<TData, TContext, TState> {\n    /**\n     * The current state for the component (used in grid state).\n     * Initially set to the same value as `initialState`\n     */\n    state: TState | undefined,\n    /**\n     * If using grid state, callback that should be called every time the state in the component changes.\n     * If not using grid state, not required.\n     */\n    onStateChange: (model: TState | undefined) => void;\n}\n\n/** Props provided to custom menu item components */\nexport interface CustomMenuItemProps<TData = any, TContext = any> extends BaseMenuItemParams<TData, TContext> {\n    /** The active status of the item (is it currently hovered with the mouse, or navigated to via the keyboard). */\n    active: boolean;\n    /** If the item is a sub menu, whether it is currently opened or closed. */\n    expanded: boolean;\n    /** Callback that should be called every time the active status is updated (if providing custom behaviour). */\n    onActiveChange: (active: boolean) => void;\n}\n\n/** Props provided to custom loading overlay component */\nexport interface CustomLoadingOverlayProps<TData = any, TContext = any> extends ILoadingOverlayParams<TData, TContext> {}\n\n/** Props provided to custom no rows overlay component */\nexport interface CustomNoRowsOverlayProps<TData = any, TContext = any> extends INoRowsOverlayParams<TData, TContext> {}\n\n/** Props provided to custom status panel components */\nexport interface CustomStatusPanelProps<TData = any, TContext = any> extends IStatusPanelParams<TData, TContext> {}\n\n/** Props provided to custom cell renderer components */\nexport interface CustomCellRendererProps<TData = any, TValue = any, TContext = any> extends ICellRendererParams<TData, TValue, TContext> {}\n\n/** Props provided to custom detail cell renderer components */\nexport interface CustomDetailCellRendererProps<TData = any, TDetail = any> extends IDetailCellRendererParams<TData, TDetail> {}\n\n/** Props provided to custom group cell renderer components */\nexport interface CustomGroupCellRendererProps<TData = any, TValue = any> extends IGroupCellRendererParams<TData, TValue> {}\n\n/** Props provided to custom header components */\nexport interface CustomHeaderProps<TData = any, TContext = any> extends IHeaderParams<TData, TContext> {}\n\n/** Props provided to custom header group components */\nexport interface CustomHeaderGroupProps<TData = any, TContext = any> extends IHeaderGroupParams<TData, TContext> {}\n\n/** Props provided to custom loading cell renderer components */\nexport interface CustomLoadingCellRendererProps<TData = any, TContext = any> extends ILoadingCellRendererParams<TData, TContext> {}\n\n/** Props provided to custom tooltip components */\nexport interface CustomTooltipProps<TData = any, TValue = any, TContext = any> extends ITooltipParams<TData, TValue, TContext> {}\n\n// *** Callbacks ***\n\n/** Callbacks for custom cell editor components */\nexport interface CustomCellEditorCallbacks extends BaseCellEditor {\n    /** @deprecated v27 Use `colDef.cellEditorPopup` instead. */\n    isPopup?(): boolean;\n    \n    /** @deprecated v27 Use `colDef.cellEditorPopupPosition` instead. */\n    getPopupPosition?(): 'over' | 'under' | undefined;\n}\n\n/** Callbacks for custom date components */\nexport interface CustomDateCallbacks extends BaseDate {}\n\n/** Callbacks for custom filter components */\nexport interface CustomFilterCallbacks extends BaseFilter {}\n\n/** Callbacks for custom floating filter components */\nexport interface CustomFloatingFilterCallbacks extends BaseFloatingFilter {}\n\n/** Callbacks for custom menu item components */\nexport interface CustomMenuItemCallbacks extends BaseMenuItem {}\n\n// *** Hooks ***\n\nfunction useGridCustomComponent<M>(methods: M): void {\n    const { setMethods } = useContext(CustomContext);\n    setMethods(methods);\n}\n\n/** Hook to allow custom cell editor component callbacks to be provided to the grid */\nexport function useGridCellEditor(callbacks: CustomCellEditorCallbacks): void {\n    useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom date component callbacks to be provided to the grid */\nexport function useGridDate(callbacks: CustomDateCallbacks): void {\n    return useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom filter component callbacks to be provided to the grid */\nexport function useGridFilter(callbacks: CustomFilterCallbacks): void {\n    return useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom floating filter component callbacks to be provided to the grid */\nexport function useGridFloatingFilter(callbacks: CustomFloatingFilterCallbacks): void {\n    useGridCustomComponent(callbacks);\n}\n\n/** Hook to allow custom menu item component callbacks to be provided to the grid */\nexport function useGridMenuItem(callbacks: CustomMenuItemCallbacks): void {\n    useGridCustomComponent(callbacks);\n}\n"]}