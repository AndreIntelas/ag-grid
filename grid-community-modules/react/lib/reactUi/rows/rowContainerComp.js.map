{"version":3,"sources":["reactUi/rows/rowContainerComp.tsx"],"names":[],"mappings":"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","file":"rowContainerComp.js","sourcesContent":["import { getRowContainerTypeForName, IRowContainerComp, RowContainerCtrl, RowContainerName, RowCtrl } from '@ag-grid-community/core';\nimport React, { useMemo, useRef, useState, memo, useContext } from 'react';\nimport { classesList, agFlushSync } from '../utils';\nimport useReactCommentEffect from '../reactComment';\nimport RowComp from './rowComp';\nimport { BeansContext } from '../beansContext';\nimport { useLayoutEffectOnce } from '../useEffectOnce';\n\nconst RowContainerComp = (params: {name: RowContainerName}) => {\n\n    const {context} = useContext(BeansContext);\n\n    const [rowCtrlsOrdered, setRowCtrlsOrdered] = useState<RowCtrl[]>([]);\n\n    const { name } = params;\n    const containerType = useMemo(() => getRowContainerTypeForName(name), [name]);\n\n    const eWrapper = useRef<HTMLDivElement>(null);\n    const eViewport = useRef<HTMLDivElement>(null);\n    const eContainer = useRef<HTMLDivElement>(null);\n\n    const rowCtrlsRef = useRef<RowCtrl[]>([]);\n    const domOrderRef = useRef<boolean>(false);\n\n    const cssClasses = useMemo(() => RowContainerCtrl.getRowContainerCssClasses(name), [name]);\n    const wrapperClasses = useMemo( ()=> classesList(cssClasses.wrapper), []);\n    const viewportClasses = useMemo( ()=> classesList(cssClasses.viewport), []);\n    const containerClasses = useMemo( ()=> classesList(cssClasses.container), []);\n\n    // no need to useMemo for boolean types\n    const template1 = name === RowContainerName.CENTER;\n    const template2 = name === RowContainerName.TOP_CENTER \n                    || name === RowContainerName.BOTTOM_CENTER \n                    || name === RowContainerName.STICKY_TOP_CENTER;\n    const template3 = !template1 && !template2;\n\n    const topLevelRef = template1 ? eWrapper : template2 ? eViewport : eContainer;\n\n    useReactCommentEffect(' AG Row Container ' + name + ' ', topLevelRef);\n\n    // if domOrder=true, then we just copy rowCtrls into rowCtrlsOrdered observing order,\n    // however if false, then we need to keep the order as they are in the dom, otherwise rowAnimation breaks\n    function updateRowCtrlsOrdered(useFlushSync: boolean) {\n\n        agFlushSync(useFlushSync, () => {\n            setRowCtrlsOrdered(prev => {\n                const rowCtrls = rowCtrlsRef.current;\n\n                if (domOrderRef.current) {\n                    return rowCtrls;\n                }\n                // if dom order not important, we don't want to change the order\n                // of the elements in the dom, as this would break transition styles\n                const oldRows = prev.filter(r => rowCtrls.indexOf(r) >= 0);\n                const newRows = rowCtrls.filter(r => oldRows.indexOf(r) < 0);\n                return [...oldRows, ...newRows];\n            });\n\n        })\n\n\n    }\n\n    useLayoutEffectOnce(() => {\n        const beansToDestroy: any[] = [];\n\n        const compProxy: IRowContainerComp = {\n            setViewportHeight: (height: string) => eViewport.current!.style.height = height,\n            setRowCtrls: (rowCtrls, useFlushSync) => {\n                if(rowCtrlsRef.current !== rowCtrls){\n                    const useFlush = useFlushSync && rowCtrlsRef.current.length > 0 && rowCtrls.length > 0;\n                    rowCtrlsRef.current = rowCtrls;\n                    updateRowCtrlsOrdered(useFlush);\n                }\n            },\n            setDomOrder: domOrder => {\n                if(domOrderRef.current != domOrder){\n                    domOrderRef.current = domOrder;\n                    updateRowCtrlsOrdered(false);\n                }\n            },\n            setContainerWidth: width => eContainer.current!.style.width = width\n        };\n\n        const ctrl = context.createBean(new RowContainerCtrl(name));\n        beansToDestroy.push(ctrl);\n\n        ctrl.setComp(compProxy, eContainer.current!, eViewport.current!, eWrapper.current!);\n\n        return () => {\n            context.destroyBeans(beansToDestroy);\n        };\n\n    });\n\n    const buildContainer = () => (\n        <div\n            className={ containerClasses }\n            ref={ eContainer }\n            role={ rowCtrlsOrdered.length ? \"rowgroup\" : \"presentation\" }\n        >\n            {\n                rowCtrlsOrdered.map(rowCtrl =>\n                    <RowComp rowCtrl={ rowCtrl } containerType={ containerType } key={ rowCtrl.getInstanceId() }></RowComp>\n                )\n            }\n        </div>\n    );\n\n    return (\n        <>\n            {\n                template1 &&\n                <div className={ wrapperClasses } ref={ eWrapper } role=\"presentation\">\n                    <div className={viewportClasses} ref={eViewport} role=\"presentation\">\n                        { buildContainer() }\n                    </div>\n                </div>\n            }\n            {\n                template2 &&\n                <div className={viewportClasses} ref={eViewport} role=\"presentation\">\n                    { buildContainer() }\n                </div>\n            }\n            {\n                template3 && buildContainer()\n            }\n        </>\n    );\n};\n\nexport default memo(RowContainerComp);\n"]}