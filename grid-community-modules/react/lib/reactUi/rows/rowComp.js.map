{"version":3,"sources":["reactUi/rows/rowComp.tsx"],"names":[],"mappings":"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","file":"rowComp.js","sourcesContent":["import React, { useEffect, useRef, useState, useMemo, memo, useContext, useLayoutEffect } from 'react';\nimport { CellCtrl, RowContainerType, IRowComp, RowCtrl, UserCompDetails, ICellRenderer, CssClassManager, RowStyle } from '@ag-grid-community/core';\nimport { showJsComp } from '../jsComp';\nimport { isComponentStateless, agFlushSync } from '../utils';\nimport { BeansContext } from '../beansContext';\nimport CellComp from '../cells/cellComp';\nimport { useLayoutEffectOnce } from '../useEffectOnce';\n\ninterface CellCtrls {\n    list: CellCtrl[],\n    instanceIdMap: Map<string, CellCtrl>\n}\n\nconst maintainOrderOnColumns = (prev: CellCtrls, next: CellCtrl[], domOrder: boolean): CellCtrls => {\n    if (domOrder) {\n        const res: CellCtrls = { list: next, instanceIdMap: new Map() };\n        next.forEach(c => res.instanceIdMap.set(c.getInstanceId(), c));\n\n        return res;\n    }\n\n    // if dom order not important, we don't want to change the order\n    // of the elements in the dom, as this would break transition styles\n    const oldCellCtrls: CellCtrl[] = [];\n    const newCellCtrls: CellCtrl[] = [];\n    const newInstanceIdMap: Map<string, CellCtrl> = new Map();\n    const tempMap: Map<string, CellCtrl> = new Map();\n\n    next.forEach(c => tempMap.set(c.getInstanceId(), c));\n\n    prev.list.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (tempMap.has(instanceId)) {\n            oldCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    next.forEach(c => {\n        const instanceId = c.getInstanceId();\n        if (!prev.instanceIdMap.has(instanceId)) {\n            newCellCtrls.push(c);\n            newInstanceIdMap.set(instanceId, c);\n        }\n    });\n\n    const res: CellCtrls = {\n        list: [...oldCellCtrls, ...newCellCtrls],\n        instanceIdMap: newInstanceIdMap\n    };\n\n    return res;\n}\n\nconst RowComp = (params: {rowCtrl: RowCtrl, containerType: RowContainerType}) => {\n\n    const { context } = useContext(BeansContext);\n    const { rowCtrl, containerType } = params;\n\n    const [rowIndex, setRowIndex] = useState<string>();\n    const [rowId, setRowId] = useState<string>();\n    const [role, setRole] = useState<string>();\n    const [rowBusinessKey, setRowBusinessKey] = useState<string>();\n    const [tabIndex, setTabIndex] = useState<number>();\n    const [userStyles, setUserStyles] = useState<RowStyle>();\n    const [cellCtrls, setCellCtrls] = useState<CellCtrls>({ list: [], instanceIdMap: new Map() });\n    const [fullWidthCompDetails, setFullWidthCompDetails] = useState<UserCompDetails>();\n    const [domOrder, setDomOrder] = useState<boolean>(false);\n\n    // these styles have initial values, so element is placed into the DOM with them,\n    // rather than an transition getting applied.\n    const [top, setTop] = useState<string | undefined>(rowCtrl.getInitialRowTop(containerType));\n    const [transform, setTransform] = useState<string | undefined>(rowCtrl.getInitialTransform(containerType));\n\n    const eGui = useRef<HTMLDivElement>(null);\n    const fullWidthCompRef = useRef<ICellRenderer>();\n\n    const autoHeightSetup = useRef<boolean>(false);\n    const [autoHeightSetupAttempt, setAutoHeightSetupAttempt] = useState<number>(0);\n\n    // puts autoHeight onto full with detail rows. this needs trickery, as we need\n    // the HTMLElement for the provided Detail Cell Renderer, however the Detail Cell Renderer\n    // could be a stateless React Func Comp which won't work with useRef, so we need\n    // to poll (we limit to 10) looking for the Detail HTMLElement (which will be the only\n    // child) after the fullWidthCompDetails is set.\n    useEffect(() => {\n        if (autoHeightSetup.current) { return; }\n        if (!fullWidthCompDetails) { return; }\n        if (autoHeightSetupAttempt>10) { return; }\n\n        const eChild = eGui.current?.firstChild as HTMLElement;\n        if (eChild) {\n            rowCtrl.setupDetailRowAutoHeight(eChild);\n            autoHeightSetup.current = true;\n        } else {\n            setAutoHeightSetupAttempt( prev => prev + 1);\n        }\n\n    }, [fullWidthCompDetails, autoHeightSetupAttempt]);\n\n    const cssClassManager = useMemo(() => new CssClassManager(() => eGui.current!), []);\n\n    // we use layout effect here as we want to synchronously process setComp and it's side effects\n    // to ensure the component is fully initialised prior to the first browser paint. See AG-7018.\n    useLayoutEffectOnce(() => {\n        // because React is asynchronous, it's possible the RowCtrl is no longer a valid RowCtrl. This can\n        // happen if user calls two API methods one after the other, with the second API invalidating the rows\n        // the first call created. Thus the rows for the first call could still get created even though no longer needed.\n        if (!rowCtrl.isAlive()) {  return; }\n        const compProxy: IRowComp = {\n            // the rowTop is managed by state, instead of direct style manipulation by rowCtrl (like all the other styles)\n            // as we need to have an initial value when it's placed into he DOM for the first time, for animation to work.\n            setTop: value => setTop(value),\n            setTransform: value => setTransform(value),\n\n            // i found using React for managing classes at the row level was to slow, as modifying classes caused a lot of\n            // React code to execute, so avoiding React for managing CSS Classes made the grid go much faster.\n            addOrRemoveCssClass: (name, on) => cssClassManager.addOrRemoveCssClass(name, on),\n\n            setDomOrder: domOrder => setDomOrder(domOrder),\n            setRowIndex: value => setRowIndex(value),\n            setRowId: value => setRowId(value),\n            setRowBusinessKey: value => setRowBusinessKey(value),\n            setTabIndex: value => setTabIndex(value),\n            setUserStyles: (styles: RowStyle) => setUserStyles(styles),\n            setRole: value => setRole(value),\n            // if we don't maintain the order, then cols will be ripped out and into the dom\n            // when cols reordered, which would stop the CSS transitions from working\n            setCellCtrls: (next, useFlushSync) => {\n                agFlushSync(useFlushSync, () => {\n                    setCellCtrls(prev => maintainOrderOnColumns(prev, next, domOrder));\n                });\n            },\n            showFullWidth: compDetails => setFullWidthCompDetails(compDetails),\n            getFullWidthCellRenderer: ()=> fullWidthCompRef.current,\n        };\n        rowCtrl.setComp(compProxy, eGui.current!, containerType);\n        return () => {\n            rowCtrl.unsetComp(containerType);\n        };\n    });\n\n    useLayoutEffect(() => showJsComp(fullWidthCompDetails, context, eGui.current!, fullWidthCompRef), [fullWidthCompDetails]);\n\n    const rowStyles = useMemo(() => {\n        const res = { top, transform };\n\n        Object.assign(res, userStyles);\n        return res;\n    }, [top, transform, userStyles]);\n\n    const showFullWidthFramework = fullWidthCompDetails && fullWidthCompDetails.componentFromFramework;\n    const showCells = cellCtrls != null;\n    \n    const reactFullWidthCellRendererStateless = useMemo(() => {\n        const res = fullWidthCompDetails?.componentFromFramework && isComponentStateless(fullWidthCompDetails.componentClass);\n        return !!res;\n    }, [fullWidthCompDetails]);\n\n    const showCellsJsx = () => cellCtrls.list.map(cellCtrl => (\n        <CellComp\n            cellCtrl={ cellCtrl }\n            editingRow={ rowCtrl.isEditing() }\n            printLayout={ rowCtrl.isPrintLayout() }\n            key={ cellCtrl.getInstanceId() }\n        />\n    ));\n\n    const showFullWidthFrameworkJsx = () => {\n        const FullWidthComp = fullWidthCompDetails!.componentClass;\n        return (\n            <>\n                {\n                    reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } />\n                }\n                {\n                    !reactFullWidthCellRendererStateless \n                    && <FullWidthComp  { ...fullWidthCompDetails!.params } ref={ fullWidthCompRef } />\n                }\n            </>\n        );\n    };\n\n    return (\n        <div\n            ref={ eGui }\n            role={ role }\n            style={ rowStyles }\n            row-index={ rowIndex }\n            row-id={ rowId }\n            row-business-key={ rowBusinessKey }\n            tabIndex={ tabIndex }\n        >\n            { showCells && showCellsJsx() }\n            { showFullWidthFramework && showFullWidthFrameworkJsx() }\n        </div>\n    );\n};\n\nexport default memo(RowComp);\n"]}