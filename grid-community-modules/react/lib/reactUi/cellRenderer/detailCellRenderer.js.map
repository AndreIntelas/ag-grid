{"version":3,"sources":["reactUi/cellRenderer/detailCellRenderer.tsx"],"names":[],"mappings":"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","file":"detailCellRenderer.js","sourcesContent":["import React, { useState, useMemo, useRef, useContext, useCallback, forwardRef, useImperativeHandle } from \"react\";\nimport { CssClasses } from \"../utils\";\nimport { IDetailCellRenderer, IDetailCellRendererCtrl, IDetailCellRendererParams, GridOptions, GridApi, ColumnApi } from \"@ag-grid-community/core\";\nimport { BeansContext } from \"../beansContext\";\nimport { AgGridReactUi } from \"../agGridReactUi\";\nimport { useEffectOnce, useLayoutEffectOnce } from \"../useEffectOnce\";\n\nconst DetailCellRenderer = (props: IDetailCellRendererParams, ref: any) => {\n\n    const { ctrlsFactory, context, gridOptionsService, resizeObserverService, clientSideRowModel, serverSideRowModel } = useContext(BeansContext);\n\n    const [cssClasses, setCssClasses] = useState<CssClasses>(new CssClasses());\n    const [gridCssClasses, setGridCssClasses] = useState<CssClasses>(new CssClasses());\n    const [detailGridOptions, setDetailGridOptions] = useState<GridOptions>();\n    const [detailRowData, setDetailRowData] = useState<any[]>();\n\n    const ctrlRef = useRef<IDetailCellRendererCtrl>();\n    const eGuiRef = useRef<HTMLDivElement>(null);\n\n    const topClassName = useMemo(() => cssClasses.toString() + ' ag-details-row', [cssClasses]);\n    const gridClassName = useMemo(() => gridCssClasses.toString() + ' ag-details-grid', [gridCssClasses]);\n\n    if (ref) {\n        useImperativeHandle(ref, () => ({\n            refresh() { return ctrlRef.current!.refresh(); }\n        }));\n    }\n    \n    useLayoutEffectOnce(() => {\n        if (props.template && typeof props.template === 'string') {\n            console.warn('AG Grid: detailCellRendererParams.template is not supported by React - this only works with frameworks that work against String templates. To change the template, please provide your own React Detail Cell Renderer.');\n        }\n    });\n\n    useLayoutEffectOnce(() => {\n        const compProxy: IDetailCellRenderer = {\n            addOrRemoveCssClass: (name: string, on: boolean) => setCssClasses(prev => prev.setClass(name, on)),\n            addOrRemoveDetailGridCssClass: (name: string, on: boolean) => setGridCssClasses(prev => prev.setClass(name, on)),\n            setDetailGrid: gridOptions => setDetailGridOptions(gridOptions),\n            setRowData: rowData => setDetailRowData(rowData),\n            getGui: () => eGuiRef.current!\n        };\n\n        const ctrl = ctrlsFactory.getInstance('detailCellRenderer') as IDetailCellRendererCtrl;\n        if (!ctrl) { return; } // should never happen, means master/detail module not loaded\n        context.createBean(ctrl);\n\n        ctrl.init(compProxy, props);\n\n        ctrlRef.current = ctrl;\n\n        let resizeObserverDestroyFunc: () => void;\n\n        if (gridOptionsService.is('detailRowAutoHeight')) {\n            const checkRowSizeFunc = () => {\n                // when disposed, current is null, so nothing to do, and the resize observer will\n                // be disposed of soon\n                if (eGuiRef.current==null) { return; }\n\n                const clientHeight = eGuiRef.current.clientHeight;\n\n                // if the UI is not ready, the height can be 0, which we ignore, as otherwise a flicker will occur\n                // as UI goes from the default height, to 0, then to the real height as UI becomes ready. this means\n                // it's not possible for have 0 as auto-height, however this is an improbable use case, as even an\n                // empty detail grid would still have some styling around it giving at least a few pixels.\n                if (clientHeight != null && clientHeight > 0) {\n                    // we do the update in a timeout, to make sure we are not calling from inside the grid\n                    // doing another update\n                    const updateRowHeightFunc = () => {\n                        props.node.setRowHeight(clientHeight);\n                        if (clientSideRowModel) {\n                            clientSideRowModel.onRowHeightChanged();\n                        } else if (serverSideRowModel) {\n                            serverSideRowModel.onRowHeightChanged();\n                        }\n                    };\n                    setTimeout(updateRowHeightFunc, 0);\n                }\n            };\n    \n            resizeObserverDestroyFunc = resizeObserverService.observeResize(eGuiRef.current!, checkRowSizeFunc);\n            checkRowSizeFunc();\n        }\n\n        return () => {\n            context.destroyBean(ctrl);\n            if (resizeObserverDestroyFunc) {\n                resizeObserverDestroyFunc();\n            }\n        };\n    });\n\n    const setGridApi = useCallback( (api: GridApi, columnApi: ColumnApi) => {\n        ctrlRef.current!.registerDetailWithMaster(api, columnApi)\n    }, []);\n\n    return (\n        <div className={topClassName} ref={eGuiRef}>\n            {\n                detailGridOptions &&\n                <AgGridReactUi className={gridClassName} {...detailGridOptions} rowData={detailRowData} setGridApi={ setGridApi }></AgGridReactUi> \n            }\n        </div>\n    );\n};\n\nexport default forwardRef(DetailCellRenderer);\n"]}