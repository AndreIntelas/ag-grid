{"version":3,"sources":["reactUi/header/headerRowComp.tsx"],"names":[],"mappings":"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","file":"headerRowComp.js","sourcesContent":["import { AbstractHeaderCellCtrl, HeaderGroupCellCtrl, HeaderCellCtrl, HeaderFilterCellCtrl, HeaderRowCtrl, HeaderRowType, IHeaderRowComp, _ } from '@ag-grid-community/core';\nimport React, { memo, useCallback, useContext, useMemo, useRef, useState } from 'react';\nimport { BeansContext } from '../beansContext';\nimport HeaderCellComp from './headerCellComp';\nimport HeaderGroupCellComp from './headerGroupCellComp';\nimport HeaderFilterCellComp from './headerFilterCellComp';\nimport { useLayoutEffectOnce } from '../useEffectOnce';\n\nconst HeaderRowComp = (props: {ctrl: HeaderRowCtrl}) => {\n\n    const { gridOptionsService } = useContext(BeansContext);\n\n    const [ transform, setTransform ] = useState<string>();\n    const [ height, setHeight ] = useState<string>();\n    const [top, setTop] = useState<string>();\n    const [ ariaRowIndex, setAriaRowIndex ] = useState<number>();\n    const [ cellCtrls, setCellCtrls ] = useState<AbstractHeaderCellCtrl[]>([]);\n\n    const eGui = useRef<HTMLDivElement>(null);\n\n    const { ctrl } = props;\n\n    const typeColumn = ctrl.getType() === HeaderRowType.COLUMN;\n    const typeGroup = ctrl.getType() === HeaderRowType.COLUMN_GROUP;\n    const typeFilter = ctrl.getType() === HeaderRowType.FLOATING_FILTER;\n\n    const setCellCtrlsMaintainOrder = useCallback( (prev: AbstractHeaderCellCtrl[], next: AbstractHeaderCellCtrl[]) => {\n        const isEnsureDomOrder = gridOptionsService.is('ensureDomOrder');\n        const isPrintLayout = gridOptionsService.isDomLayout('print');\n\n        // if we are ensuring dom order, we set the ctrls into the dom in the same order they appear on screen\n        if (isEnsureDomOrder || isPrintLayout) {\n            return next;\n        }\n\n        // if not maintaining order, we want to keep the dom elements we have and add new ones to the end,\n        // otherwise we will loose transition effects as elements are placed in different dom locations\n        const prevMap = _.mapById(prev, c => c.getInstanceId());\n        const nextMap = _.mapById(next, c => c.getInstanceId());\n\n        const oldCtrlsWeAreKeeping = prev.filter( c => nextMap.has(c.getInstanceId()) );\n        const newCtrls = next.filter( c => !prevMap.has(c.getInstanceId()) )\n\n        return [...oldCtrlsWeAreKeeping, ...newCtrls];\n    }, []);\n\n    useLayoutEffectOnce(() => {\n\n        const compProxy: IHeaderRowComp = {\n            setTransform: transform => setTransform(transform),\n            setHeight: height => setHeight(height),\n            setTop: top => setTop(top),\n            setHeaderCtrls: ctrls => setCellCtrls(prev => setCellCtrlsMaintainOrder(prev, ctrls)),\n            setWidth: width => eGui.current!.style.width = width,\n            setAriaRowIndex: rowIndex => setAriaRowIndex(rowIndex)\n        };\n\n        ctrl.setComp(compProxy);\n\n    });\n\n    const style = useMemo( ()=> ({\n        transform: transform,\n        height: height,\n        top: top,\n    }), [transform, height, top]);\n\n    const className = useMemo( ()=> {\n        const res: string[] = [`ag-header-row`];\n        \n        typeColumn && res.push(`ag-header-row-column`);\n        typeGroup && res.push(`ag-header-row-column-group`);\n        typeFilter && res.push(`ag-header-row-column-filter`);\n\n        return res.join(' ');\n    }, []);\n\n    const createCellJsx = useCallback( (cellCtrl: AbstractHeaderCellCtrl) => {\n        switch (ctrl.getType()) {\n            case HeaderRowType.COLUMN_GROUP :\n                return <HeaderGroupCellComp ctrl={cellCtrl as HeaderGroupCellCtrl} key={cellCtrl.getInstanceId()} />;\n\n            case HeaderRowType.FLOATING_FILTER :\n                return <HeaderFilterCellComp ctrl={cellCtrl as HeaderFilterCellCtrl} key={cellCtrl.getInstanceId()} />;\n                \n            default :\n                return <HeaderCellComp ctrl={cellCtrl as HeaderCellCtrl} key={cellCtrl.getInstanceId()} />;\n        }\n    }, []);\n\n    return (\n        <div ref={eGui} className={className} role=\"row\" style={style} aria-rowindex={ariaRowIndex}>\n            { cellCtrls.map( createCellJsx ) }\n        </div>\n    );\n};\n\nexport default memo(HeaderRowComp);\n"]}