{"version":3,"sources":["reactUi/tabGuardComp.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAwI;AAExI,kDAEiC;AACjC,iDAA8C;AAC9C,mDAAsD;AAatD,MAAM,eAAe,GAAkE,CAAC,KAAU,EAAE,UAAe,EAAE,EAAE;IAEnH,MAAM,EAAE,QAAQ,EAAE,iBAAiB,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IACtE,MAAM,EAAE,OAAO,EAAE,GAAG,kBAAU,CAAC,2BAAY,CAAC,CAAC;IAE7C,MAAM,cAAc,GAAG,cAAM,CAAiB,IAAI,CAAC,CAAC;IACpD,MAAM,iBAAiB,GAAG,cAAM,CAAiB,IAAI,CAAC,CAAC;IACvD,MAAM,eAAe,GAAG,cAAM,EAAgB,CAAC;IAC/C,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,gBAAQ,EAAU,CAAC;IAEnD,2BAAmB,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;QACnC,wBAAwB;;YACpB,MAAA,eAAe,CAAC,OAAO,0CAAE,wBAAwB,EAAE,CAAC;QACxD,CAAC;KACJ,CAAC,CAAC,CAAC;IAEJ,mCAAmB,CAAC,GAAG,EAAE;QACrB,MAAM,SAAS,GAAG,cAAc,CAAC,OAAQ,CAAC;QAC1C,MAAM,YAAY,GAAG,iBAAiB,CAAC,OAAQ,CAAC;QAEhD,MAAM,SAAS,GAAc;YACzB,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAClG,CAAA;QAED,MAAM,IAAI,GAAG,eAAe,CAAC,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,mBAAY,CAAC;YACvE,IAAI,EAAE,SAAS;YACf,SAAS,EAAE,SAAS;YACpB,YAAY,EAAE,YAAY;YAC1B,iBAAiB,EAAE,iBAAiB;YAEpC,YAAY,EAAE,YAAY;YAC1B,iBAAiB,EAAE,UAAU,CAAC,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC;SAC1E,CAAC,CAAC,CAAC;QAEJ,OAAO,GAAG,EAAE;YACR,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC;IAEN,CAAC,CAAC,CAAC;IAEH,MAAM,cAAc,GAAG,CAAC,IAAsB,EAAE,EAAE;QAC9C,MAAM,SAAS,GAAG,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,yBAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,yBAAkB,CAAC,gBAAgB,CAAC;QAE1G,OAAO,CACH,uCACI,SAAS,EAAG,GAAG,yBAAkB,CAAC,SAAS,IAAI,SAAS,EAAE,EAC1D,IAAI,EAAC,cAAc,EACnB,QAAQ,EAAG,QAAQ,EACnB,GAAG,EAAG,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB,GACtD,CACV,CAAC;IACN,CAAC,CAAA;IAED,OAAO,CACH;QACK,cAAc,CAAC,KAAK,CAAC;QACpB,QAAQ;QACT,cAAc,CAAC,QAAQ,CAAC,CAC1B,CACN,CAAA;AACL,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,kBAAU,CAAC,eAAe,CAAC,CAAC;AAEjD,kBAAe,YAAI,CAAC,YAAY,CAAC,CAAC","file":"tabGuardComp.js","sourcesContent":["import React, { useRef, useEffect, useState, forwardRef, useImperativeHandle, ForwardRefRenderFunction, memo, useContext } from 'react';\n\nimport {\n    TabGuardCtrl, ITabGuard, GridCtrl, TabGuardClassNames\n} from '@ag-grid-community/core';\nimport { BeansContext } from './beansContext';\nimport { useLayoutEffectOnce } from './useEffectOnce';\n\nexport interface TabGuardCompCallback {\n    forceFocusOutOfContainer(): void;\n}\n\ninterface TabGuardProps {\n    children: React.ReactNode,\n    eFocusableElement: HTMLDivElement,\n    onTabKeyDown: (e: KeyboardEvent) => void,\n    gridCtrl: GridCtrl,\n}\n\nconst TabGuardCompRef: ForwardRefRenderFunction<TabGuardCompCallback, TabGuardProps> = (props: any, forwardRef: any) => {\n\n    const { children, eFocusableElement, onTabKeyDown, gridCtrl } = props;\n    const { context } = useContext(BeansContext);\n\n    const topTabGuardRef = useRef<HTMLDivElement>(null);\n    const bottomTabGuardRef = useRef<HTMLDivElement>(null);\n    const tabGuardCtrlRef = useRef<TabGuardCtrl>();\n    const [tabIndex, setTabIndex] = useState<number>();\n\n    useImperativeHandle(forwardRef, () => ({\n        forceFocusOutOfContainer() {\n            tabGuardCtrlRef.current?.forceFocusOutOfContainer();\n        }\n    }));\n\n    useLayoutEffectOnce(() => {\n        const eTopGuard = topTabGuardRef.current!;\n        const eBottomGuard = bottomTabGuardRef.current!;\n\n        const compProxy: ITabGuard = {\n            setTabIndex: value => value == null ? setTabIndex(undefined) : setTabIndex(parseInt(value, 10))\n        }\n\n        const ctrl = tabGuardCtrlRef.current = context.createBean(new TabGuardCtrl({\n            comp: compProxy,\n            eTopGuard: eTopGuard,\n            eBottomGuard: eBottomGuard,\n            eFocusableElement: eFocusableElement,\n            \n            onTabKeyDown: onTabKeyDown,\n            focusInnerElement: fromBottom => gridCtrl.focusInnerElement(fromBottom)\n        }));\n\n        return () => {\n            context.destroyBean(ctrl);\n        };\n\n    });\n\n    const createTabGuard = (side: 'top' | 'bottom') => {\n        const className = side === 'top' ? TabGuardClassNames.TAB_GUARD_TOP : TabGuardClassNames.TAB_GUARD_BOTTOM;\n\n        return (\n            <div \n                className={ `${TabGuardClassNames.TAB_GUARD} ${className}` }\n                role=\"presentation\"\n                tabIndex={ tabIndex }\n                ref={ side === 'top' ? topTabGuardRef : bottomTabGuardRef }\n            ></div>\n        );\n    }\n\n    return (\n        <>\n            {createTabGuard('top')}\n            { children }\n            {createTabGuard('bottom')}\n        </>\n    )\n};\n\nconst TabGuardComp = forwardRef(TabGuardCompRef);\n\nexport default memo(TabGuardComp);\n"]}