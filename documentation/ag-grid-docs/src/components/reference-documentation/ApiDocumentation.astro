---
import { ApiDocumentation } from './ReferenceDocumentation';
import { getFrameworkFromPath } from '@features/docs/utils/urlPaths';
import { getJsonFile } from '@utils/pages';
import { getEntry } from 'astro:content';
import { getIsDev } from '@utils/env';

const { names, config, source, sources: sourcesProp, section } = Astro.props;

const framework = getFrameworkFromPath(Astro.url.pathname);
const interfaceLookup = getJsonFile('reference/interfaces.AUTO.json');

const sources = source ? [source] : sourcesProp;
const propertiesFromFilesPromises = sources.map(async (s: string) => {
    // NOTE: Need to remove `.json` for getEntry
    const fileName = s.replace('.json', '');
    const fileEntry = await getEntry('api-documentation', fileName);
    if (!fileEntry) {
        const message = `ApiDocumentation source not found: src/content/api-documentation/${fileName}.json`;
        if (getIsDev()) {
            console.error(message);
        } else {
            throw new Error(message);
        }
    } else {
        return fileEntry.data;
    }
});
const propertiesFromFiles = (await Promise.all(propertiesFromFilesPromises)).filter(Boolean);

const propertyConfigs = propertiesFromFiles
    .map((p) => {
        const config = p['_config_'];
        if (!config) {
            console.warn(`ApiDocumentation: _config_ property missing from source ${sources.join()}.`);
        }
        return config;
    })
    .filter(Boolean);
const codeConfigEntries = propertyConfigs
    .map((config) => config.codeSrc)
    .map((fileName) => {
        const referenceFileName = `reference/${fileName}`;
        const file = getJsonFile(referenceFileName);
        return [fileName, file];
    });
const codeConfigs = Object.fromEntries(codeConfigEntries);
---

<ApiDocumentation
    client:load
    framework={framework}
    sources={sources}
    section={section}
    names={names}
    config={config}
    propertiesFromFiles={propertiesFromFiles}
    interfaceLookup={interfaceLookup}
    propertyConfigs={propertyConfigs}
    codeConfigs={codeConfigs}
/>
