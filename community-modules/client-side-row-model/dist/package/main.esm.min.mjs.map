{
  "version": 3,
  "sources": ["<stdin>"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result)\n    __defProp(target, key, result);\n  return result;\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nimport { ModuleNames } from \"@ag-grid-community/core\";\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nimport {\n  _ as _2,\n  Autowired,\n  Bean,\n  BeanStub,\n  ChangedPath,\n  Events as Events2,\n  Optional,\n  PostConstruct,\n  ClientSideRowModelSteps,\n  RowNode as RowNode2,\n  RowHighlightPosition\n} from \"@ag-grid-community/core\";\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideNodeManager.ts\nimport {\n  Events,\n  RowNode,\n  _\n} from \"@ag-grid-community/core\";\nvar _ClientSideNodeManager = class _ClientSideNodeManager {\n  constructor(rootNode, gridOptionsService, eventService, columnModel, selectionService, beans) {\n    this.nextId = 0;\n    // has row data actually been set\n    this.rowCountReady = false;\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gridOptionsService = gridOptionsService;\n    this.eventService = eventService;\n    this.columnModel = columnModel;\n    this.beans = beans;\n    this.selectionService = selectionService;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = _ClientSideNodeManager.ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterAggFilter = [];\n    this.rootNode.childrenAfterFilter = [];\n  }\n  getCopyOfNodesMap() {\n    return _.cloneObject(this.allNodesMap);\n  }\n  getRowNode(id) {\n    return this.allNodesMap[id];\n  }\n  setRowData(rowData) {\n    if (typeof rowData === \"string\") {\n      console.warn(\"AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first\");\n      return;\n    }\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowData);\n    const rootNode = this.rootNode;\n    const sibling = this.rootNode.sibling;\n    rootNode.childrenAfterFilter = null;\n    rootNode.childrenAfterGroup = null;\n    rootNode.childrenAfterAggFilter = null;\n    rootNode.childrenAfterSort = null;\n    rootNode.childrenMapped = null;\n    rootNode.updateHasChildren();\n    this.nextId = 0;\n    this.allNodesMap = {};\n    if (rowData) {\n      rootNode.allLeafChildren = rowData.map((dataItem) => this.createNode(dataItem, this.rootNode, _ClientSideNodeManager.TOP_LEVEL));\n    } else {\n      rootNode.allLeafChildren = [];\n      rootNode.childrenAfterGroup = [];\n    }\n    if (sibling) {\n      sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n      sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;\n      sibling.childrenAfterSort = rootNode.childrenAfterSort;\n      sibling.childrenMapped = rootNode.childrenMapped;\n      sibling.allLeafChildren = rootNode.allLeafChildren;\n    }\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);\n    const rowNodeTransaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const nodesToUnselect = [];\n    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeAdd(rowDataTran, rowNodeTransaction);\n    this.updateSelection(nodesToUnselect, \"rowDataChanged\");\n    if (rowNodeOrder) {\n      _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n    }\n    return rowNodeTransaction;\n  }\n  isRowCountReady() {\n    return this.rowCountReady;\n  }\n  dispatchRowDataUpdateStartedEvent(rowData) {\n    const event = {\n      type: Events.EVENT_ROW_DATA_UPDATE_STARTED,\n      firstRowData: (rowData == null ? void 0 : rowData.length) ? rowData[0] : null\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  updateSelection(nodesToUnselect, source) {\n    const selectionChanged = nodesToUnselect.length > 0;\n    if (selectionChanged) {\n      this.selectionService.setNodesSelected({\n        newValue: false,\n        nodes: nodesToUnselect,\n        suppressFinishActions: true,\n        source\n      });\n    }\n    this.selectionService.updateGroupsFromChildrenSelections(source);\n    if (selectionChanged) {\n      const event = {\n        type: Events.EVENT_SELECTION_CHANGED,\n        source\n      };\n      this.eventService.dispatchEvent(event);\n    }\n  }\n  executeAdd(rowDataTran, rowNodeTransaction) {\n    var _a;\n    const { add, addIndex } = rowDataTran;\n    if (_.missingOrEmpty(add)) {\n      return;\n    }\n    const newNodes = add.map((item) => this.createNode(item, this.rootNode, _ClientSideNodeManager.TOP_LEVEL));\n    if (typeof addIndex === \"number\" && addIndex >= 0) {\n      const { allLeafChildren } = this.rootNode;\n      const len = allLeafChildren.length;\n      let normalisedAddIndex = addIndex;\n      const isTreeData = this.gridOptionsService.get(\"treeData\");\n      if (isTreeData && addIndex > 0 && len > 0) {\n        for (let i = 0; i < len; i++) {\n          if (((_a = allLeafChildren[i]) == null ? void 0 : _a.rowIndex) == addIndex - 1) {\n            normalisedAddIndex = i + 1;\n            break;\n          }\n        }\n      }\n      const nodesBeforeIndex = allLeafChildren.slice(0, normalisedAddIndex);\n      const nodesAfterIndex = allLeafChildren.slice(normalisedAddIndex, allLeafChildren.length);\n      this.rootNode.allLeafChildren = [...nodesBeforeIndex, ...newNodes, ...nodesAfterIndex];\n    } else {\n      this.rootNode.allLeafChildren = [...this.rootNode.allLeafChildren, ...newNodes];\n    }\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n    rowNodeTransaction.add = newNodes;\n  }\n  executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { remove } = rowDataTran;\n    if (_.missingOrEmpty(remove)) {\n      return;\n    }\n    const rowIdsRemoved = {};\n    remove.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      rowNode.clearRowTopAndRowIndex();\n      rowIdsRemoved[rowNode.id] = true;\n      delete this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter((rowNode) => !rowIdsRemoved[rowNode.id]);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n  }\n  executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    const { update } = rowDataTran;\n    if (_.missingOrEmpty(update)) {\n      return;\n    }\n    update.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      rowNode.updateData(item);\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      this.setMasterForRow(rowNode, item, _ClientSideNodeManager.TOP_LEVEL, false);\n      rowNodeTransaction.update.push(rowNode);\n    });\n  }\n  lookupRowNode(data) {\n    const getRowIdFunc = this.gridOptionsService.getCallback(\"getRowId\");\n    let rowNode;\n    if (getRowIdFunc) {\n      const id = getRowIdFunc({ data, level: 0 });\n      rowNode = this.allNodesMap[id];\n      if (!rowNode) {\n        console.error(`AG Grid: could not find row id=${id}, data item was not found for this id`);\n        return null;\n      }\n    } else {\n      rowNode = this.rootNode.allLeafChildren.find((node) => node.data === data);\n      if (!rowNode) {\n        console.error(`AG Grid: could not find data item as object was not found`, data);\n        console.error(`Consider using getRowId to help the Grid find matching row data`);\n        return null;\n      }\n    }\n    return rowNode || null;\n  }\n  createNode(dataItem, parent, level) {\n    const node = new RowNode(this.beans);\n    node.group = false;\n    this.setMasterForRow(node, dataItem, level, true);\n    const suppressParentsInRowNodes = this.gridOptionsService.get(\"suppressParentsInRowNodes\");\n    if (parent && !suppressParentsInRowNodes) {\n      node.parent = parent;\n    }\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n    if (this.allNodesMap[node.id]) {\n      console.warn(`AG Grid: duplicate node id '${node.id}' detected from getRowId callback, this could cause issues in your grid.`);\n    }\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  }\n  setMasterForRow(rowNode, data, level, setExpanded) {\n    const isTreeData = this.gridOptionsService.get(\"treeData\");\n    if (isTreeData) {\n      rowNode.setMaster(false);\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      const masterDetail = this.gridOptionsService.get(\"masterDetail\");\n      if (masterDetail) {\n        const isRowMasterFunc = this.gridOptionsService.get(\"isRowMaster\");\n        if (isRowMasterFunc) {\n          rowNode.setMaster(isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n      if (setExpanded) {\n        const rowGroupColumns = this.columnModel.getRowGroupColumns();\n        const numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n        const masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  }\n  isExpanded(level) {\n    const expandByDefault = this.gridOptionsService.get(\"groupDefaultExpanded\");\n    if (expandByDefault === -1) {\n      return true;\n    }\n    return level < expandByDefault;\n  }\n};\n_ClientSideNodeManager.TOP_LEVEL = 0;\n_ClientSideNodeManager.ROOT_NODE_ID = \"ROOT_NODE_ID\";\nvar ClientSideNodeManager = _ClientSideNodeManager;\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nvar ClientSideRowModel = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.onRowHeightChanged_debounced = _2.debounce(this.onRowHeightChanged.bind(this), 100);\n    this.rowsToDisplay = [];\n    /** Has the start method been called */\n    this.hasStarted = false;\n    /** E.g. data has been set into the node manager already */\n    this.shouldSkipSettingDataOnStart = false;\n    /**\n     * This is to prevent refresh model being called when it's already being called.\n     * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,\n     * which then triggers the listener here that calls refresh model again but at the filter stage\n     * (which is about to be run by the original call).\n     */\n    this.isRefreshingModel = false;\n    this.rowCountReady = false;\n  }\n  init() {\n    const refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });\n    const animate = !this.gridOptionsService.get(\"suppressAnimationFrame\");\n    const refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n      step: ClientSideRowModelSteps.EVERYTHING,\n      // after cols change, row grouping (the first stage) could of changed\n      afterColumnsChanged: true,\n      keepRenderedRows: true,\n      // we want animations cos sorting or filtering could be applied\n      animate\n    });\n    this.addManagedListener(this.eventService, Events2.EVENT_NEW_COLUMNS_LOADED, refreshEverythingAfterColsChangedFunc);\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }));\n    this.addManagedListener(this.eventService, Events2.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n    this.addManagedListener(this.eventService, Events2.EVENT_GRID_STYLES_CHANGED, this.onGridStylesChanges.bind(this));\n    this.addManagedListener(this.eventService, Events2.EVENT_GRID_READY, () => this.onGridReady());\n    this.addPropertyListeners();\n    this.rootNode = new RowNode2(this.beans);\n    this.nodeManager = new ClientSideNodeManager(\n      this.rootNode,\n      this.gridOptionsService,\n      this.eventService,\n      this.columnModel,\n      this.selectionService,\n      this.beans\n    );\n  }\n  addPropertyListeners() {\n    const resetProps = /* @__PURE__ */ new Set([\n      \"treeData\",\n      \"masterDetail\"\n    ]);\n    const groupStageRefreshProps = /* @__PURE__ */ new Set([\n      \"suppressParentsInRowNodes\",\n      \"groupDefaultExpanded\",\n      \"groupAllowUnbalanced\",\n      \"initialGroupOrderComparator\",\n      \"groupHideOpenParents\",\n      \"groupDisplayType\"\n    ]);\n    const filterStageRefreshProps = /* @__PURE__ */ new Set([\n      \"excludeChildrenWhenTreeDataFiltering\"\n    ]);\n    const pivotStageRefreshProps = /* @__PURE__ */ new Set([\n      \"removePivotHeaderRowWhenSingleValueColumn\",\n      \"pivotRowTotals\",\n      \"pivotColumnGroupTotals\",\n      \"suppressExpandablePivotGroups\"\n    ]);\n    const aggregateStageRefreshProps = /* @__PURE__ */ new Set([\n      \"getGroupRowAgg\",\n      \"alwaysAggregateAtRootLevel\",\n      \"groupIncludeTotalFooter\",\n      \"suppressAggFilteredOnly\"\n    ]);\n    const sortStageRefreshProps = /* @__PURE__ */ new Set([\n      \"postSortRows\",\n      \"groupDisplayType\",\n      \"accentedSort\"\n    ]);\n    const filterAggStageRefreshProps = /* @__PURE__ */ new Set([]);\n    const flattenStageRefreshProps = /* @__PURE__ */ new Set([\n      \"groupRemoveSingleChildren\",\n      \"groupRemoveLowestSingleChildren\",\n      \"groupIncludeFooter\"\n    ]);\n    const allProps = [\n      ...resetProps,\n      ...groupStageRefreshProps,\n      ...filterStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...aggregateStageRefreshProps,\n      ...sortStageRefreshProps,\n      ...filterAggStageRefreshProps,\n      ...flattenStageRefreshProps\n    ];\n    this.addManagedPropertyListeners(allProps, (params) => {\n      var _a;\n      const properties = (_a = params.changeSet) == null ? void 0 : _a.properties;\n      if (!properties) {\n        return;\n      }\n      ;\n      const arePropertiesImpacted = (propSet) => properties.some((prop) => propSet.has(prop));\n      if (arePropertiesImpacted(resetProps)) {\n        this.setRowData(this.rootNode.allLeafChildren.map((child) => child.data));\n        return;\n      }\n      if (arePropertiesImpacted(groupStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.EVERYTHING });\n        return;\n      }\n      if (arePropertiesImpacted(filterStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER });\n        return;\n      }\n      if (arePropertiesImpacted(pivotStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n        return;\n      }\n      if (arePropertiesImpacted(aggregateStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n        return;\n      }\n      if (arePropertiesImpacted(sortStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.SORT });\n        return;\n      }\n      if (arePropertiesImpacted(filterAggStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER_AGGREGATES });\n        return;\n      }\n      if (arePropertiesImpacted(flattenStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n      }\n    });\n    this.addManagedPropertyListener(\"rowHeight\", () => this.resetRowHeights());\n  }\n  start() {\n    this.hasStarted = true;\n    if (this.shouldSkipSettingDataOnStart) {\n      this.dispatchUpdateEventsAndRefresh();\n    } else {\n      this.setInitialData();\n    }\n  }\n  setInitialData() {\n    const rowData = this.gridOptionsService.get(\"rowData\");\n    if (rowData) {\n      this.shouldSkipSettingDataOnStart = true;\n      this.setRowData(rowData);\n    }\n  }\n  ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    let atLeastOneChange;\n    let res = false;\n    do {\n      atLeastOneChange = false;\n      const rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n      const rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n      const firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n      const lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n      for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n        const rowNode = this.getRow(rowIndex);\n        if (rowNode.rowHeightEstimated) {\n          const rowHeight = this.gridOptionsService.getRowHeightForNode(rowNode);\n          rowNode.setRowHeight(rowHeight.height);\n          atLeastOneChange = true;\n          res = true;\n        }\n      }\n      if (atLeastOneChange) {\n        this.setRowTopAndRowIndex();\n      }\n    } while (atLeastOneChange);\n    return res;\n  }\n  setRowTopAndRowIndex() {\n    const defaultRowHeight = this.environment.getDefaultRowHeight();\n    let nextRowTop = 0;\n    const displayedRowsMapped = /* @__PURE__ */ new Set();\n    const allowEstimate = this.gridOptionsService.isDomLayout(\"normal\");\n    for (let i = 0; i < this.rowsToDisplay.length; i++) {\n      const rowNode = this.rowsToDisplay[i];\n      if (rowNode.id != null) {\n        displayedRowsMapped.add(rowNode.id);\n      }\n      if (rowNode.rowHeight == null) {\n        const rowHeight = this.gridOptionsService.getRowHeightForNode(rowNode, allowEstimate, defaultRowHeight);\n        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n      }\n      rowNode.setRowTop(nextRowTop);\n      rowNode.setRowIndex(i);\n      nextRowTop += rowNode.rowHeight;\n    }\n    return displayedRowsMapped;\n  }\n  clearRowTopAndRowIndex(changedPath, displayedRowsMapped) {\n    const changedPathActive = changedPath.isActive();\n    const clearIfNotDisplayed = (rowNode) => {\n      if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\n        rowNode.clearRowTopAndRowIndex();\n      }\n    };\n    const recurse = (rowNode) => {\n      clearIfNotDisplayed(rowNode);\n      clearIfNotDisplayed(rowNode.detailNode);\n      clearIfNotDisplayed(rowNode.sibling);\n      if (rowNode.hasChildren()) {\n        if (rowNode.childrenAfterGroup) {\n          const isRootNode = rowNode.level == -1;\n          const skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\n          if (!skipChildren) {\n            rowNode.childrenAfterGroup.forEach(recurse);\n          }\n        }\n      }\n    };\n    recurse(this.rootNode);\n  }\n  // returns false if row was moved, otherwise true\n  ensureRowsAtPixel(rowNodes, pixel, increment = 0) {\n    const indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n    const rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n    const animate = !this.gridOptionsService.get(\"suppressAnimationFrame\");\n    if (rowNodeAtPixelNow === rowNodes[0]) {\n      return false;\n    }\n    rowNodes.forEach((rowNode) => {\n      _2.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n    });\n    rowNodes.forEach((rowNode, idx) => {\n      _2.insertIntoArray(this.rootNode.allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n    });\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n    return true;\n  }\n  highlightRowAtPixel(rowNode, pixel) {\n    const indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n    const rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n    if (!rowNodeAtPixelNow || !rowNode || rowNodeAtPixelNow === rowNode || pixel == null) {\n      if (this.lastHighlightedRow) {\n        this.lastHighlightedRow.setHighlighted(null);\n        this.lastHighlightedRow = null;\n      }\n      return;\n    }\n    const highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n    if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n      this.lastHighlightedRow.setHighlighted(null);\n      this.lastHighlightedRow = null;\n    }\n    rowNodeAtPixelNow.setHighlighted(highlight);\n    this.lastHighlightedRow = rowNodeAtPixelNow;\n  }\n  getHighlightPosition(pixel, rowNode) {\n    if (!rowNode) {\n      const index = this.getRowIndexAtPixel(pixel);\n      rowNode = this.getRow(index || 0);\n      if (!rowNode) {\n        return RowHighlightPosition.Below;\n      }\n    }\n    const { rowTop, rowHeight } = rowNode;\n    return pixel - rowTop < rowHeight / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;\n  }\n  getLastHighlightedRowNode() {\n    return this.lastHighlightedRow;\n  }\n  isLastRowIndexKnown() {\n    return true;\n  }\n  getRowCount() {\n    if (this.rowsToDisplay) {\n      return this.rowsToDisplay.length;\n    }\n    return 0;\n  }\n  getTopLevelRowCount() {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return 1;\n    }\n    const filteredChildren = this.rootNode.childrenAfterAggFilter;\n    return filteredChildren ? filteredChildren.length : 0;\n  }\n  getTopLevelRowDisplayedIndex(topLevelIndex) {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return topLevelIndex;\n    }\n    let rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n    if (this.gridOptionsService.get(\"groupHideOpenParents\")) {\n      while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n        rowNode = rowNode.childrenAfterSort[0];\n      }\n    }\n    return rowNode.rowIndex;\n  }\n  getRowBounds(index) {\n    if (_2.missing(this.rowsToDisplay)) {\n      return null;\n    }\n    const rowNode = this.rowsToDisplay[index];\n    if (rowNode) {\n      return {\n        rowTop: rowNode.rowTop,\n        rowHeight: rowNode.rowHeight\n      };\n    }\n    return null;\n  }\n  onRowGroupOpened() {\n    const animate = this.gridOptionsService.isAnimateRows();\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });\n  }\n  onFilterChanged(event) {\n    if (event.afterDataChange) {\n      return;\n    }\n    const animate = this.gridOptionsService.isAnimateRows();\n    const primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some((col) => col.isPrimary());\n    const step = primaryOrQuickFilterChanged ? ClientSideRowModelSteps.FILTER : ClientSideRowModelSteps.FILTER_AGGREGATES;\n    this.refreshModel({ step, keepRenderedRows: true, animate });\n  }\n  onSortChanged() {\n    const animate = this.gridOptionsService.isAnimateRows();\n    this.refreshModel({ step: ClientSideRowModelSteps.SORT, keepRenderedRows: true, animate, keepEditingRows: true });\n  }\n  getType() {\n    return \"clientSide\";\n  }\n  onValueChanged() {\n    if (this.columnModel.isPivotActive()) {\n      this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n    } else {\n      this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n    }\n  }\n  createChangePath(rowNodeTransactions) {\n    const noTransactions = _2.missingOrEmpty(rowNodeTransactions);\n    const changedPath = new ChangedPath(false, this.rootNode);\n    if (noTransactions || this.gridOptionsService.get(\"treeData\")) {\n      changedPath.setInactive();\n    }\n    return changedPath;\n  }\n  isSuppressModelUpdateAfterUpdateTransaction(params) {\n    if (!this.gridOptionsService.get(\"suppressModelUpdateAfterUpdateTransaction\")) {\n      return false;\n    }\n    if (params.rowNodeTransactions == null) {\n      return false;\n    }\n    const transWithAddsOrDeletes = params.rowNodeTransactions.filter(\n      (tx) => tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0\n    );\n    const transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n    return transactionsContainUpdatesOnly;\n  }\n  buildRefreshModelParams(step) {\n    let paramsStep = ClientSideRowModelSteps.EVERYTHING;\n    const stepsMapped = {\n      everything: ClientSideRowModelSteps.EVERYTHING,\n      group: ClientSideRowModelSteps.EVERYTHING,\n      filter: ClientSideRowModelSteps.FILTER,\n      map: ClientSideRowModelSteps.MAP,\n      aggregate: ClientSideRowModelSteps.AGGREGATE,\n      sort: ClientSideRowModelSteps.SORT,\n      pivot: ClientSideRowModelSteps.PIVOT\n    };\n    if (_2.exists(step)) {\n      paramsStep = stepsMapped[step];\n    }\n    if (_2.missing(paramsStep)) {\n      console.error(`AG Grid: invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(\", \")}`);\n      return void 0;\n    }\n    const animate = !this.gridOptionsService.get(\"suppressAnimationFrame\");\n    const modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    };\n    return modelParams;\n  }\n  refreshModel(paramsOrStep) {\n    if (!this.hasStarted || this.isRefreshingModel || this.columnModel.shouldRowModelIgnoreRefresh()) {\n      return;\n    }\n    let params = typeof paramsOrStep === \"object\" && \"step\" in paramsOrStep ? paramsOrStep : this.buildRefreshModelParams(paramsOrStep);\n    if (!params) {\n      return;\n    }\n    if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n      return;\n    }\n    const changedPath = this.createChangePath(params.rowNodeTransactions);\n    this.isRefreshingModel = true;\n    switch (params.step) {\n      case ClientSideRowModelSteps.EVERYTHING:\n        this.doRowGrouping(\n          params.rowNodeTransactions,\n          params.rowNodeOrder,\n          changedPath,\n          !!params.afterColumnsChanged\n        );\n      case ClientSideRowModelSteps.FILTER:\n        this.doFilter(changedPath);\n      case ClientSideRowModelSteps.PIVOT:\n        this.doPivot(changedPath);\n      case ClientSideRowModelSteps.AGGREGATE:\n        this.doAggregate(changedPath);\n      case ClientSideRowModelSteps.FILTER_AGGREGATES:\n        this.doFilterAggregates(changedPath);\n      case ClientSideRowModelSteps.SORT:\n        this.doSort(params.rowNodeTransactions, changedPath);\n      case ClientSideRowModelSteps.MAP:\n        this.doRowsToDisplay();\n    }\n    const displayedNodesMapped = this.setRowTopAndRowIndex();\n    this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\n    this.isRefreshingModel = false;\n    const event = {\n      type: Events2.EVENT_MODEL_UPDATED,\n      animate: params.animate,\n      keepRenderedRows: params.keepRenderedRows,\n      newData: params.newData,\n      newPage: false,\n      keepUndoRedoStack: params.keepUndoRedoStack\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  isEmpty() {\n    const rowsMissing = _2.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n    return _2.missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();\n  }\n  isRowsToRender() {\n    return _2.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n  }\n  getNodesInRangeForSelection(firstInRange, lastInRange) {\n    let started = !lastInRange;\n    let finished = false;\n    const result = [];\n    const groupsSelectChildren = this.gridOptionsService.get(\"groupSelectsChildren\");\n    this.forEachNodeAfterFilterAndSort((rowNode) => {\n      if (finished) {\n        return;\n      }\n      if (started) {\n        if (rowNode === lastInRange || rowNode === firstInRange) {\n          finished = true;\n          if (rowNode.group && groupsSelectChildren) {\n            result.push(...rowNode.allLeafChildren);\n            return;\n          }\n        }\n      }\n      if (!started) {\n        if (rowNode !== lastInRange && rowNode !== firstInRange) {\n          return;\n        }\n        started = true;\n      }\n      const includeThisNode = !rowNode.group || !groupsSelectChildren;\n      if (includeThisNode) {\n        result.push(rowNode);\n        return;\n      }\n    });\n    return result;\n  }\n  setDatasource(datasource) {\n    console.error(\"AG Grid: should never call setDatasource on clientSideRowController\");\n  }\n  getTopLevelNodes() {\n    return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n  }\n  getRootNode() {\n    return this.rootNode;\n  }\n  getRow(index) {\n    return this.rowsToDisplay[index];\n  }\n  isRowPresent(rowNode) {\n    return this.rowsToDisplay.indexOf(rowNode) >= 0;\n  }\n  getRowIndexAtPixel(pixelToMatch) {\n    if (this.isEmpty() || this.rowsToDisplay.length === 0) {\n      return -1;\n    }\n    let bottomPointer = 0;\n    let topPointer = this.rowsToDisplay.length - 1;\n    if (pixelToMatch <= 0) {\n      return 0;\n    }\n    const lastNode = _2.last(this.rowsToDisplay);\n    if (lastNode.rowTop <= pixelToMatch) {\n      return this.rowsToDisplay.length - 1;\n    }\n    let oldBottomPointer = -1;\n    let oldTopPointer = -1;\n    while (true) {\n      const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n      const currentRowNode = this.rowsToDisplay[midPointer];\n      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n        return midPointer;\n      }\n      if (currentRowNode.rowTop < pixelToMatch) {\n        bottomPointer = midPointer + 1;\n      } else if (currentRowNode.rowTop > pixelToMatch) {\n        topPointer = midPointer - 1;\n      }\n      const caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;\n      if (caughtInInfiniteLoop) {\n        return midPointer;\n      }\n      oldBottomPointer = bottomPointer;\n      oldTopPointer = topPointer;\n    }\n  }\n  isRowInPixel(rowNode, pixelToMatch) {\n    const topPixel = rowNode.rowTop;\n    const bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n    const pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n    return pixelInRow;\n  }\n  forEachLeafNode(callback) {\n    if (this.rootNode.allLeafChildren) {\n      this.rootNode.allLeafChildren.forEach((rowNode, index) => callback(rowNode, index));\n    }\n  }\n  forEachNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterGroup || []],\n      callback,\n      recursionType: 0 /* Normal */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilter(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterAggFilter || []],\n      callback,\n      recursionType: 1 /* AfterFilter */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilterAndSort(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterSort || []],\n      callback,\n      recursionType: 2 /* AfterFilterAndSort */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachPivotNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [this.rootNode],\n      callback,\n      recursionType: 3 /* PivotNodes */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  // iterates through each item in memory, and calls the callback function\n  // nodes - the rowNodes to traverse\n  // callback - the user provided callback\n  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n  // index - works similar to the index in forEach in javascript's array function\n  recursivelyWalkNodesAndCallback(params) {\n    var _a;\n    const { nodes, callback, recursionType, includeFooterNodes } = params;\n    let { index } = params;\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      callback(node, index++);\n      if (node.hasChildren() && !node.footer) {\n        let nodeChildren = null;\n        switch (recursionType) {\n          case 0 /* Normal */:\n            nodeChildren = node.childrenAfterGroup;\n            break;\n          case 1 /* AfterFilter */:\n            nodeChildren = node.childrenAfterAggFilter;\n            break;\n          case 2 /* AfterFilterAndSort */:\n            nodeChildren = node.childrenAfterSort;\n            break;\n          case 3 /* PivotNodes */:\n            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n            break;\n        }\n        if (nodeChildren) {\n          index = this.recursivelyWalkNodesAndCallback({\n            nodes: [...nodeChildren],\n            callback,\n            recursionType,\n            index,\n            includeFooterNodes\n          });\n        }\n      }\n    }\n    const parentNode = (_a = nodes[0]) == null ? void 0 : _a.parent;\n    if (!includeFooterNodes || !parentNode)\n      return index;\n    const isRootNode = parentNode === this.rootNode;\n    if (isRootNode) {\n      const totalFooters = this.gridOptionsService.get(\"groupIncludeTotalFooter\");\n      if (!totalFooters)\n        return index;\n    } else {\n      const isGroupIncludeFooter = this.gridOptionsService.getGroupIncludeFooter();\n      if (!isGroupIncludeFooter({ node: parentNode }))\n        return index;\n    }\n    parentNode.createFooter();\n    callback(parentNode.sibling, index++);\n    return index;\n  }\n  // it's possible to recompute the aggregate without doing the other parts\n  // + api.refreshClientSideRowModel('aggregate')\n  doAggregate(changedPath) {\n    if (this.aggregationStage) {\n      this.aggregationStage.execute({ rowNode: this.rootNode, changedPath });\n    }\n  }\n  doFilterAggregates(changedPath) {\n    if (this.filterAggregatesStage) {\n      this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });\n    } else {\n      this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;\n    }\n  }\n  // + gridApi.expandAll()\n  // + gridApi.collapseAll()\n  expandOrCollapseAll(expand) {\n    const usingTreeData = this.gridOptionsService.get(\"treeData\");\n    const usingPivotMode = this.columnModel.isPivotActive();\n    const recursiveExpandOrCollapse = (rowNodes) => {\n      if (!rowNodes) {\n        return;\n      }\n      rowNodes.forEach((rowNode) => {\n        const actionRow = () => {\n          rowNode.expanded = expand;\n          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n        };\n        if (usingTreeData) {\n          const hasChildren = _2.exists(rowNode.childrenAfterGroup);\n          if (hasChildren) {\n            actionRow();\n          }\n          return;\n        }\n        if (usingPivotMode) {\n          const notLeafGroup = !rowNode.leafGroup;\n          if (notLeafGroup) {\n            actionRow();\n          }\n          return;\n        }\n        const isRowGroup = rowNode.group;\n        if (isRowGroup) {\n          actionRow();\n        }\n      });\n    };\n    if (this.rootNode) {\n      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n    }\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n    const eventSource = expand ? \"expandAll\" : \"collapseAll\";\n    const event = {\n      type: Events2.EVENT_EXPAND_COLLAPSE_ALL,\n      source: eventSource\n    };\n    this.eventService.dispatchEvent(event);\n  }\n  doSort(rowNodeTransactions, changedPath) {\n    this.sortStage.execute({\n      rowNode: this.rootNode,\n      rowNodeTransactions,\n      changedPath\n    });\n  }\n  doRowGrouping(rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n    if (this.groupStage) {\n      if (rowNodeTransactions) {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          rowNodeTransactions,\n          rowNodeOrder,\n          changedPath\n        });\n      } else {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          changedPath,\n          afterColumnsChanged\n        });\n      }\n      if (this.gridOptionsService.get(\"groupSelectsChildren\")) {\n        const selectionChanged = this.selectionService.updateGroupsFromChildrenSelections(\"rowGroupChanged\", changedPath);\n        if (selectionChanged) {\n          const event = {\n            type: Events2.EVENT_SELECTION_CHANGED,\n            source: \"rowGroupChanged\"\n          };\n          this.eventService.dispatchEvent(event);\n        }\n      }\n    } else {\n      this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n      if (this.rootNode.sibling) {\n        this.rootNode.sibling.childrenAfterGroup = this.rootNode.childrenAfterGroup;\n      }\n      this.rootNode.updateHasChildren();\n    }\n    if (this.nodeManager.isRowCountReady()) {\n      this.rowCountReady = true;\n      this.eventService.dispatchEventOnce({\n        type: Events2.EVENT_ROW_COUNT_READY\n      });\n    }\n  }\n  doFilter(changedPath) {\n    this.filterStage.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doPivot(changedPath) {\n    if (this.pivotStage) {\n      this.pivotStage.execute({ rowNode: this.rootNode, changedPath });\n    }\n  }\n  getCopyOfNodesMap() {\n    return this.nodeManager.getCopyOfNodesMap();\n  }\n  getRowNode(id) {\n    const idIsGroup = typeof id == \"string\" && id.indexOf(RowNode2.ID_PREFIX_ROW_GROUP) == 0;\n    if (idIsGroup) {\n      let res = void 0;\n      this.forEachNode((node) => {\n        if (node.id === id) {\n          res = node;\n        }\n      });\n      return res;\n    }\n    return this.nodeManager.getRowNode(id);\n  }\n  // rows: the rows to put into the model\n  setRowData(rowData) {\n    this.selectionService.reset(\"rowDataChanged\");\n    this.nodeManager.setRowData(rowData);\n    if (this.hasStarted) {\n      this.dispatchUpdateEventsAndRefresh();\n    }\n  }\n  dispatchUpdateEventsAndRefresh() {\n    const rowDataUpdatedEvent = {\n      type: Events2.EVENT_ROW_DATA_UPDATED\n    };\n    this.eventService.dispatchEvent(rowDataUpdatedEvent);\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      newData: true\n    });\n  }\n  batchUpdateRowData(rowDataTransaction, callback) {\n    if (this.applyAsyncTransactionsTimeout == null) {\n      this.rowDataTransactionBatch = [];\n      const waitMillis = this.gridOptionsService.getAsyncTransactionWaitMillis();\n      this.applyAsyncTransactionsTimeout = window.setTimeout(() => {\n        this.executeBatchUpdateRowData();\n      }, waitMillis);\n    }\n    this.rowDataTransactionBatch.push({ rowDataTransaction, callback });\n  }\n  flushAsyncTransactions() {\n    if (this.applyAsyncTransactionsTimeout != null) {\n      clearTimeout(this.applyAsyncTransactionsTimeout);\n      this.executeBatchUpdateRowData();\n    }\n  }\n  executeBatchUpdateRowData() {\n    this.valueCache.onDataChanged();\n    const callbackFuncsBound = [];\n    const rowNodeTrans = [];\n    let forceRowNodeOrder = false;\n    if (this.rowDataTransactionBatch) {\n      this.rowDataTransactionBatch.forEach((tranItem) => {\n        const rowNodeTran = this.nodeManager.updateRowData(tranItem.rowDataTransaction, void 0);\n        rowNodeTrans.push(rowNodeTran);\n        if (tranItem.callback) {\n          callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n        }\n        if (typeof tranItem.rowDataTransaction.addIndex === \"number\") {\n          forceRowNodeOrder = true;\n        }\n      });\n    }\n    this.commonUpdateRowData(rowNodeTrans, void 0, forceRowNodeOrder);\n    if (callbackFuncsBound.length > 0) {\n      window.setTimeout(() => {\n        callbackFuncsBound.forEach((func) => func());\n      }, 0);\n    }\n    if (rowNodeTrans.length > 0) {\n      const event = {\n        type: Events2.EVENT_ASYNC_TRANSACTIONS_FLUSHED,\n        results: rowNodeTrans\n      };\n      this.eventService.dispatchEvent(event);\n    }\n    this.rowDataTransactionBatch = null;\n    this.applyAsyncTransactionsTimeout = void 0;\n  }\n  updateRowData(rowDataTran, rowNodeOrder) {\n    this.valueCache.onDataChanged();\n    const rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n    const forceRowNodeOrder = typeof rowDataTran.addIndex === \"number\";\n    this.commonUpdateRowData([rowNodeTran], rowNodeOrder, forceRowNodeOrder);\n    return rowNodeTran;\n  }\n  createRowNodeOrder() {\n    const suppressSortOrder = this.gridOptionsService.get(\"suppressMaintainUnsortedOrder\");\n    if (suppressSortOrder) {\n      return;\n    }\n    const orderMap = {};\n    if (this.rootNode && this.rootNode.allLeafChildren) {\n      for (let index = 0; index < this.rootNode.allLeafChildren.length; index++) {\n        const node = this.rootNode.allLeafChildren[index];\n        orderMap[node.id] = index;\n      }\n    }\n    return orderMap;\n  }\n  // common to updateRowData and batchUpdateRowData\n  commonUpdateRowData(rowNodeTrans, rowNodeOrder, forceRowNodeOrder) {\n    if (!this.hasStarted) {\n      return;\n    }\n    const animate = !this.gridOptionsService.get(\"suppressAnimationFrame\");\n    if (forceRowNodeOrder) {\n      rowNodeOrder = this.createRowNodeOrder();\n    }\n    const event = {\n      type: Events2.EVENT_ROW_DATA_UPDATED\n    };\n    this.eventService.dispatchEvent(event);\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      rowNodeTransactions: rowNodeTrans,\n      rowNodeOrder,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n  }\n  doRowsToDisplay() {\n    this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n  }\n  onRowHeightChanged() {\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, keepEditingRows: true, keepUndoRedoStack: true });\n  }\n  /** This method is debounced. It is used for row auto-height. If we don't debounce,\n   * then the Row Models will end up recalculating each row position\n   * for each row height change and result in the Row Renderer laying out rows.\n   * This is particularly bad if using print layout, and showing eg 1,000 rows,\n   * each row will change it's height, causing Row Model to update 1,000 times.\n   */\n  onRowHeightChangedDebounced() {\n    this.onRowHeightChanged_debounced();\n  }\n  resetRowHeights() {\n    const atLeastOne = this.resetRowHeightsForAllRowNodes();\n    this.rootNode.setRowHeight(this.rootNode.rowHeight, true);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);\n    }\n    if (atLeastOne) {\n      this.onRowHeightChanged();\n    }\n  }\n  resetRowHeightsForAllRowNodes() {\n    let atLeastOne = false;\n    this.forEachNode((rowNode) => {\n      rowNode.setRowHeight(rowNode.rowHeight, true);\n      const detailNode = rowNode.detailNode;\n      if (detailNode) {\n        detailNode.setRowHeight(detailNode.rowHeight, true);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);\n      }\n      atLeastOne = true;\n    });\n    return atLeastOne;\n  }\n  onGridStylesChanges() {\n    if (this.columnModel.isAutoRowHeightActive()) {\n      return;\n    }\n    this.resetRowHeights();\n  }\n  onGridReady() {\n    if (this.hasStarted) {\n      return;\n    }\n    this.setInitialData();\n  }\n  isRowDataLoaded() {\n    return this.rowCountReady;\n  }\n};\n__decorateClass([\n  Autowired(\"columnModel\")\n], ClientSideRowModel.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired(\"selectionService\")\n], ClientSideRowModel.prototype, \"selectionService\", 2);\n__decorateClass([\n  Autowired(\"filterManager\")\n], ClientSideRowModel.prototype, \"filterManager\", 2);\n__decorateClass([\n  Autowired(\"valueCache\")\n], ClientSideRowModel.prototype, \"valueCache\", 2);\n__decorateClass([\n  Autowired(\"beans\")\n], ClientSideRowModel.prototype, \"beans\", 2);\n__decorateClass([\n  Autowired(\"filterStage\")\n], ClientSideRowModel.prototype, \"filterStage\", 2);\n__decorateClass([\n  Autowired(\"sortStage\")\n], ClientSideRowModel.prototype, \"sortStage\", 2);\n__decorateClass([\n  Autowired(\"flattenStage\")\n], ClientSideRowModel.prototype, \"flattenStage\", 2);\n__decorateClass([\n  Optional(\"groupStage\")\n], ClientSideRowModel.prototype, \"groupStage\", 2);\n__decorateClass([\n  Optional(\"aggregationStage\")\n], ClientSideRowModel.prototype, \"aggregationStage\", 2);\n__decorateClass([\n  Optional(\"pivotStage\")\n], ClientSideRowModel.prototype, \"pivotStage\", 2);\n__decorateClass([\n  Optional(\"filterAggregatesStage\")\n], ClientSideRowModel.prototype, \"filterAggregatesStage\", 2);\n__decorateClass([\n  PostConstruct\n], ClientSideRowModel.prototype, \"init\", 1);\nClientSideRowModel = __decorateClass([\n  Bean(\"rowModel\")\n], ClientSideRowModel);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterStage.ts\nimport {\n  Autowired as Autowired2,\n  Bean as Bean2,\n  BeanStub as BeanStub2\n} from \"@ag-grid-community/core\";\nvar FilterStage = class extends BeanStub2 {\n  execute(params) {\n    const { changedPath } = params;\n    this.filterService.filter(changedPath);\n  }\n};\n__decorateClass([\n  Autowired2(\"filterService\")\n], FilterStage.prototype, \"filterService\", 2);\nFilterStage = __decorateClass([\n  Bean2(\"filterStage\")\n], FilterStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortStage.ts\nimport {\n  _ as _3,\n  Autowired as Autowired3,\n  Bean as Bean3,\n  BeanStub as BeanStub3\n} from \"@ag-grid-community/core\";\nvar SortStage = class extends BeanStub3 {\n  execute(params) {\n    const sortOptions = this.sortController.getSortOptions();\n    const sortActive = _3.exists(sortOptions) && sortOptions.length > 0;\n    const deltaSort = sortActive && _3.exists(params.rowNodeTransactions) && this.gridOptionsService.get(\"deltaSort\");\n    const sortContainsGroupColumns = sortOptions.some((opt) => {\n      const isSortingCoupled = this.gridOptionsService.isColumnsSortingCoupledToGroup();\n      if (isSortingCoupled) {\n        return opt.column.isPrimary() && opt.column.isRowGroupActive();\n      }\n      return !!opt.column.getColDef().showRowGroup;\n    });\n    this.sortService.sort(sortOptions, sortActive, deltaSort, params.rowNodeTransactions, params.changedPath, sortContainsGroupColumns);\n  }\n};\n__decorateClass([\n  Autowired3(\"sortService\")\n], SortStage.prototype, \"sortService\", 2);\n__decorateClass([\n  Autowired3(\"sortController\")\n], SortStage.prototype, \"sortController\", 2);\nSortStage = __decorateClass([\n  Bean3(\"sortStage\")\n], SortStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/flattenStage.ts\nimport {\n  _ as _4,\n  Autowired as Autowired4,\n  Bean as Bean4,\n  BeanStub as BeanStub4,\n  RowNode as RowNode3\n} from \"@ag-grid-community/core\";\nvar FlattenStage = class extends BeanStub4 {\n  execute(params) {\n    const rootNode = params.rowNode;\n    const result = [];\n    const skipLeafNodes = this.columnModel.isPivotMode();\n    const showRootNode = skipLeafNodes && rootNode.leafGroup;\n    const topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n    const details = this.getFlattenDetails();\n    this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);\n    const atLeastOneRowPresent = result.length > 0;\n    const includeGroupTotalFooter = !showRootNode && atLeastOneRowPresent && details.groupIncludeTotalFooter;\n    if (includeGroupTotalFooter) {\n      rootNode.createFooter();\n      this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0);\n    }\n    return result;\n  }\n  getFlattenDetails() {\n    const groupRemoveSingleChildren = this.gridOptionsService.get(\"groupRemoveSingleChildren\");\n    const groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsService.get(\"groupRemoveLowestSingleChildren\");\n    return {\n      groupRemoveLowestSingleChildren,\n      groupRemoveSingleChildren,\n      isGroupMultiAutoColumn: this.gridOptionsService.isGroupMultiAutoColumn(),\n      hideOpenParents: this.gridOptionsService.get(\"groupHideOpenParents\"),\n      groupIncludeTotalFooter: this.gridOptionsService.get(\"groupIncludeTotalFooter\"),\n      getGroupIncludeFooter: this.gridOptionsService.getGroupIncludeFooter()\n    };\n  }\n  recursivelyAddToRowsToDisplay(details, rowsToFlatten, result, skipLeafNodes, uiLevel) {\n    if (_4.missingOrEmpty(rowsToFlatten)) {\n      return;\n    }\n    for (let i = 0; i < rowsToFlatten.length; i++) {\n      const rowNode = rowsToFlatten[i];\n      const isParent = rowNode.hasChildren();\n      const isSkippedLeafNode = skipLeafNodes && !isParent;\n      const isRemovedSingleChildrenGroup = details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;\n      const isRemovedLowestSingleChildrenGroup = details.groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;\n      const neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n      const isHiddenOpenParent = details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;\n      const thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n      if (thisRowShouldBeRendered) {\n        this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);\n      }\n      if (skipLeafNodes && rowNode.leafGroup) {\n        continue;\n      }\n      if (isParent) {\n        const excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n        if (rowNode.expanded || excludedParent) {\n          const uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n          this.recursivelyAddToRowsToDisplay(\n            details,\n            rowNode.childrenAfterSort,\n            result,\n            skipLeafNodes,\n            uiLevelForChildren\n          );\n          const doesRowShowFooter = details.getGroupIncludeFooter({ node: rowNode });\n          if (doesRowShowFooter) {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          } else {\n            rowNode.destroyFooter();\n          }\n        }\n      } else if (rowNode.master && rowNode.expanded) {\n        const detailNode = this.createDetailNode(rowNode);\n        this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);\n      }\n    }\n  }\n  // duplicated method, it's also in floatingRowModel\n  addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel) {\n    result.push(rowNode);\n    rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);\n  }\n  createDetailNode(masterNode) {\n    if (_4.exists(masterNode.detailNode)) {\n      return masterNode.detailNode;\n    }\n    const detailNode = new RowNode3(this.beans);\n    detailNode.detail = true;\n    detailNode.selectable = false;\n    detailNode.parent = masterNode;\n    if (_4.exists(masterNode.id)) {\n      detailNode.id = \"detail_\" + masterNode.id;\n    }\n    detailNode.data = masterNode.data;\n    detailNode.level = masterNode.level + 1;\n    masterNode.detailNode = detailNode;\n    return detailNode;\n  }\n};\n__decorateClass([\n  Autowired4(\"columnModel\")\n], FlattenStage.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired4(\"beans\")\n], FlattenStage.prototype, \"beans\", 2);\nFlattenStage = __decorateClass([\n  Bean4(\"flattenStage\")\n], FlattenStage);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortService.ts\nimport {\n  _ as _5,\n  Autowired as Autowired5,\n  Bean as Bean5,\n  BeanStub as BeanStub5\n} from \"@ag-grid-community/core\";\nvar SortService = class extends BeanStub5 {\n  sort(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {\n    const groupMaintainOrder = this.gridOptionsService.get(\"groupMaintainOrder\");\n    const groupColumnsPresent = this.columnModel.getAllGridColumns().some((c) => c.isRowGroupActive());\n    let allDirtyNodes = {};\n    if (useDeltaSort && rowNodeTransactions) {\n      allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);\n    }\n    const isPivotMode = this.columnModel.isPivotMode();\n    const postSortFunc = this.gridOptionsService.getCallback(\"postSortRows\");\n    const callback = (rowNode) => {\n      var _a;\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\n      const skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;\n      let skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\n      if (skipSortingGroups) {\n        const nextGroup = (_a = this.columnModel.getRowGroupColumns()) == null ? void 0 : _a[rowNode.level + 1];\n        const wasSortExplicitlyRemoved = (nextGroup == null ? void 0 : nextGroup.getSort()) === null;\n        const childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);\n        if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {\n          const indexedOrders = {};\n          rowNode.childrenAfterSort.forEach((node, idx) => {\n            indexedOrders[node.id] = idx;\n          });\n          childrenToBeSorted.sort((row1, row2) => {\n            var _a2, _b;\n            return ((_a2 = indexedOrders[row1.id]) != null ? _a2 : 0) - ((_b = indexedOrders[row2.id]) != null ? _b : 0);\n          });\n        }\n        rowNode.childrenAfterSort = childrenToBeSorted;\n      } else if (!sortActive || skipSortingPivotLeafs) {\n        rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter.slice(0);\n      } else if (useDeltaSort) {\n        rowNode.childrenAfterSort = this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);\n      } else {\n        rowNode.childrenAfterSort = this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\n      }\n      this.updateChildIndexes(rowNode);\n      if (postSortFunc) {\n        const params = { nodes: rowNode.childrenAfterSort };\n        postSortFunc(params);\n      }\n    };\n    if (changedPath) {\n      changedPath.forEachChangedNodeDepthFirst(callback);\n    }\n    this.updateGroupDataForHideOpenParents(changedPath);\n  }\n  calculateDirtyNodes(rowNodeTransactions) {\n    const dirtyNodes = {};\n    const addNodesFunc = (rowNodes) => {\n      if (rowNodes) {\n        rowNodes.forEach((rowNode) => dirtyNodes[rowNode.id] = true);\n      }\n    };\n    if (rowNodeTransactions) {\n      rowNodeTransactions.forEach((tran) => {\n        addNodesFunc(tran.add);\n        addNodesFunc(tran.update);\n        addNodesFunc(tran.remove);\n      });\n    }\n    return dirtyNodes;\n  }\n  doDeltaSort(rowNode, allTouchedNodes, changedPath, sortOptions) {\n    const unsortedRows = rowNode.childrenAfterAggFilter;\n    const oldSortedRows = rowNode.childrenAfterSort;\n    if (!oldSortedRows) {\n      return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);\n    }\n    const untouchedRowsMap = {};\n    const touchedRows = [];\n    unsortedRows.forEach((row) => {\n      if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {\n        touchedRows.push(row);\n      } else {\n        untouchedRowsMap[row.id] = true;\n      }\n    });\n    const sortedUntouchedRows = oldSortedRows.filter((child) => untouchedRowsMap[child.id]);\n    const mapNodeToSortedNode = (rowNode2, pos) => ({ currentPos: pos, rowNode: rowNode2 });\n    const sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort((a, b) => this.rowNodeSorter.compareRowNodes(sortOptions, a, b));\n    return this.mergeSortedArrays(\n      sortOptions,\n      sortedChangedRows,\n      sortedUntouchedRows.map(mapNodeToSortedNode)\n    ).map(({ rowNode: rowNode2 }) => rowNode2);\n  }\n  // Merge two sorted arrays into each other\n  mergeSortedArrays(sortOptions, arr1, arr2) {\n    const res = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n      const compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n      if (compareResult < 0) {\n        res.push(arr1[i++]);\n      } else {\n        res.push(arr2[j++]);\n      }\n    }\n    while (i < arr1.length) {\n      res.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n      res.push(arr2[j++]);\n    }\n    return res;\n  }\n  updateChildIndexes(rowNode) {\n    if (_5.missing(rowNode.childrenAfterSort)) {\n      return;\n    }\n    const listToSort = rowNode.childrenAfterSort;\n    for (let i = 0; i < listToSort.length; i++) {\n      const child = listToSort[i];\n      const firstChild = i === 0;\n      const lastChild = i === rowNode.childrenAfterSort.length - 1;\n      child.setFirstChild(firstChild);\n      child.setLastChild(lastChild);\n      child.setChildIndex(i);\n    }\n  }\n  updateGroupDataForHideOpenParents(changedPath) {\n    if (!this.gridOptionsService.get(\"groupHideOpenParents\")) {\n      return;\n    }\n    if (this.gridOptionsService.get(\"treeData\")) {\n      _5.warnOnce(`The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them.`);\n      return false;\n    }\n    const callback = (rowNode) => {\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n      rowNode.childrenAfterSort.forEach((child) => {\n        if (child.hasChildren()) {\n          callback(child);\n        }\n      });\n    };\n    if (changedPath) {\n      changedPath.executeFromRootNode((rowNode) => callback(rowNode));\n    }\n  }\n  pullDownGroupDataForHideOpenParents(rowNodes, clearOperation) {\n    if (!this.gridOptionsService.get(\"groupHideOpenParents\") || _5.missing(rowNodes)) {\n      return;\n    }\n    rowNodes.forEach((childRowNode) => {\n      const groupDisplayCols = this.columnModel.getGroupDisplayColumns();\n      groupDisplayCols.forEach((groupDisplayCol) => {\n        const showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n        if (typeof showRowGroup !== \"string\") {\n          console.error(\"AG Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup\");\n          return;\n        }\n        const displayingGroupKey = showRowGroup;\n        const rowGroupColumn = this.columnModel.getPrimaryColumn(displayingGroupKey);\n        const thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n        if (thisRowNodeMatches) {\n          return;\n        }\n        if (clearOperation) {\n          childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);\n        } else {\n          const parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n          if (parentToStealFrom) {\n            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n          }\n        }\n      });\n    });\n  }\n};\n__decorateClass([\n  Autowired5(\"columnModel\")\n], SortService.prototype, \"columnModel\", 2);\n__decorateClass([\n  Autowired5(\"rowNodeSorter\")\n], SortService.prototype, \"rowNodeSorter\", 2);\nSortService = __decorateClass([\n  Bean5(\"sortService\")\n], SortService);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterService.ts\nimport {\n  Autowired as Autowired6,\n  Bean as Bean6,\n  BeanStub as BeanStub6\n} from \"@ag-grid-community/core\";\nvar FilterService = class extends BeanStub6 {\n  filter(changedPath) {\n    const filterActive = this.filterManager.isChildFilterPresent();\n    this.filterNodes(filterActive, changedPath);\n  }\n  filterNodes(filterActive, changedPath) {\n    const filterCallback = (rowNode, includeChildNodes) => {\n      if (rowNode.hasChildren()) {\n        if (filterActive && !includeChildNodes) {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter((childNode) => {\n            const passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n            const passBecauseDataPasses = childNode.data && this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            return passBecauseChildren || passBecauseDataPasses;\n          });\n        } else {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        }\n      } else {\n        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n      }\n    };\n    if (this.doingTreeDataFiltering()) {\n      const treeDataDepthFirstFilter = (rowNode, alreadyFoundInParent) => {\n        if (rowNode.childrenAfterGroup) {\n          for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            const childNode = rowNode.childrenAfterGroup[i];\n            const foundInParent = alreadyFoundInParent || this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            if (childNode.childrenAfterGroup) {\n              treeDataDepthFirstFilter(rowNode.childrenAfterGroup[i], foundInParent);\n            } else {\n              filterCallback(childNode, foundInParent);\n            }\n          }\n        }\n        filterCallback(rowNode, alreadyFoundInParent);\n      };\n      const treeDataFilterCallback = (rowNode) => treeDataDepthFirstFilter(rowNode, false);\n      changedPath.executeFromRootNode(treeDataFilterCallback);\n    } else {\n      const defaultFilterCallback = (rowNode) => filterCallback(rowNode, false);\n      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n    }\n  }\n  doingTreeDataFiltering() {\n    return this.gridOptionsService.get(\"treeData\") && !this.gridOptionsService.get(\"excludeChildrenWhenTreeDataFiltering\");\n  }\n};\n__decorateClass([\n  Autowired6(\"filterManager\")\n], FilterService.prototype, \"filterManager\", 2);\nFilterService = __decorateClass([\n  Bean6(\"filterService\")\n], FilterService);\n\n// community-modules/client-side-row-model/src/clientSideRowModel/immutableService.ts\nimport {\n  Autowired as Autowired7,\n  Bean as Bean7,\n  BeanStub as BeanStub7,\n  PostConstruct as PostConstruct3,\n  _ as _6\n} from \"@ag-grid-community/core\";\nvar ImmutableService = class extends BeanStub7 {\n  postConstruct() {\n    if (this.rowModel.getType() === \"clientSide\") {\n      this.clientSideRowModel = this.rowModel;\n      this.addManagedPropertyListener(\"rowData\", () => this.onRowDataUpdated());\n    }\n  }\n  isActive() {\n    const getRowIdProvided = this.gridOptionsService.exists(\"getRowId\");\n    const resetRowDataOnUpdate = this.gridOptionsService.get(\"resetRowDataOnUpdate\");\n    if (resetRowDataOnUpdate) {\n      return false;\n    }\n    return getRowIdProvided;\n  }\n  setRowData(rowData) {\n    const transactionAndMap = this.createTransactionForRowData(rowData);\n    if (!transactionAndMap) {\n      return;\n    }\n    const [transaction, orderIdMap] = transactionAndMap;\n    this.clientSideRowModel.updateRowData(transaction, orderIdMap);\n  }\n  // converts the setRowData() command to a transaction\n  createTransactionForRowData(rowData) {\n    if (_6.missing(this.clientSideRowModel)) {\n      console.error(\"AG Grid: ImmutableService only works with ClientSideRowModel\");\n      return;\n    }\n    const getRowIdFunc = this.gridOptionsService.getCallback(\"getRowId\");\n    if (getRowIdFunc == null) {\n      console.error(\"AG Grid: ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!\");\n      return;\n    }\n    const transaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    const existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n    const suppressSortOrder = this.gridOptionsService.get(\"suppressMaintainUnsortedOrder\");\n    const orderMap = suppressSortOrder ? void 0 : {};\n    if (_6.exists(rowData)) {\n      rowData.forEach((data, index) => {\n        const id = getRowIdFunc({ data, level: 0 });\n        const existingNode = existingNodesMap[id];\n        if (orderMap) {\n          orderMap[id] = index;\n        }\n        if (existingNode) {\n          const dataHasChanged = existingNode.data !== data;\n          if (dataHasChanged) {\n            transaction.update.push(data);\n          }\n          existingNodesMap[id] = void 0;\n        } else {\n          transaction.add.push(data);\n        }\n      });\n    }\n    _6.iterateObject(existingNodesMap, (id, rowNode) => {\n      if (rowNode) {\n        transaction.remove.push(rowNode.data);\n      }\n    });\n    return [transaction, orderMap];\n  }\n  onRowDataUpdated() {\n    const rowData = this.gridOptionsService.get(\"rowData\");\n    if (!rowData) {\n      return;\n    }\n    if (this.isActive()) {\n      this.setRowData(rowData);\n    } else {\n      this.selectionService.reset(\"rowDataChanged\");\n      this.clientSideRowModel.setRowData(rowData);\n    }\n  }\n};\n__decorateClass([\n  Autowired7(\"rowModel\")\n], ImmutableService.prototype, \"rowModel\", 2);\n__decorateClass([\n  Autowired7(\"rowRenderer\")\n], ImmutableService.prototype, \"rowRenderer\", 2);\n__decorateClass([\n  Autowired7(\"selectionService\")\n], ImmutableService.prototype, \"selectionService\", 2);\n__decorateClass([\n  PostConstruct3\n], ImmutableService.prototype, \"postConstruct\", 1);\nImmutableService = __decorateClass([\n  Bean7(\"immutableService\")\n], ImmutableService);\n\n// community-modules/client-side-row-model/src/version.ts\nvar VERSION = \"31.2.1\";\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nvar ClientSideRowModelModule = {\n  version: VERSION,\n  moduleName: ModuleNames.ClientSideRowModelModule,\n  rowModel: \"clientSide\",\n  beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService]\n};\nexport {\n  ClientSideRowModelModule\n};\n"],
  "mappings": "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",
  "names": ["__defProp", "__getOwnPropDesc", "__decorateClass", "decorators", "target", "key", "kind", "result", "i", "decorator", "ModuleNames", "_2", "Autowired", "Bean", "BeanStub", "ChangedPath", "Events2", "Optional", "PostConstruct", "ClientSideRowModelSteps", "RowNode2", "RowHighlightPosition", "Events", "RowNode", "_", "_ClientSideNodeManager", "rootNode", "gridOptionsService", "eventService", "columnModel", "selectionService", "beans", "id", "rowData", "sibling", "dataItem", "rowDataTran", "rowNodeOrder", "rowNodeTransaction", "nodesToUnselect", "event", "source", "selectionChanged", "_a", "add", "addIndex", "newNodes", "item", "allLeafChildren", "len", "normalisedAddIndex", "nodesBeforeIndex", "nodesAfterIndex", "remove", "rowIdsRemoved", "rowNode", "update", "data", "getRowIdFunc", "node", "parent", "level", "suppressParentsInRowNodes", "setExpanded", "isRowMasterFunc", "rowGroupColumns", "numRowGroupColumns", "masterRowLevel", "expandByDefault", "ClientSideNodeManager", "ClientSideRowModel", "refreshEverythingFunc", "animate", "refreshEverythingAfterColsChangedFunc", "resetProps", "groupStageRefreshProps", "filterStageRefreshProps", "pivotStageRefreshProps", "aggregateStageRefreshProps", "sortStageRefreshProps", "filterAggStageRefreshProps", "flattenStageRefreshProps", "allProps", "params", "properties", "arePropertiesImpacted", "propSet", "prop", "child", "startPixel", "endPixel", "startLimitIndex", "endLimitIndex", "atLeastOneChange", "res", "rowAtStartPixel", "rowAtEndPixel", "firstRow", "lastRow", "rowIndex", "rowHeight", "defaultRowHeight", "nextRowTop", "displayedRowsMapped", "allowEstimate", "changedPath", "changedPathActive", "clearIfNotDisplayed", "recurse", "isRootNode", "rowNodes", "pixel", "increment", "indexAtPixelNow", "rowNodeAtPixelNow", "idx", "highlight", "index", "rowTop", "filteredChildren", "topLevelIndex", "step", "col", "rowNodeTransactions", "noTransactions", "transWithAddsOrDeletes", "tx", "paramsStep", "stepsMapped", "paramsOrStep", "displayedNodesMapped", "rowsMissing", "firstInRange", "lastInRange", "started", "finished", "groupsSelectChildren", "datasource", "pixelToMatch", "bottomPointer", "topPointer", "oldBottomPointer", "oldTopPointer", "midPointer", "currentRowNode", "topPixel", "bottomPixel", "callback", "includeFooterNodes", "nodes", "recursionType", "nodeChildren", "parentNode", "expand", "usingTreeData", "usingPivotMode", "recursiveExpandOrCollapse", "actionRow", "eventSource", "afterColumnsChanged", "rowDataUpdatedEvent", "rowDataTransaction", "waitMillis", "callbackFuncsBound", "rowNodeTrans", "forceRowNodeOrder", "tranItem", "rowNodeTran", "func", "orderMap", "atLeastOne", "detailNode", "Autowired2", "Bean2", "BeanStub2", "FilterStage", "_3", "Autowired3", "Bean3", "BeanStub3", "SortStage", "sortOptions", "sortActive", "deltaSort", "sortContainsGroupColumns", "opt", "_4", "Autowired4", "Bean4", "BeanStub4", "RowNode3", "FlattenStage", "skipLeafNodes", "showRootNode", "topList", "details", "atLeastOneRowPresent", "groupRemoveSingleChildren", "rowsToFlatten", "uiLevel", "isParent", "isSkippedLeafNode", "isRemovedSingleChildrenGroup", "isRemovedLowestSingleChildrenGroup", "neverAllowToExpand", "isHiddenOpenParent", "excludedParent", "uiLevelForChildren", "masterNode", "Autowired5", "Bean5", "BeanStub5", "SortService", "useDeltaSort", "groupMaintainOrder", "groupColumnsPresent", "c", "allDirtyNodes", "isPivotMode", "postSortFunc", "skipSortingPivotLeafs", "nextGroup", "wasSortExplicitlyRemoved", "childrenToBeSorted", "indexedOrders", "row1", "row2", "_a2", "_b", "dirtyNodes", "addNodesFunc", "tran", "allTouchedNodes", "unsortedRows", "oldSortedRows", "untouchedRowsMap", "touchedRows", "row", "sortedUntouchedRows", "mapNodeToSortedNode", "rowNode2", "pos", "sortedChangedRows", "a", "b", "arr1", "arr2", "j", "_5", "listToSort", "firstChild", "lastChild", "clearOperation", "childRowNode", "groupDisplayCol", "showRowGroup", "displayingGroupKey", "rowGroupColumn", "parentToStealFrom", "Autowired6", "Bean6", "BeanStub6", "FilterService", "filterActive", "filterCallback", "includeChildNodes", "childNode", "passBecauseChildren", "passBecauseDataPasses", "treeDataDepthFirstFilter", "alreadyFoundInParent", "foundInParent", "treeDataFilterCallback", "defaultFilterCallback", "Autowired7", "Bean7", "BeanStub7", "PostConstruct3", "_6", "ImmutableService", "getRowIdProvided", "transactionAndMap", "transaction", "orderIdMap", "existingNodesMap", "existingNode", "VERSION", "ClientSideRowModelModule"]
}
